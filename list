Lambdas
Java
Python
NodeJS
EC2
Route 53
Load Balancers
ECS (Confirm)
Jenkins (EC2)
ECR
S3
Elastic Beanstalk (LAMP stack)
Aurora RDS
DynamoDB
SNS
SMS
SQS
Redshift
DMS
Secrets Manager
ElastiCache
ElasticSearch


 #!/bin/bash
#  set -x

jq="C:/Users/F37YHCS/jq/jq.exe"

# Get a list of all AWS regions
REGIONS="us-east-1"

# Define the list of resource types
RESOURCE_TYPES=(
    "AWS::Lambda::Function"
    "AWS::EC2::Instance"
    "AWS::Route53::HostedZone"
    "AWS::ElasticLoadBalancingV2::LoadBalancer"
    "AWS::ECS::Cluster"
    "AWS::ECR::Repository"
    "AWS::S3::Bucket"
    "AWS::ElasticBeanstalk::Environment"
    "AWS::RDS::DBCluster"  # Aurora RDS
    "AWS::DynamoDB::Table"
    "AWS::SNS::Topic"
    "AWS::SMS::App"
    "AWS::SQS::Queue"
    "AWS::Redshift::Cluster"
    "AWS::DMS::ReplicationInstance"
    "AWS::SecretsManager::Secret"
    "AWS::ElastiCache::CacheCluster"
    "AWS::Elasticsearch::Domain"
)

# Loop through each region
for REGION in $REGIONS; do
    echo "Region: $REGION"
    
    # Loop through each resource type
    for RESOURCE_TYPE in "${RESOURCE_TYPES[@]}"; do
        echo "Listing resources for type: $RESOURCE_TYPE"
        
        # Get the ARNs or identifiers of resources of the current type
        RESOURCE_IDENTIFIERS=$(aws configservice list-discovered-resources --resource-type "$RESOURCE_TYPE" --region $REGION --query "resourceIdentifiers[*]" --no-verify-ssl --output json)
        
        # Check if any resources were found
        if [[ -z "$RESOURCE_IDENTIFIERS" ]]; then
            echo "No resources found for type $RESOURCE_TYPE in region $REGION."
            continue
        fi
        
        # Iterate over each resource
        for RESOURCE in $(echo "${RESOURCE_IDENTIFIERS}" | $jq -c '.[]'); do
            RESOURCE_ARN=$(echo "$RESOURCE" | $jq -r '.resourceArn // .resourceIdentifier')
            RESOURCE_ID=$(echo "$RESOURCE" | $jq -r '.resourceId')
            
            # Print resource ID/ARN
            echo "Resource ID/ARN: $RESOURCE_ID / $RESOURCE_ARN"
            
            # Attempt to get tags for the resource
            TAGS=$(aws configservice list-tags-for-resource --resource-arn "$RESOURCE_ARN" --region $REGION --no-verify-ssl --output json 2>/dev/null || echo '[]')
            
            # Check if tags were retrieved successfully
            if [[ $(echo "$TAGS" | $jq -r '.Tags | length') -gt 0 ]]; then
                echo "Tags:"
                echo "$TAGS"
            else
                echo "No tags found or error retrieving tags."
            fi
            
            echo "----------------"
        done
    done
done


#!/bin/bash

# Get a list of all AWS regions
REGIONS="us-east-1"

# Define the list of resource types
RESOURCE_TYPES=(
    "AWS::Lambda::Function"
    "AWS::EC2::Instance"
    "AWS::Route53::HostedZone"
    "AWS::ElasticLoadBalancingV2::LoadBalancer"
    "AWS::ECS::Cluster"
    "AWS::ECR::Repository"
    "AWS::S3::Bucket"
    "AWS::ElasticBeanstalk::Environment"
    "AWS::RDS::DBCluster"  # Aurora RDS
    "AWS::DynamoDB::Table"
    "AWS::SNS::Topic"
    "AWS::SMS::App"
    "AWS::SQS::Queue"
    "AWS::Redshift::Cluster"
    "AWS::DMS::ReplicationInstance"
    "AWS::SecretsManager::Secret"
    "AWS::ElastiCache::CacheCluster"
    "AWS::Elasticsearch::Domain"
)

# Loop through each region
for REGION in $REGIONS; do
    echo "Region: $REGION"
    
    # Loop through each resource type
    for RESOURCE_TYPE in "${RESOURCE_TYPES[@]}"; do
        echo "Listing resources for type: $RESOURCE_TYPE"
        
        # Get the full list of resources using aws configservice
        FULL_LIST=$(aws configservice list-discovered-resources --resource-type "$RESOURCE_TYPE" --region "$REGION" --no-verify-ssl --output json)
        
        # Check if any resources were found
        if [[ -z "$FULL_LIST" ]]; then
            echo "No resources found for type $RESOURCE_TYPE in region $REGION."
            continue
        fi
        
        # Extract resource ARNs from the full list
        RESOURCE_IDENTIFIERS=$(echo "$FULL_LIST" | jq -r '.resourceIdentifiers[].resourceArn')
        
        # Iterate over each resource ARN
        for RESOURCE_ARN in $RESOURCE_IDENTIFIERS; do
            # Print resource ARN
            echo "Resource ARN: $RESOURCE_ARN"
            
            # Attempt to get tags for the resource
            TAGS=$(aws configservice list-tags-for-resource --resource-arn "$RESOURCE_ARN" --region "$REGION" --no-verify-ssl --output json 2>/dev/null || echo '[]')
            
            # Check if tags were retrieved successfully
            if [[ $(echo "$TAGS" | jq -r '.Tags | length') -gt 0 ]]; then
                echo "Tags:"
                echo "$TAGS"
            else
                echo "No tags found or error retrieving tags."
            fi
            
            echo "----------------"
        done
    done
done



#!/bin/bash

# Define AWS regions you want to query
REGIONS=$(aws ec2 describe-regions --query 'Regions[*].RegionName' --output json | jq -r '.[]')

# Define resource types to query
RESOURCE_TYPES=(
    "lambda"
    "ec2"
    "route53"
    "elasticloadbalancing"
    "ecs"
    "ecr"
    "s3"
    "elasticbeanstalk"
    "rds"
    "dynamodb"
    "sns"
    "sms"
    "sqs"
    "redshift"
    "dms"
    "secretsmanager"
    "elasticache"
    "es"  # ElasticSearch
)

# Loop through each region
for REGION in $REGIONS; do
    echo "Region: $REGION"
    
    # Loop through each resource type
    for RESOURCE_TYPE in "${RESOURCE_TYPES[@]}"; do
        echo "Listing resources for type: $RESOURCE_TYPE in region $REGION"
        
        case "$RESOURCE_TYPE" in
            "lambda")
                aws lambda list-functions --region "$REGION" --query 'Functions[*].[FunctionName, FunctionArn, Tags]' --output json |
                jq -r '.[] | "Resource ARN: \(.[1])\nTags: \(if .[2] != null then .[2] else "No tags found" end)\n----------------"'
                ;;
            "ec2")
                aws ec2 describe-instances --region "$REGION" --query 'Reservations[*].Instances[*].[InstanceId, InstanceType, Tags[?Key==`Name`].Value | [0], Placement.AvailabilityZone]' --output json |
                jq -r '.[][] | "Resource ID: \(.[0])\nResource Type: \(.[1])\nName: \(if .[2] then .[2] else "No name tag found" end)\nAvailability Zone: \(.[3])\n----------------"'
                ;;
            "route53")
                aws route53 list-hosted-zones --query 'HostedZones[*].[Name, Id]' --output json |
                jq -r '.[] | "Hosted Zone Name: \(.[0])\nHosted Zone ID: \(.[1])\n----------------"'
                ;;
            "elasticloadbalancing")
                aws elbv2 describe-load-balancers --region "$REGION" --query 'LoadBalancers[*].[LoadBalancerName, LoadBalancerArn, Scheme, DNSName]' --output json |
                jq -r '.[] | "Load Balancer Name: \(.[0])\nLoad Balancer ARN: \(.[1])\nScheme: \(.[2])\nDNS Name: \(.[3])\n----------------"'
                ;;
            "ecs")
                aws ecs list-clusters --region "$REGION" --query 'clusterArns' --output json |
                jq -r '.[] | "ECS Cluster ARN: \(.)\n----------------"'
                ;;
            "ecr")
                aws ecr describe-repositories --region "$REGION" --query 'repositories[*].[repositoryName, repositoryArn, createdAt]' --output json |
                jq -r '.[] | "ECR Repository Name: \(.[0])\nECR Repository ARN: \(.[1])\nCreated At: \(.[2])\n----------------"'
                ;;
            "s3")
                aws s3api list-buckets --query 'Buckets[*].[Name, CreationDate]' --output json |
                jq -r '.[] | "S3 Bucket Name: \(.[0])\nCreation Date: \(.[1])\n----------------"'
                ;;
            "elasticbeanstalk")
                aws elasticbeanstalk describe-environments --region "$REGION" --query 'Environments[*].[EnvironmentName, EnvironmentId, PlatformArn]' --output json |
                jq -r '.[] | "Elastic Beanstalk Environment Name: \(.[0])\nEnvironment ID: \(.[1])\nPlatform ARN: \(.[2])\n----------------"'
                ;;
            "rds")
                aws rds describe-db-clusters --region "$REGION" --query 'DBClusters[*].[DBClusterIdentifier, DBClusterArn, Engine]' --output json |
                jq -r '.[] | "RDS Aurora Cluster Name: \(.[0])\nCluster ARN: \(.[1])\nEngine: \(.[2])\n----------------"'
                ;;
            "dynamodb")
                aws dynamodb list-tables --region "$REGION" --query 'TableNames' --output json |
                jq -r '.[] | "DynamoDB Table Name: \(.)\n----------------"'
                ;;
            "sns")
                aws sns list-topics --region "$REGION" --query 'Topics[*].[TopicArn]' --output json |
                jq -r '.[] | "SNS Topic ARN: \(.)\n----------------"'
                ;;
            "sms")
                aws sms list-apps --region "$REGION" --query 'Apps[*].[appId, name, serverGroup.launchOrder]' --output json |
                jq -r '.[] | "SMS App ID: \(.[0])\nApp Name: \(.[1])\nLaunch Order: \(.[2])\n----------------"'
                ;;
            "sqs")
                aws sqs list-queues --region "$REGION" --query 'QueueUrls' --output json |
                jq -r '.[] | "SQS Queue URL: \(.)\n----------------"'
                ;;
            "redshift")
                aws redshift describe-clusters --region "$REGION" --query 'Clusters[*].[ClusterIdentifier, ClusterArn, NodeType, ClusterStatus]' --output json |
                jq -r '.[] | "Redshift Cluster Identifier: \(.[0])\nCluster ARN: \(.[1])\nNode Type: \(.[2])\nCluster Status: \(.[3])\n----------------"'
                ;;
            "dms")
                aws dms describe-replication-instances --region "$REGION" --query 'ReplicationInstances[*].[ReplicationInstanceIdentifier, ReplicationInstanceArn, ReplicationInstanceClass]' --output json |
                jq -r '.[] | "DMS Replication Instance Identifier: \(.[0])\nReplication Instance ARN: \(.[1])\nInstance Class: \(.[2])\n----------------"'
                ;;
            "secretsmanager")
                aws secretsmanager list-secrets --region "$REGION" --query 'SecretList[*].[Name, ARN, LastChangedDate]' --output json |
                jq -r '.[] | "Secret Name: \(.[0])\nSecret ARN: \(.[1])\nLast Changed Date: \(.[2])\n----------------"'
                ;;
            "elasticache")
                aws elasticache describe-cache-clusters --region "$REGION" --query 'CacheClusters[*].[CacheClusterId, ARN, Engine]' --output json |
                jq -r '.[] | "ElastiCache Cluster ID: \(.[0])\nCluster ARN: \(.[1])\nEngine: \(.[2])\n----------------"'
                ;;
            "es")
                aws es list-domain-names --region "$REGION" --query 'DomainNames[*].[DomainName, ARN, ElasticsearchVersion]' --output json |
                jq -r '.[] | "ElasticSearch Domain Name: \(.[0])\nDomain ARN: \(.[1])\nElasticsearch Version: \(.[2])\n----------------"'
                ;;
            *)
                echo "Unsupported resource type: $RESOURCE_TYPE"
                ;;
        esac
    done
done







#!/bin/bash

# Define AWS regions you want to query
REGIONS=$(aws ec2 describe-regions --query 'Regions[*].RegionName' --output json | jq -r '.[]')

# Loop through each region
for REGION in $REGIONS; do
    echo "Region: $REGION"
    
    # List Lambda functions in the region
    FUNCTIONS=$(aws lambda list-functions --region "$REGION" --query 'Functions[*].[FunctionName, FunctionArn]' --output json)
    
    # Iterate over each Lambda function
    for FUNCTION in $(echo "$FUNCTIONS" | jq -c '.[]'); do
        FUNCTION_NAME=$(echo "$FUNCTION" | jq -r '.[0]')
        FUNCTION_ARN=$(echo "$FUNCTION" | jq -r '.[1]')
        
        echo "Lambda Function Name: $FUNCTION_NAME"
        echo "Lambda Function ARN: $FUNCTION_ARN"
        
        # Fetch tags for the Lambda function
        TAGS=$(aws lambda list-tags --resource "$FUNCTION_ARN" --region "$REGION" --query 'Tags' --output json)
        
        # Check if tags were retrieved successfully
        if [[ $(echo "$TAGS" | jq -r 'length') -gt 0 ]]; then
            echo "Tags:"
            echo "$TAGS"
        else
            echo "No tags found for $FUNCTION_NAME"
        fi
        
        echo "----------------"
    done
done
