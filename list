Lambdas
Java
Python
NodeJS
EC2
Route 53
Load Balancers
ECS (Confirm)
Jenkins (EC2)
ECR
S3
Elastic Beanstalk (LAMP stack)
Aurora RDS
DynamoDB
SNS
SMS
SQS
Redshift
DMS
Secrets Manager
ElastiCache
ElasticSearch


 #!/bin/bash
#  set -x

jq="C:/Users/F37YHCS/jq/jq.exe"

# Get a list of all AWS regions
REGIONS="us-east-1"

# Define the list of resource types
RESOURCE_TYPES=(
    "AWS::Lambda::Function"
    "AWS::EC2::Instance"
    "AWS::Route53::HostedZone"
    "AWS::ElasticLoadBalancingV2::LoadBalancer"
    "AWS::ECS::Cluster"
    "AWS::ECR::Repository"
    "AWS::S3::Bucket"
    "AWS::ElasticBeanstalk::Environment"
    "AWS::RDS::DBCluster"  # Aurora RDS
    "AWS::DynamoDB::Table"
    "AWS::SNS::Topic"
    "AWS::SMS::App"
    "AWS::SQS::Queue"
    "AWS::Redshift::Cluster"
    "AWS::DMS::ReplicationInstance"
    "AWS::SecretsManager::Secret"
    "AWS::ElastiCache::CacheCluster"
    "AWS::Elasticsearch::Domain"
)

# Loop through each region
for REGION in $REGIONS; do
    echo "Region: $REGION"
    
    # Loop through each resource type
    for RESOURCE_TYPE in "${RESOURCE_TYPES[@]}"; do
        echo "Listing resources for type: $RESOURCE_TYPE"
        
        # Get the ARNs or identifiers of resources of the current type
        RESOURCE_IDENTIFIERS=$(aws configservice list-discovered-resources --resource-type "$RESOURCE_TYPE" --region $REGION --query "resourceIdentifiers[*]" --no-verify-ssl --output json)
        
        # Check if any resources were found
        if [[ -z "$RESOURCE_IDENTIFIERS" ]]; then
            echo "No resources found for type $RESOURCE_TYPE in region $REGION."
            continue
        fi
        
        # Iterate over each resource
        for RESOURCE in $(echo "${RESOURCE_IDENTIFIERS}" | $jq -c '.[]'); do
            RESOURCE_ARN=$(echo "$RESOURCE" | $jq -r '.resourceArn // .resourceIdentifier')
            RESOURCE_ID=$(echo "$RESOURCE" | $jq -r '.resourceId')
            
            # Print resource ID/ARN
            echo "Resource ID/ARN: $RESOURCE_ID / $RESOURCE_ARN"
            
            # Attempt to get tags for the resource
            TAGS=$(aws configservice list-tags-for-resource --resource-arn "$RESOURCE_ARN" --region $REGION --no-verify-ssl --output json 2>/dev/null || echo '[]')
            
            # Check if tags were retrieved successfully
            if [[ $(echo "$TAGS" | $jq -r '.Tags | length') -gt 0 ]]; then
                echo "Tags:"
                echo "$TAGS"
            else
                echo "No tags found or error retrieving tags."
            fi
            
            echo "----------------"
        done
    done
done


#!/bin/bash

# Get a list of all AWS regions
REGIONS="us-east-1"

# Define the list of resource types
RESOURCE_TYPES=(
    "AWS::Lambda::Function"
    "AWS::EC2::Instance"
    "AWS::Route53::HostedZone"
    "AWS::ElasticLoadBalancingV2::LoadBalancer"
    "AWS::ECS::Cluster"
    "AWS::ECR::Repository"
    "AWS::S3::Bucket"
    "AWS::ElasticBeanstalk::Environment"
    "AWS::RDS::DBCluster"  # Aurora RDS
    "AWS::DynamoDB::Table"
    "AWS::SNS::Topic"
    "AWS::SMS::App"
    "AWS::SQS::Queue"
    "AWS::Redshift::Cluster"
    "AWS::DMS::ReplicationInstance"
    "AWS::SecretsManager::Secret"
    "AWS::ElastiCache::CacheCluster"
    "AWS::Elasticsearch::Domain"
)

# Loop through each region
for REGION in $REGIONS; do
    echo "Region: $REGION"
    
    # Loop through each resource type
    for RESOURCE_TYPE in "${RESOURCE_TYPES[@]}"; do
        echo "Listing resources for type: $RESOURCE_TYPE"
        
        # Get the full list of resources using aws configservice
        FULL_LIST=$(aws configservice list-discovered-resources --resource-type "$RESOURCE_TYPE" --region "$REGION" --no-verify-ssl --output json)
        
        # Check if any resources were found
        if [[ -z "$FULL_LIST" ]]; then
            echo "No resources found for type $RESOURCE_TYPE in region $REGION."
            continue
        fi
        
        # Extract resource ARNs from the full list
        RESOURCE_IDENTIFIERS=$(echo "$FULL_LIST" | jq -r '.resourceIdentifiers[].resourceArn')
        
        # Iterate over each resource ARN
        for RESOURCE_ARN in $RESOURCE_IDENTIFIERS; do
            # Print resource ARN
            echo "Resource ARN: $RESOURCE_ARN"
            
            # Attempt to get tags for the resource
            TAGS=$(aws configservice list-tags-for-resource --resource-arn "$RESOURCE_ARN" --region "$REGION" --no-verify-ssl --output json 2>/dev/null || echo '[]')
            
            # Check if tags were retrieved successfully
            if [[ $(echo "$TAGS" | jq -r '.Tags | length') -gt 0 ]]; then
                echo "Tags:"
                echo "$TAGS"
            else
                echo "No tags found or error retrieving tags."
            fi
            
            echo "----------------"
        done
    done
done
