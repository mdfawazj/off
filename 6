Traceback (most recent call last):
  File "C:\Users\f37yhcs\Desktop\pulled\giftdev\vernew_copy1.py", line 723, in <module>
    for domain in elasticsearch_domains:
  File "C:\Users\f37yhcs\Desktop\pulled\giftdev\vernew_copy1.py", line 470, in paginate_boto3_results
    paginator = client.get_paginator(method)
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\f37yhcs\AppData\Roaming\Python\Python311\site-packages\botocore\client.py", line 1164, in get_paginator
    raise OperationNotPageableError(operation_name=operation_name)
botocore.exceptions.OperationNotPageableError: Operation cannot be paginated: list_domain_names


import boto3
import csv

def paginate_boto3_results(client, method, key, **kwargs):
    paginator = client.get_paginator(method)

    # Ensure 'PaginationConfig' exists in kwargs
    if 'PaginationConfig' not in kwargs:
        kwargs['PaginationConfig'] = {}

    # Set 'MaxResults' if using 'list_user_pools' method
    if method == 'list_user_pools':
        kwargs['PaginationConfig']['MaxResults'] = kwargs['PaginationConfig'].get('MaxResults', 60)

    for page in paginator.paginate(**kwargs):
        for item in page[key]:
            yield item

def get_tags(client, service, resource_id, region=None, account_number=None):
    if service == 'ec2':
        response = client.describe_tags(Filters=[{'Name': 'resource-id', 'Values': [resource_id]}])
        tags = {tag['Key']: tag['Value'] for tag in response['Tags']}
    elif service == 'rds':
        response = client.list_tags_for_resource(ResourceName=resource_id)
        tags = {tag['Key']: tag['Value'] for tag in response['TagList']}
    elif service == 'lambda':
        response = client.list_tags(Resource=resource_id)
        tags = response['Tags']
    elif service == 'elbv2':
        response = client.describe_tags(ResourceArns=[resource_id])
        tags = {tag['Key']: tag['Value'] for tag in response['TagDescriptions'][0]['Tags']}
    elif service == 'ecs':
        response = client.list_tags_for_resource(resourceArn=resource_id)
        tags = {tag['key']: tag['value'] for tag in response['tags']}
    elif service == 'dynamodb':
        response = client.list_tags_of_resource(ResourceArn=resource_id)
        tags = {tag['Key']: tag['Value'] for tag in response['Tags']}
    elif service == 'sqs':
        response = client.list_queue_tags(QueueUrl=resource_id)
        tags = response['Tags']
    elif service == 'dms':
        response = client.list_tags_for_resource(ResourceArn=resource_id)
        tags = {tag['Key']: tag['Value'] for tag in response.get('TagList', [])}
    elif service == 'secretsmanager':
        response = client.describe_secret(SecretId=resource_id)
        tags = {tag['Key']: tag['Value'] for tag in response.get('Tags', [])}
    elif service == 'elasticache':
        response = client.list_tags_for_resource(ResourceName=f'arn:aws:elasticache:{region}:{account_number}:cluster:{resource_id}')
        tags = {tag['Key']: tag['Value'] for tag in response['TagList']}
    elif service == 'es':
        response = client.list_tags(ARN=resource_id)
        tags = {tag['Key']: tag['Value'] for tag in response['TagList']}
    elif service == 'cognito':
        response = client.list_tags_for_resource(ResourceArn=resource_id)
        tags = {tag['Key']: tag['Value'] for tag in response.get('Tags', [])}
    else:
        response = client.list_tags_for_resource(ResourceArn=resource_id)
        tags = {tag['Key']: tag['Value'] for tag in response['Tags']}
    return tags

# Initialize boto3 clients for all regions and services
regions = ['us-east-1']
clients = {}
for region in regions:
    clients[region] = {
        'ec2': boto3.client('ec2', region_name=region, verify=False),
        'rds': boto3.client('rds', region_name=region, verify=False),
        'lambda': boto3.client('lambda', region_name=region, verify=False),
        'elb': boto3.client('elb', region_name=region, verify=False),
        'elbv2': boto3.client('elbv2', region_name=region, verify=False),
        'ecs': boto3.client('ecs', region_name=region, verify=False),
        'dynamodb': boto3.client('dynamodb', region_name=region, verify=False),
        'sns': boto3.client('sns', region_name=region, verify=False),
        'sqs': boto3.client('sqs', region_name=region, verify=False),
        'redshift': boto3.client('redshift', region_name=region, verify=False),
        'dms': boto3.client('dms', region_name=region, verify=False),
        'secretsmanager': boto3.client('secretsmanager', region_name=region, verify=False),
        'elasticache': boto3.client('elasticache', region_name=region, verify=False),
        'es': boto3.client('es', region_name=region, verify=False),
        'elasticbeanstalk': boto3.client('elasticbeanstalk', region_name=region, verify=False),
        's3': boto3.client('s3', region_name=region, verify=False),
        'route53': boto3.client('route53', region_name=region, verify=False),
        'cognito': boto3.client('cognito-idp', region_name=region, verify=False)
    }

# Collect resources
resources = []

for region, client_dict in clients.items():
    account_number = boto3.client('sts').get_caller_identity().get('Account')

    # Fetch EC2 instances
    ec2_instances = paginate_boto3_results(client_dict['ec2'], 'describe_instances', 'Reservations')
    for reservation in ec2_instances:
        for instance in reservation['Instances']:
            tags = get_tags(client_dict['ec2'], 'ec2', instance['InstanceId'])
            resources.append({
                'ResourceType': 'EC2 Instance',
                'ResourceArn': instance['InstanceId'],
                'ResourceName': instance.get('InstanceId'),
                'Region': region,
                'Tags': tags
            })
    
    # Fetch RDS instances
    rds_instances = paginate_boto3_results(client_dict['rds'], 'describe_db_instances', 'DBInstances')
    for instance in rds_instances:
        tags = get_tags(client_dict['rds'], 'rds', instance['DBInstanceArn'])
        resources.append({
            'ResourceType': 'RDS Instance',
            'ResourceArn': instance['DBInstanceArn'],
            'ResourceName': instance['DBInstanceIdentifier'],
            'Region': region,
            'Tags': tags
        })
    
    # Fetch Lambda functions
    lambda_functions = paginate_boto3_results(client_dict['lambda'], 'list_functions', 'Functions')
    for function in lambda_functions:
        tags = get_tags(client_dict['lambda'], 'lambda', function['FunctionArn'])
        resources.append({
            'ResourceType': 'Lambda Function',
            'ResourceArn': function['FunctionArn'],
            'ResourceName': function['FunctionName'],
            'Region': region,
            'Tags': tags
        })
    
    # Fetch Classic Load Balancers
    elbs = paginate_boto3_results(client_dict['elb'], 'describe_load_balancers', 'LoadBalancerDescriptions')
    for elb in elbs:
        tags = get_tags(client_dict['elb'], 'elb', elb['LoadBalancerName'])
        resources.append({
            'ResourceType': 'Classic Load Balancer',
            'ResourceArn': f"arn:aws:elb:{region}:{account_number}:loadbalancer/{elb['LoadBalancerName']}",
            'ResourceName': elb['LoadBalancerName'],
            'Region': region,
            'Tags': tags
        })
    
    # Fetch Application and Network Load Balancers
    elbv2s = paginate_boto3_results(client_dict['elbv2'], 'describe_load_balancers', 'LoadBalancers')
    for elbv2 in elbv2s:
        tags = get_tags(client_dict['elbv2'], 'elbv2', elbv2['LoadBalancerArn'])
        resources.append({
            'ResourceType': 'Application/Network Load Balancer',
            'ResourceArn': elbv2['LoadBalancerArn'],
            'ResourceName': elbv2['LoadBalancerName'],
            'Region': region,
            'Tags': tags
        })
    
    # Fetch ECS clusters
    ecs_clusters = paginate_boto3_results(client_dict['ecs'], 'list_clusters', 'clusterArns')
    for cluster_arn in ecs_clusters:
        cluster_name = cluster_arn.split('/')[-1]
        tags = get_tags(client_dict['ecs'], 'ecs', cluster_arn)
        resources.append({
            'ResourceType': 'ECS Cluster',
            'ResourceArn': cluster_arn,
            'ResourceName': cluster_name,
            'Region': region,
            'Tags': tags
        })
    
    # Fetch DynamoDB tables
    dynamodb_tables = paginate_boto3_results(client_dict['dynamodb'], 'list_tables', 'TableNames')
    for table_name in dynamodb_tables:
        table_arn = f"arn:aws:dynamodb:{region}:{account_number}:table/{table_name}"
        tags = get_tags(client_dict['dynamodb'], 'dynamodb', table_arn)
        resources.append({
            'ResourceType': 'DynamoDB Table',
            'ResourceArn': table_arn,
            'ResourceName': table_name,
            'Region': region,
            'Tags': tags
        })
    
    # Fetch SNS topics
    sns_topics = paginate_boto3_results(client_dict['sns'], 'list_topics', 'Topics')
    for topic in sns_topics:
        tags = get_tags(client_dict['sns'], 'sns', topic['TopicArn'])
        resources.append({
            'ResourceType': 'SNS Topic',
            'ResourceArn': topic['TopicArn'],
            'ResourceName': topic['TopicArn'].split(':')[-1],
            'Region': region,
            'Tags': tags
        })
    
    # Fetch SQS queues
    sqs_queues = paginate_boto3_results(client_dict['sqs'], 'list_queues', 'QueueUrls')
    for queue_url in sqs_queues:
        tags = get_tags(client_dict['sqs'], 'sqs', queue_url)
        resources.append({
            'ResourceType': 'SQS Queue',
            'ResourceArn': queue_url,
            'ResourceName': queue_url.split('/')[-1],
            'Region': region,
            'Tags': tags
        })
    
    # Fetch Redshift clusters
    redshift_clusters = paginate_boto3_results(client_dict['redshift'], 'describe_clusters', 'Clusters')
    for cluster in redshift_clusters:
        tags = get_tags(client_dict['redshift'], 'redshift', cluster['ClusterIdentifier'])
        resources.append({
            'ResourceType': 'Redshift Cluster',
            'ResourceArn': cluster['ClusterIdentifier'],
            'ResourceName': cluster['ClusterIdentifier'],
            'Region': region,
            'Tags': tags
        })
    
    # Fetch DMS replication instances
    dms_instances = paginate_boto3_results(client_dict['dms'], 'describe_replication_instances', 'ReplicationInstances')
    for instance in dms_instances:
        tags = get_tags(client_dict['dms'], 'dms', instance['ReplicationInstanceArn'])
        resources.append({
            'ResourceType': 'DMS Replication Instance',
            'ResourceArn': instance['ReplicationInstanceArn'],
            'ResourceName': instance['ReplicationInstanceIdentifier'],
            'Region': region,
            'Tags': tags
        })
    
    # Fetch Secrets Manager secrets
    secrets_manager_secrets = paginate_boto3_results(client_dict['secretsmanager'], 'list_secrets', 'SecretList')
    for secret in secrets_manager_secrets:
        tags = get_tags(client_dict['secretsmanager'], 'secretsmanager', secret['ARN'])
        resources.append({
            'ResourceType': 'Secrets Manager Secret',
            'ResourceArn': secret['ARN'],
            'ResourceName': secret['Name'],
            'Region': region,
            'Tags': tags
        })
    
    # Fetch ElastiCache clusters
    elasticache_clusters = paginate_boto3_results(client_dict['elasticache'], 'describe_cache_clusters', 'CacheClusters')
    for cluster in elasticache_clusters:
        cluster_arn = f"arn:aws:elasticache:{region}:{account_number}:cluster:{cluster['CacheClusterId']}"
        tags = get_tags(client_dict['elasticache'], 'elasticache', cluster['CacheClusterId'], region, account_number)
        resources.append({
            'ResourceType': 'ElastiCache Cluster',
            'ResourceArn': cluster_arn,
            'ResourceName': cluster['CacheClusterId'],
            'Region': region,
            'Tags': tags
        })
    
    # Fetch Elasticsearch domains
    elasticsearch_domains = paginate_boto3_results(client_dict['es'], 'list_domain_names', 'DomainNames')
    for domain in elasticsearch_domains:
        domain_arn = f"arn:aws:es:{region}:{account_number}:domain/{domain['DomainName']}"
        tags = get_tags(client_dict['es'], 'es', domain_arn)
        resources.append({
            'ResourceType': 'Elasticsearch Domain',
            'ResourceArn': domain_arn,
            'ResourceName': domain['DomainName'],
            'Region': region,
            'Tags': tags
        })
    
    # Fetch Elastic Beanstalk applications
    beanstalk_applications = paginate_boto3_results(client_dict['elasticbeanstalk'], 'describe_applications', 'Applications')
    for app in beanstalk_applications:
        tags = get_tags(client_dict['elasticbeanstalk'], 'elasticbeanstalk', app['ApplicationArn'])
        resources.append({
            'ResourceType': 'Elastic Beanstalk Application',
            'ResourceArn': app['ApplicationArn'],
            'ResourceName': app['ApplicationName'],
            'Region': region,
            'Tags': tags
        })
    
    # Fetch S3 buckets
    s3_buckets = client_dict['s3'].list_buckets()
    for bucket in s3_buckets['Buckets']:
        bucket_arn = f"arn:aws:s3:::{bucket['Name']}"
        tags = get_tags(client_dict['s3'], 's3', bucket_arn)
        resources.append({
            'ResourceType': 'S3 Bucket',
            'ResourceArn': bucket_arn,
            'ResourceName': bucket['Name'],
            'Region': region,
            'Tags': tags
        })
    
    # Fetch Route 53 hosted zones
    route53_zones = paginate_boto3_results(client_dict['route53'], 'list_hosted_zones', 'HostedZones')
    for zone in route53_zones:
        tags = get_tags(client_dict['route53'], 'route53', zone['Id'])
        resources.append({
            'ResourceType': 'Route 53 Hosted Zone',
            'ResourceArn': zone['Id'],
            'ResourceName': zone['Name'],
            'Region': region,
            'Tags': tags
        })
    
    # Fetch Cognito user pools
    cognito_user_pools = paginate_boto3_results(client_dict['cognito'], 'list_user_pools', 'UserPools', MaxResults=60)
    for pool in cognito_user_pools:
        tags = get_tags(client_dict['cognito'], 'cognito', pool['Id'])
        resources.append({
            'ResourceType': 'Cognito User Pool',
            'ResourceArn': pool['Id'],
            'ResourceName': pool['Name'],
            'Region': region,
            'Tags': tags
        })

# Write resources to CSV
csv_columns = ['ResourceType', 'ResourceArn', 'ResourceName', 'Region', 'Tags']
csv_file = 'aws_resources.csv'

try:
    with open(csv_file, 'w') as csvfile:
        writer = csv.DictWriter(csvfile, fieldnames=csv_columns)
        writer.writeheader()
        for data in resources:
            writer.writerow(data)
except IOError:
    print("I/O error")
