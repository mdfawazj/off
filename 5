import boto3
import csv

def paginate_boto3_results(client, method, key, **kwargs):
    paginator = client.get_paginator(method)

    # Ensure 'PaginationConfig' exists in kwargs
    if 'PaginationConfig' not in kwargs:
        kwargs['PaginationConfig'] = {}

    # Set 'MaxResults' if using 'list_user_pools' method
    if method == 'list_user_pools':
        kwargs['PaginationConfig']['MaxResults'] = kwargs['PaginationConfig'].get('MaxResults', 60)

    for page in paginator.paginate(**kwargs):
        for item in page[key]:
            yield item

def get_tags(client, service, resource_id):
    if service == 'ec2':
        response = client.describe_tags(Filters=[{'Name': 'resource-id', 'Values': [resource_id]}])
        tags = {tag['Key']: tag['Value'] for tag in response['Tags']}
    elif service == 'rds':
        response = client.list_tags_for_resource(ResourceName=resource_id)
        tags = {tag['Key']: tag['Value'] for tag in response['TagList']}
    elif service == 'lambda':
        response = client.list_tags(Resource=resource_id)
        tags = response['Tags']
    elif service == 'elbv2':
        response = client.describe_tags(ResourceArns=[resource_id])
        tags = {tag['Key']: tag['Value'] for tag in response['TagDescriptions'][0]['Tags']}
    elif service == 'ecs':
        response = client.list_tags_for_resource(resourceArn=resource_id)
        tags = {tag['key']: tag['value'] for tag in response['tags']}
    elif service == 'dynamodb':
        response = client.list_tags_of_resource(ResourceArn=resource_id)
        tags = {tag['Key']: tag['Value'] for tag in response['Tags']}
    elif service == 'sqs':
        response = client.list_queue_tags(QueueUrl=resource_id)
        tags = response['Tags']
    elif service == 'dms':
        response = client.list_tags_for_resource(ResourceArn=resource_id)
        tags = {tag['Key']: tag['Value'] for tag in response.get('TagList', [])}
    elif service == 'secretsmanager':
        response = client.describe_secret(SecretId=resource_id)
        tags = {tag['Key']: tag['Value'] for tag in response.get('Tags', [])}
    elif service == 'elasticache':
        response = client.list_tags_for_resource(ResourceName=resource_id)
        tags = {tag['Key']: tag['Value'] for tag in response['TagList']}
    elif service == 'es':
        response = client.list_tags(ARN=resource_id)
        tags = {tag['Key']: tag['Value'] for tag in response['TagList']}
    elif service == 'cognito':
        response = client.list_tags_for_resource(ResourceArn=resource_id)
        tags = {tag['Key']: tag['Value'] for tag in response.get('Tags', [])}
    else:
        response = client.list_tags_for_resource(ResourceArn=resource_id)
        tags = {tag['Key']: tag['Value'] for tag in response['Tags']}
    return tags

# Initialize boto3 clients for all regions and services
regions = ['us-east-1']
clients = {}
for region in regions:
    clients[region] = {
        'ec2': boto3.client('ec2', region_name=region, verify=False),
        'rds': boto3.client('rds', region_name=region, verify=False),
        'lambda': boto3.client('lambda', region_name=region, verify=False),
        'elb': boto3.client('elb', region_name=region, verify=False),
        'elbv2': boto3.client('elbv2', region_name=region, verify=False),
        'ecs': boto3.client('ecs', region_name=region, verify=False),
        'dynamodb': boto3.client('dynamodb', region_name=region, verify=False),
        'sns': boto3.client('sns', region_name=region, verify=False),
        'sqs': boto3.client('sqs', region_name=region, verify=False),
        'redshift': boto3.client('redshift', region_name=region, verify=False),
        'dms': boto3.client('dms', region_name=region, verify=False),
        'secretsmanager': boto3.client('secretsmanager', region_name=region, verify=False),
        'elasticache': boto3.client('elasticache', region_name=region, verify=False),
        'es': boto3.client('es', region_name=region, verify=False),
        'elasticbeanstalk': boto3.client('elasticbeanstalk', region_name=region, verify=False),
        's3': boto3.client('s3', region_name=region, verify=False),
        'route53': boto3.client('route53', region_name=region, verify=False),
        'cognito': boto3.client('cognito-idp', region_name=region, verify=False)  # Add Cognito client
    }

# Collect resources
resources = []

for region, client_dict in clients.items():
    account_number = boto3.client('sts').get_caller_identity().get('Account')

    # Fetch SecretsManager secrets
    secrets = paginate_boto3_results(client_dict['secretsmanager'], 'list_secrets', 'SecretList')
    for secret in secrets:
        tags = get_tags(client_dict['secretsmanager'], 'secretsmanager', secret['ARN'])
        resources.append({
            'ResourceType': 'Secrets Manager Secret',
            'ResourceArn': secret['ARN'],
            'ResourceName': secret['Name'],
            'Region': region,
            'Tags': tags
        })

    # Fetch ElastiCache clusters
    elasticache_clusters = paginate_boto3_results(client_dict['elasticache'], 'describe_cache_clusters', 'CacheClusters')
    for cluster in elasticache_clusters:
        cluster_arn = f"arn:aws:elasticache:{region}:{account_number}:cluster:{cluster['CacheClusterId']}"
        try:
            tags = get_tags(client_dict['elasticache'], 'elasticache', cluster_arn)
        except Exception as e:
            print(f"Error fetching tags for elasticache {cluster['CacheClusterId']}: {e}")
            tags = {}
        resources.append({
            'ResourceType': 'ElastiCache Cluster',
            'ResourceArn': cluster_arn,
            'ResourceName': cluster['CacheClusterId'],
            'Region': region,
            'Tags': tags
        })

    # Fetch Elasticsearch domains
    es_domains = client_dict['es'].list_domain_names()['DomainNames']
    for domain in es_domains:
        domain_name = domain['DomainName']
        domain_arn = f"arn:aws:es:{region}:{account_number}:domain/{domain_name}"
        tags = get_tags(client_dict['es'], 'es', domain_arn)
        resources.append({
            'ResourceType': 'Elasticsearch Domain',
            'ResourceArn': domain_arn,
            'ResourceName': domain_name,
            'Region': region,
            'Tags': tags
        })

    # Fetch Cognito user pools
    cognito_user_pools = paginate_boto3_results(client_dict['cognito'], 'list_user_pools', 'UserPools', PaginationConfig={'MaxResults': 60})
    for user_pool in cognito_user_pools:
        user_pool_arn = f"arn:aws:cognito-idp:{region}:{account_number}:userpool/{user_pool['Id']}"
        tags = get_tags(client_dict['cognito'], 'cognito', user_pool_arn)
        resources.append({
            'ResourceType': 'Cognito User Pool',
            'ResourceArn': user_pool_arn,
            'ResourceName': user_pool['Name'],
            'Region': region,
            'Tags': tags
        })

# Write resources to CSV
with open('aws_resources.csv', 'w', newline='') as csvfile:
    fieldnames = ['ResourceType', 'ResourceArn', 'ResourceName', 'Region', 'Tags']
    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)

    writer.writeheader()
    for resource in resources:
        writer.writerow(resource)

print("Resources and tags have been written to aws_resources.csv")
