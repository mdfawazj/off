import boto3
import csv
from botocore.exceptions import ClientError

regions = ['us-east-1']  # List of regions
account_number = boto3.client('sts').get_caller_identity()['Account']

# Function to create clients for a given region
def create_clients(region):
    return {
        'ec2': boto3.client('ec2', region_name=region, verify=False),
        'rds': boto3.client('rds', region_name=region, verify=False),
        'lambda': boto3.client('lambda', region_name=region, verify=False),
        'elb': boto3.client('elb', region_name=region, verify=False),
        'elbv2': boto3.client('elbv2', region_name=region, verify=False),
        'ecs': boto3.client('ecs', region_name=region, verify=False),
        'dynamodb': boto3.client('dynamodb', region_name=region, verify=False),
        'sns': boto3.client('sns', region_name=region, verify=False),
        'sqs': boto3.client('sqs', region_name=region, verify=False),
        'redshift': boto3.client('redshift', region_name=region, verify=False),
        'dms': boto3.client('dms', region_name=region, verify=False),
        'secretsmanager': boto3.client('secretsmanager', region_name=region, verify=False),
        'elasticache': boto3.client('elasticache', region_name=region, verify=False),
        'es': boto3.client('es', region_name=region, verify=False),
        'elasticbeanstalk': boto3.client('elasticbeanstalk', region_name=region, verify=False),
        's3': boto3.client('s3', region_name=region, verify=False),
        'ecr': boto3.client('ecr', region_name=region, verify=False),
        'route53': boto3.client('route53', region_name=region, verify=False),
        'cognito-idp': boto3.client('cognito-idp', region_name=region, verify=False),
        'cognito-identity': boto3.client('cognito-identity', region_name=region, verify=False),
    }

def paginate_boto3_results(client, method, key):
    results = []
    paginator = client.get_paginator(method)
    page_iterator = paginator.paginate(PaginationConfig={'MaxItems': 1000})

    for page in paginator.paginate():
        results.extend(page.get(key, []))
    return results

def fetch_cognito_user_pools(client):
    results = []
    paginator = client.get_paginator('list_user_pools')
    for page in paginator.paginate(MaxResults=60):
        results.extend(page.get('UserPools', []))
    return results

def fetch_cognito_identity_pools(client):
    results = []
    paginator = client.get_paginator('list_identity_pools')
    for page in paginator.paginate(MaxResults=60):
        results.extend(page.get('IdentityPools', []))
    return results

def get_tags(client, resource_type, arn):
    try:
        if resource_type == 's3':
            response = client.get_bucket_tagging(Bucket=arn)
            return {tag['Key']: tag['Value'] for tag in response.get('TagSet', [])}
        elif resource_type == 'ec2':
            response = client.describe_tags(Filters=[{'Name': 'resource-id', 'Values': [arn]}])
            return {tag['Key']: tag['Value'] for tag in response.get('Tags', [])}
        elif resource_type == 'rds':
            response = client.list_tags_for_resource(ResourceName=arn)
            return {tag['Key']: tag['Value'] for tag in response.get('TagList', [])}
        elif resource_type == 'lambda':
            response = client.list_tags(Resource=arn)
            return response.get('Tags', {})
        elif resource_type == 'elb':
            response = client.describe_tags(LoadBalancerNames=[arn])
            tags = {}
            if response['TagDescriptions']:
                for tag in response['TagDescriptions'][0]['Tags']:
                    tags[tag['Key']] = tag['Value']
            return tags
        elif resource_type == 'elbv2':
            response = client.describe_tags(ResourceArns=[arn])
            tags = {}
            if response['TagDescriptions']:
                for tag in response['TagDescriptions'][0]['Tags']:
                    tags[tag['Key']] = tag['Value']
            return tags
        elif resource_type == 'dynamodb':
            response = client.list_tags_of_resource(ResourceArn=arn)
            return {tag['Key']: tag['Value'] for tag in response.get('Tags', [])}
        elif resource_type == 'sns':
            response = client.list_tags_for_resource(ResourceArn=arn)
            return {tag['Key']: tag['Value'] for tag in response.get('Tags', [])}
        elif resource_type == 'sqs':
            response = client.list_queue_tags(QueueUrl=arn)
            return response.get('Tags', {})
        elif resource_type == 'redshift':
            response = client.describe_tags(ResourceName=arn)
            return {tag['Key']: tag['Value'] for tag in response.get('TaggedResources', [])}
        elif resource_type == 'dms':
            response = client.list_tags_for_resource(ResourceArn=arn)
            return {tag['Key']: tag['Value'] for tag in response.get('TagList', [])}
        elif resource_type == 'secretsmanager':
            response = client.describe_secret(SecretId=arn)
            return {tag['Key']: tag['Value'] for tag in response.get('Tags', [])}
        elif resource_type == 'elasticache':
            response = client.list_tags_for_resource(ResourceName=arn)
            return {tag['Key']: tag['Value'] for tag in response.get('TagList', [])}
        elif resource_type == 'es':
            response = client.list_tags(ARN=arn)
            return {tag['Key']: tag['Value'] for tag in response.get('TagList', [])}
        elif resource_type == 'elasticbeanstalk':
            response = client.list_tags_for_resource(ResourceArn=arn)
            return {tag['Key']: tag['Value'] for tag in response.get('ResourceTags', [])}
        elif resource_type == 'ecr':
            response = client.list_tags_for_resource(resourceArn=arn)
            return {tag['Key']: tag['Value'] for tag in response.get('tags', [])}
        elif resource_type == 'route53':
            response = client.list_tags_for_resource(ResourceType='hostedzone', ResourceId=arn)
            return {tag['Key']: tag['Value'] for tag in response.get('Tags', [])}
        elif resource_type == 'cognito-idp':
            # Cognito User Pools do not support tag retrieval in this way
            return {}
        elif resource_type == 'cognito-identity':
            # Cognito Identity Pools do not support tag retrieval in this way
            return {}
    except ClientError as e:
        print(f"Error fetching tags for {resource_type} {arn}: {e}")
        return {}

# Specify the 'fiserv' tag keys
fiserv_tag_keys = ['fiserv::apm', 'fiserv::app', 'fiserv::description', 'fiserv::owner', 'fiserv::group', 'fiserv::stage', 'fiserv::environment']

resources = []
processed_s3_buckets = set()

for region in regions:
    print(f"Processing region: {region}")
    clients = create_clients(region)

    # Fetch EC2 Instances
    try:
        instances = paginate_boto3_results(clients['ec2'], 'describe_instances', 'Reservations')
        for reservation in instances:
            for instance in reservation['Instances']:
                instance_id = instance['InstanceId']
                instance_arn = f"arn:aws:ec2:{region}:{account_number}:instance/{instance_id}"
                tags = get_tags(clients['ec2'], 'ec2', instance_id)
                resources.append({
                    'ResourceType': 'EC2 Instance',
                    'ResourceArn': instance_arn,
                    'ResourceName': instance_id,
                    'Region': region,
                    'Tags': tags
                })
    except ClientError as e:
        print(f"Error fetching EC2 Instances: {e}")

    # Fetch RDS Instances
    try:
        instances = paginate_boto3_results(clients['rds'], 'describe_db_instances', 'DBInstances')
        for instance in instances:
            instance_id = instance['DBInstanceIdentifier']
            instance_arn = instance['DBInstanceArn']
            tags = get_tags(clients['rds'], 'rds', instance_arn)
            resources.append({
                'ResourceType': 'RDS Instance',
                'ResourceArn': instance_arn,
                'ResourceName': instance_id,
                'Region': region,
                'Tags': tags
            })
    except ClientError as e:
        print(f"Error fetching RDS Instances: {e}")

    # Fetch Lambda Functions
    try:
        functions = paginate_boto3_results(clients['lambda'], 'list_functions', 'Functions')
        for function in functions:
            function_name = function['FunctionName']
            function_arn = function['FunctionArn']
            tags = get_tags(clients['lambda'], 'lambda', function_arn)
            resources.append({
                'ResourceType': 'Lambda Function',
                'ResourceArn': function_arn,
                'ResourceName': function_name,
                'Region': region,
                'Tags': tags
            })
    except ClientError as e:
        print(f"Error fetching Lambda Functions: {e}")

    # Fetch ELB Classic Load Balancers
    try:
        load_balancers = paginate_boto3_results(clients['elb'], 'describe_load_balancers', 'LoadBalancerDescriptions')
        for lb in load_balancers:
            lb_name = lb['LoadBalancerName']
            lb_arn = f"arn:aws:elb:{region}:{account_number}:loadbalancer/{lb_name}"
            tags = get_tags(clients['elb'], 'elb', lb_name)
            resources.append({
                'ResourceType': 'ELB Classic Load Balancer',
                'ResourceArn': lb_arn,
                'ResourceName': lb_name,
                'Region': region,
                'Tags': tags
            })
    except ClientError as e:
        print(f"Error fetching ELB Classic Load Balancers: {e}")

    # Fetch ELB V2 (ALB/NLB) Load Balancers
    try:
        load_balancers = paginate_boto3_results(clients['elbv2'], 'describe_load_balancers', 'LoadBalancers')
        for lb in load_balancers:
            lb_arn = lb['LoadBalancerArn']
            lb_name = lb['LoadBalancerName']
            tags = get_tags(clients['elbv2'], 'elbv2', lb_arn)
            resources.append({
                'ResourceType': 'ELB V2 Load Balancer',
                'ResourceArn': lb_arn,
                'ResourceName': lb_name,
                'Region': region,
                'Tags': tags
            })
    except ClientError as e:
        print(f"Error fetching ELB V2 Load Balancers: {e}")

    # Fetch ECS Clusters
    try:
        clusters = paginate_boto3_results(clients['ecs'], 'list_clusters', 'clusterArns')
        for cluster_arn in clusters:
            cluster_name = cluster_arn.split('/')[-1]
            tags = get_tags(clients['ecs'], 'ecs', cluster_arn)
            resources.append({
                'ResourceType': 'ECS Cluster',
                'ResourceArn': cluster_arn,
                'ResourceName': cluster_name,
                'Region': region,
                'Tags': tags
            })
    except ClientError as e:
        print(f"Error fetching ECS Clusters: {e}")

    # Fetch DynamoDB Tables
    try:
        tables = paginate_boto3_results(clients['dynamodb'], 'list_tables', 'TableNames')
        for table_name in tables:
            table_arn = f"arn:aws:dynamodb:{region}:{account_number}:table/{table_name}"
            tags = get_tags(clients['dynamodb'], 'dynamodb', table_arn)
            resources.append({
                'ResourceType': 'DynamoDB Table',
                'ResourceArn': table_arn,
                'ResourceName': table_name,
                'Region': region,
                'Tags': tags
            })
    except ClientError as e:
        print(f"Error fetching DynamoDB Tables: {e}")

    # Fetch SNS Topics
    try:
        topics = paginate_boto3_results(clients['sns'], 'list_topics', 'Topics')
        for topic in topics:
            topic_arn = topic['TopicArn']
            tags = get_tags(clients['sns'], 'sns', topic_arn)
            resources.append({
                'ResourceType': 'SNS Topic',
                'ResourceArn': topic_arn,
                'ResourceName': topic_arn.split(':')[-1],
                'Region': region,
                'Tags': tags
            })
    except ClientError as e:
        print(f"Error fetching SNS Topics: {e}")

    # Fetch SQS Queues
    try:
        queues = paginate_boto3_results(clients['sqs'], 'list_queues', 'QueueUrls')
        for queue_url in queues:
            queue_arn = f"arn:aws:sqs:{region}:{account_number}:{queue_url.split('/')[-1]}"
            tags = get_tags(clients['sqs'], 'sqs', queue_url)
            resources.append({
                'ResourceType': 'SQS Queue',
                'ResourceArn': queue_arn,
                'ResourceName': queue_url.split('/')[-1],
                'Region': region,
                'Tags': tags
            })
    except ClientError as e:
        print(f"Error fetching SQS Queues: {e}")

    # Fetch Redshift Clusters
    try:
        clusters = paginate_boto3_results(clients['redshift'], 'describe_clusters', 'Clusters')
        for cluster in clusters:
            cluster_id = cluster['ClusterIdentifier']
            cluster_arn = cluster['ClusterArn']
            tags = get_tags(clients['redshift'], 'redshift', cluster_arn)
            resources.append({
                'ResourceType': 'Redshift Cluster',
                'ResourceArn': cluster_arn,
                'ResourceName': cluster_id,
                'Region': region,
                'Tags': tags
            })
    except ClientError as e:
        print(f"Error fetching Redshift Clusters: {e}")

    # Fetch DMS Replication Instances
    try:
        instances = paginate_boto3_results(clients['dms'], 'describe_replication_instances', 'ReplicationInstances')
        for instance in instances:
            instance_id = instance['ReplicationInstanceIdentifier']
            instance_arn = instance['ReplicationInstanceArn']
            tags = get_tags(clients['dms'], 'dms', instance_arn)
            resources.append({
                'ResourceType': 'DMS Replication Instance',
                'ResourceArn': instance_arn,
                'ResourceName': instance_id,
                'Region': region,
                'Tags': tags
            })
    except ClientError as e:
        print(f"Error fetching DMS Replication Instances: {e}")

    # Fetch Secrets Manager Secrets
    try:
        secrets = paginate_boto3_results(clients['secretsmanager'], 'list_secrets', 'SecretList')
        for secret in secrets:
            secret_id = secret['ARN']
            tags = get_tags(clients['secretsmanager'], 'secretsmanager', secret_id)
            resources.append({
                'ResourceType': 'Secrets Manager Secret',
                'ResourceArn': secret_id,
                'ResourceName': secret_id.split(':')[-1],
                'Region': region,
                'Tags': tags
            })
    except ClientError as e:
        print(f"Error fetching Secrets Manager Secrets: {e}")

    # Fetch ElastiCache Clusters
    try:
        clusters = paginate_boto3_results(clients['elasticache'], 'list_cache_clusters', 'CacheClusters')
        for cluster in clusters:
            cluster_id = cluster['CacheClusterId']
            cluster_arn = f"arn:aws:elasticache:{region}:{account_number}:cluster:{cluster_id}"
            tags = get_tags(clients['elasticache'], 'elasticache', cluster_arn)
            resources.append({
                'ResourceType': 'ElastiCache Cluster',
                'ResourceArn': cluster_arn,
                'ResourceName': cluster_id,
                'Region': region,
                'Tags': tags
            })
    except ClientError as e:
        print(f"Error fetching ElastiCache Clusters: {e}")

    # Fetch Elasticsearch Domains
    try:
        domains = paginate_boto3_results(clients['es'], 'list_domain_names', 'DomainNames')
        for domain in domains:
            domain_name = domain['DomainName']
            domain_arn = f"arn:aws:es:{region}:{account_number}:domain/{domain_name}"
            tags = get_tags(clients['es'], 'es', domain_arn)
            resources.append({
                'ResourceType': 'Elasticsearch Domain',
                'ResourceArn': domain_arn,
                'ResourceName': domain_name,
                'Region': region,
                'Tags': tags
            })
    except ClientError as e:
        print(f"Error fetching Elasticsearch Domains: {e}")

    # Fetch Elastic Beanstalk Environments
    try:
        environments = paginate_boto3_results(clients['elasticbeanstalk'], 'describe_environments', 'Environments')
        for environment in environments:
            environment_name = environment['EnvironmentName']
            environment_arn = environment['EnvironmentArn']
            tags = get_tags(clients['elasticbeanstalk'], 'elasticbeanstalk', environment_arn)
            resources.append({
                'ResourceType': 'Elastic Beanstalk Environment',
                'ResourceArn': environment_arn,
                'ResourceName': environment_name,
                'Region': region,
                'Tags': tags
            })
    except ClientError as e:
        print(f"Error fetching Elastic Beanstalk Environments: {e}")

    # Fetch ECR Repositories
    try:
        repositories = paginate_boto3_results(clients['ecr'], 'describe_repositories', 'repositories')
        for repo in repositories:
            repo_name = repo['repositoryName']
            repo_arn = f"arn:aws:ecr:{region}:{account_number}:repository/{repo_name}"
            tags = get_tags(clients['ecr'], 'ecr', repo_arn)
            resources.append({
                'ResourceType': 'ECR Repository',
                'ResourceArn': repo_arn,
                'ResourceName': repo_name,
                'Region': region,
                'Tags': tags
            })
    except ClientError as e:
        print(f"Error fetching ECR Repositories: {e}")

    # Fetch Route 53 Hosted Zones
    try:
        zones = paginate_boto3_results(clients['route53'], 'list_hosted_zones', 'HostedZones')
        for zone in zones:
            zone_id = zone['Id']
            tags = get_tags(clients['route53'], 'route53', zone_id)
            resources.append({
                'ResourceType': 'Route 53 Hosted Zone',
                'ResourceArn': f"arn:aws:route53:::hostedzone/{zone_id.split('/')[-1]}",
                'ResourceName': zone_id.split('/')[-1],
                'Region': region,
                'Tags': tags
            })
    except ClientError as e:
        print(f"Error fetching Route 53 Hosted Zones: {e}")

    # Fetch Cognito User Pools
    try:
        user_pools = fetch_cognito_user_pools(clients['cognito-idp'])
        for pool in user_pools:
            pool_id = pool['Id']
            pool_arn = f"arn:aws:cognito-idp:{region}:{account_number}:userpool/{pool_id}"
            tags = get_tags(clients['cognito-idp'], 'cognito-idp', pool_arn)
            resources.append({
                'ResourceType': 'Cognito User Pool',
                'ResourceArn': pool_arn,
                'ResourceName': pool_id,
                'Region': region,
                'Tags': tags
            })
    except ClientError as e:
        print(f"Error fetching Cognito User Pools: {e}")

    # Fetch Cognito Identity Pools
    try:
        identity_pools = fetch_cognito_identity_pools(clients['cognito-identity'])
        for pool in identity_pools:
            pool_id = pool['IdentityPoolId']
            pool_arn = f"arn:aws:cognito-identity:{region}:{account_number}:identitypool/{pool_id}"
            tags = get_tags(clients['cognito-identity'], 'cognito-identity', pool_arn)
            resources.append({
                'ResourceType': 'Cognito Identity Pool',
                'ResourceArn': pool_arn,
                'ResourceName': pool_id,
                'Region': region,
                'Tags': tags
            })
    except ClientError as e:
        print(f"Error fetching Cognito Identity Pools: {e}")

# Write results to a CSV file
with open('aws_resources_with_tags.csv', 'w', newline='') as csvfile:
    fieldnames = ['ResourceType', 'ResourceArn', 'ResourceName', 'Region', 'Tags']
    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)

    writer.writeheader()
    for resource in resources:
        resource['Tags'] = ', '.join([f"{key}={value}" for key, value in resource['Tags'].items()])
        writer.writerow(resource)

print("Resource information has been saved to 'aws_resources_with_tags.csv'.")
