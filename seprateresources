import boto3
import csv

region = 'us-east-1'  # Specify the region here

# Configure AWS clients with no SSL verification
ec2_client = boto3.client('ec2', region_name=region, verify=False)
rds_client = boto3.client('rds', region_name=region, verify=False)
lambda_client = boto3.client('lambda', region_name=region, verify=False)
elb_client = boto3.client('elb', region_name=region, verify=False)
elbv2_client = boto3.client('elbv2', region_name=region, verify=False)
ecs_client = boto3.client('ecs', region_name=region, verify=False)

sts_client = boto3.client('sts')
account_number = sts_client.get_caller_identity()['Account']

def paginate_boto3_results(client, method, key):
    results = []
    paginator = client.get_paginator(method)
    for page in paginator.paginate():
        results.extend(page.get(key, []))
    return results

def get_resource_tags(client, resource_arn, tag_key='Tags'):
    response = client.list_tags_for_resource(ResourceArn=resource_arn)
    return {tag['Key']: tag['Value'] for tag in response.get(tag_key, [])}

# Specify the 'fiserv' tag keys
fiserv_tag_keys = ['fiserv::apm', 'fiserv::app', 'fiserv::description', 'fiserv::owner', 'fiserv::group', 'fiserv::stage', 'fiserv::environment']

resources = []

# Fetch EC2 instances
ec2_instances = paginate_boto3_results(ec2_client, 'describe_instances', 'Reservations')
for reservation in ec2_instances:
    for instance in reservation['Instances']:
        tags = {tag['Key']: tag['Value'] for tag in instance.get('Tags', [])}
        resources.append({
            'ResourceType': 'EC2 Instance',
            'ResourceArn': f"arn:aws:ec2:{region}:{account_number}:instance/{instance['InstanceId']}",
            'ResourceName': tags.get('Name', 'N/A'),
            'Tags': tags
        })

# Fetch RDS DB instances
rds_instances = paginate_boto3_results(rds_client, 'describe_db_instances', 'DBInstances')
for instance in rds_instances:
    tags = get_resource_tags(rds_client, instance['DBInstanceArn'])
    resources.append({
        'ResourceType': 'RDS DB Instance',
        'ResourceArn': instance['DBInstanceArn'],
        'ResourceName': instance['DBInstanceIdentifier'],
        'Tags': tags
    })

# Fetch RDS DB clusters
rds_clusters = paginate_boto3_results(rds_client, 'describe_db_clusters', 'DBClusters')
for cluster in rds_clusters:
    tags = get_resource_tags(rds_client, cluster['DBClusterArn'])
    resources.append({
        'ResourceType': 'RDS DB Cluster',
        'ResourceArn': cluster['DBClusterArn'],
        'ResourceName': cluster['DBClusterIdentifier'],
        'Tags': tags
    })

# Fetch Lambda functions
lambda_functions = paginate_boto3_results(lambda_client, 'list_functions', 'Functions')
for function in lambda_functions:
    tags = get_resource_tags(lambda_client, function['FunctionArn'], tag_key='Tags')
    resources.append({
        'ResourceType': 'Lambda Function',
        'ResourceArn': function['FunctionArn'],
        'ResourceName': function['FunctionName'],
        'Tags': tags
    })

# Fetch Classic Load Balancers
elbs = paginate_boto3_results(elb_client, 'describe_load_balancers', 'LoadBalancerDescriptions')
for elb in elbs:
    tags = get_resource_tags(elb_client, f"arn:aws:elasticloadbalancing:{region}:{account_number}:loadbalancer/{elb['LoadBalancerName']}", tag_key='Tags')
    resources.append({
        'ResourceType': 'Classic Load Balancer',
        'ResourceArn': f"arn:aws:elasticloadbalancing:{region}:{account_number}:loadbalancer/{elb['LoadBalancerName']}",
        'ResourceName': elb['LoadBalancerName'],
        'Tags': tags
    })

# Fetch Application Load Balancers
albs = paginate_boto3_results(elbv2_client, 'describe_load_balancers', 'LoadBalancers')
for alb in albs:
    tags = get_resource_tags(elbv2_client, alb['LoadBalancerArn'], tag_key='Tags')
    resources.append({
        'ResourceType': 'Application Load Balancer',
        'ResourceArn': alb['LoadBalancerArn'],
        'ResourceName': alb['LoadBalancerName'],
        'Tags': tags
    })

# Fetch ECS clusters
ecs_clusters = paginate_boto3_results(ecs_client, 'list_clusters', 'clusterArns')
for cluster_arn in ecs_clusters:
    tag_response = ecs_client.list_tags_for_resource(resourceArn=cluster_arn)
    cluster_tags = tag_response.get('tags', [])
    fiserv_tags = {tag['key']: tag['value'] for tag in cluster_tags}
    resources.append({
        'ResourceType': 'ECS Cluster',
        'ResourceArn': cluster_arn,
        'ResourceName': cluster_arn.split('/')[-1],
        'Tags': fiserv_tags
    })

csv_headers = ['Resource Type', 'Resource ARN', 'Region', 'Resource Name', 'Account Number'] + fiserv_tag_keys

with open('all_resources.csv', 'w', newline='') as csvfile:
    writer = csv.writer(csvfile)
    writer.writerow(csv_headers)

    for resource in resources:
        resource_type = resource['ResourceType']
        resource_arn = resource['ResourceArn']
        resource_name = resource['ResourceName']
        tags = resource['Tags']
        fiserv_tags = [tags.get(tag, '') for tag in fiserv_tag_keys]

        row_data = [resource_type, resource_arn, region, resource_name, account_number] + fiserv_tags
        writer.writerow(row_data)








Traceback (most recent call last):
  File "H:\pychram\pulled\newtest\newscript.py", line 48, in <module>
    tags = get_resource_tags(rds_client, instance['DBInstanceArn'])
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "H:\pychram\pulled\newtest\newscript.py", line 25, in get_resource_tags
    response = client.list_tags_for_resource(ResourceArn=resource_arn)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\F37YHCS\AppData\Roaming\Python\Python311\site-packages\botocore\client.py", line 565, in _api_call
    return self._make_api_call(operation_name, kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\F37YHCS\AppData\Roaming\Python\Python311\site-packages\botocore\client.py", line 974, in _make_api_call
    request_dict = self._convert_to_request_dict(
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\F37YHCS\AppData\Roaming\Python\Python311\site-packages\botocore\client.py", line 1048, in _convert_to_request_dict
    request_dict = self._serializer.serialize_to_request(
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\F37YHCS\AppData\Roaming\Python\Python311\site-packages\botocore\validate.py", line 381, in serialize_to_request
    raise ParamValidationError(report=report.generate_report())
botocore.exceptions.ParamValidationError: Parameter validation failed:
Missing required parameter in input: "ResourceName"
Unknown parameter in input: "ResourceArn", must be one of: ResourceName, Filters
