import boto3
import csv

region = 'us-east-1'  # Specify the region here

# Configure AWS clients with no SSL verification
ec2_client = boto3.client('ec2', region_name=region, verify=False)
rds_client = boto3.client('rds', region_name=region, verify=False)
lambda_client = boto3.client('lambda', region_name=region, verify=False)
elb_client = boto3.client('elb', region_name=region, verify=False)
elbv2_client = boto3.client('elbv2', region_name=region, verify=False)
ecs_client = boto3.client('ecs', region_name=region, verify=False)
dynamodb_client = boto3.client('dynamodb', region_name=region, verify=False)
sns_client = boto3.client('sns', region_name=region, verify=False)
sqs_client = boto3.client('sqs', region_name=region, verify=False)
redshift_client = boto3.client('redshift', region_name=region, verify=False)
dms_client = boto3.client('dms', region_name=region, verify=False)
secretsmanager_client = boto3.client('secretsmanager', region_name=region, verify=False)
elasticache_client = boto3.client('elasticache', region_name=region, verify=False)
es_client = boto3.client('es', region_name=region, verify=False)
elasticbeanstalk_client = boto3.client('elasticbeanstalk', region_name=region, verify=False)
s3_client = boto3.client('s3', region_name=region, verify=False)

sts_client = boto3.client('sts')
account_number = sts_client.get_caller_identity()['Account']

def paginate_boto3_results(client, method, key):
    results = []
    paginator = client.get_paginator(method)
    for page in paginator.paginate():
        results.extend(page.get(key, []))
    return results

def get_ec2_tags(instance_id):
    response = ec2_client.describe_tags(
        Filters=[
            {'Name': 'resource-id', 'Values': [instance_id]}
        ]
    )
    return {tag['Key']: tag['Value'] for tag in response.get('Tags', [])}

def get_rds_tags(resource_arn):
    response = rds_client.list_tags_for_resource(ResourceName=resource_arn)
    return {tag['Key']: tag['Value'] for tag in response.get('TagList', [])}

def get_lambda_tags(function_arn):
    response = lambda_client.list_tags(Resource=function_arn)
    return response.get('Tags', {})

def get_elb_tags(load_balancer_name):
    response = elb_client.describe_tags(
        LoadBalancerNames=[load_balancer_name]
    )
    tags = {}
    if response['TagDescriptions']:
        for tag in response['TagDescriptions'][0]['Tags']:
            tags[tag['Key']] = tag['Value']
    return tags

def get_elbv2_tags(load_balancer_arn):
    response = elbv2_client.describe_tags(
        ResourceArns=[load_balancer_arn]
    )
    tags = {}
    if response['TagDescriptions']:
        for tag in response['TagDescriptions'][0]['Tags']:
            tags[tag['Key']] = tag['Value']
    return tags

def get_dynamodb_tags(table_arn):
    response = dynamodb_client.list_tags_of_resource(ResourceArn=table_arn)
    return {tag['Key']: tag['Value'] for tag in response.get('Tags', [])}

def get_sns_tags(topic_arn):
    response = sns_client.list_tags_for_resource(ResourceArn=topic_arn)
    return {tag['Key']: tag['Value'] for tag in response.get('Tags', [])}

def get_sqs_tags(queue_url):
    response = sqs_client.list_queue_tags(QueueUrl=queue_url)
    return response.get('Tags', {})

def get_redshift_tags(cluster_arn):
    response = redshift_client.describe_tags(ResourceName=cluster_arn)
    return {tag['Key']: tag['Value'] for tag in response.get('TaggedResources', [])}

def get_dms_tags(resource_arn):
    response = dms_client.list_tags_for_resource(ResourceArn=resource_arn)
    return {tag['Key']: tag['Value'] for tag in response.get('TagList', [])}

def get_secretsmanager_tags(secret_arn):
    response = secretsmanager_client.list_tags_for_resource(SecretId=secret_arn)
    return {tag['Key']: tag['Value'] for tag in response.get('Tags', [])}

def get_elasticache_tags(resource_arn):
    response = elasticache_client.list_tags_for_resource(ResourceName=resource_arn)
    return {tag['Key']: tag['Value'] for tag in response.get('TagList', [])}

def get_es_tags(domain_arn):
    response = es_client.list_tags(ARN=domain_arn)
    return {tag['Key']: tag['Value'] for tag in response.get('TagList', [])}

def get_ebs_tags(app_name):
    response = elasticbeanstalk_client.list_tags_for_resource(
        ResourceArn=f"arn:aws:elasticbeanstalk:{region}:{account_number}:application/{app_name}"
    )
    return {tag['Key']: tag['Value'] for tag in response.get('ResourceTags', [])}

def get_s3_tags(bucket_name):
    try:
        response = s3_client.get_bucket_tagging(Bucket=bucket_name)
        return {tag['Key']: tag['Value'] for tag in response.get('TagSet', [])}
    except s3_client.exceptions.NoSuchTagSet:
        return {}

# Specify the 'fiserv' tag keys
fiserv_tag_keys = ['fiserv::apm', 'fiserv::app', 'fiserv::description', 'fiserv::owner', 'fiserv::group', 'fiserv::stage', 'fiserv::environment']

resources = []

# Fetch EC2 instances
ec2_instances = paginate_boto3_results(ec2_client, 'describe_instances', 'Reservations')
for reservation in ec2_instances:
    for instance in reservation['Instances']:
        tags = get_ec2_tags(instance['InstanceId'])
        resources.append({
            'ResourceType': 'EC2 Instance',
            'ResourceArn': f"arn:aws:ec2:{region}:{account_number}:instance/{instance['InstanceId']}",
            'ResourceName': tags.get('Name', 'N/A'),
            'Tags': tags
        })

# Fetch RDS DB instances
rds_instances = paginate_boto3_results(rds_client, 'describe_db_instances', 'DBInstances')
for instance in rds_instances:
    tags = get_rds_tags(instance['DBInstanceArn'])
    resources.append({
        'ResourceType': 'RDS DB Instance',
        'ResourceArn': instance['DBInstanceArn'],
        'ResourceName': instance['DBInstanceIdentifier'],
        'Tags': tags
    })

# Fetch RDS DB clusters
rds_clusters = paginate_boto3_results(rds_client, 'describe_db_clusters', 'DBClusters')
for cluster in rds_clusters:
    tags = get_rds_tags(cluster['DBClusterArn'])
    resources.append({
        'ResourceType': 'RDS DB Cluster',
        'ResourceArn': cluster['DBClusterArn'],
        'ResourceName': cluster['DBClusterIdentifier'],
        'Tags': tags
    })

# Fetch Lambda functions
lambda_functions = paginate_boto3_results(lambda_client, 'list_functions', 'Functions')
for function in lambda_functions:
    tags = get_lambda_tags(function['FunctionArn'])
    resources.append({
        'ResourceType': 'Lambda Function',
        'ResourceArn': function['FunctionArn'],
        'ResourceName': function['FunctionName'],
        'Tags': tags
    })

# Fetch Classic Load Balancers
elbs = paginate_boto3_results(elb_client, 'describe_load_balancers', 'LoadBalancerDescriptions')
for elb in elbs:
    tags = get_elb_tags(elb['LoadBalancerName'])
    resources.append({
        'ResourceType': 'Classic Load Balancer',
        'ResourceArn': f"arn:aws:elasticloadbalancing:{region}:{account_number}:loadbalancer/{elb['LoadBalancerName']}",
        'ResourceName': elb['LoadBalancerName'],
        'Tags': tags
    })

# Fetch Application Load Balancers
albs = paginate_boto3_results(elbv2_client, 'describe_load_balancers', 'LoadBalancers')
for alb in albs:
    tags = get_elbv2_tags(alb['LoadBalancerArn'])
    resources.append({
        'ResourceType': 'Application Load Balancer',
        'ResourceArn': alb['LoadBalancerArn'],
        'ResourceName': alb['LoadBalancerName'],
        'Tags': tags
    })

# Fetch ECS clusters
ecs_clusters = paginate_boto3_results(ecs_client, 'list_clusters', 'clusterArns')
for cluster_arn in ecs_clusters:
    tag_response = ecs_client.list_tags_for_resource(resourceArn=cluster_arn)
    cluster_tags = tag_response.get('tags', [])
    fiserv_tags = {tag['key']: tag['value'] for tag in cluster_tags}
    resources.append({
        'ResourceType': 'ECS Cluster',
        'ResourceArn': cluster_arn,
        'ResourceName': cluster_arn.split('/')[-1],
        'Tags': fiserv_tags
    })

# Fetch DynamoDB tables
dynamodb_tables = paginate_boto3_results(dynamodb_client, 'list_tables', 'TableNames')
for table_name in dynamodb_tables:
    table_arn = f"arn:aws:dynamodb:{region}:{account_number}:table/{table_name}"
    tags = get_dynamodb_tags(table_arn)
    resources.append({
        'ResourceType': 'DynamoDB Table',
        'ResourceArn': table_arn,
        'ResourceName': table_name,
        'Tags': tags
    })

# Fetch SNS topics
sns_topics = paginate_boto3_results(sns_client, 'list_topics', 'Topics')
for topic in sns_topics:
    topic_arn = topic['TopicArn']
    tags = get_sns_tags(topic_arn)
    resources.append({
        'ResourceType': 'SNS Topic',
        'ResourceArn': topic_arn,
        'ResourceName': topic_arn.split(':')[-1],
        'Tags': tags
    })

# Fetch SQS queues
sqs_queues = paginate_boto3_results(sqs_client, 'list_queues', 'QueueUrls')
for queue_url in sqs_queues:
    tags = get_sqs_tags(queue_url)
    resources.append({
        'ResourceType': 'SQS Queue',
        'ResourceArn': queue_url,
        'ResourceName': queue_url.split('/')[-1],
        'Tags': tags
    })

# Fetch Redshift clusters
redshift_clusters = paginate_boto3_results(redshift_client, 'describe_clusters', 'Clusters')
for cluster in redshift_clusters:
    cluster_arn = cluster['ClusterNamespaceArn']
    tags = get_redshift_tags(cluster_arn)
    resources.append({
        'ResourceType': 'Redshift Cluster',
        'ResourceArn': cluster_arn,
        'ResourceName': cluster['ClusterIdentifier'],
        'Tags': tags
    })

# Fetch DMS replication tasks
dms_tasks = paginate_boto3_results(dms_client, 'describe_replication_tasks', 'ReplicationTasks')
for task in dms_tasks:
    task_arn = task['ReplicationTaskArn']
    tags = get_dms_tags(task_arn)
    resources.append({
        'ResourceType': 'DMS Replication Task',
        'ResourceArn': task_arn,
        'ResourceName': task['ReplicationTaskIdentifier'],
        'Tags': tags
    })

# Fetch SecretsManager secrets
secrets = paginate_boto3_results(secretsmanager_client, 'list_secrets', 'SecretList')
for secret in secrets:
    secret_arn = secret['ARN']
    tags = get_secretsmanager_tags(secret_arn)
    resources.append({
        'ResourceType': 'SecretsManager Secret',
        'ResourceArn': secret_arn,
        'ResourceName': secret['Name'],
        'Tags': tags
    })

# Fetch ElastiCache clusters
elasticache_clusters = paginate_boto3_results(elasticache_client, 'describe_cache_clusters', 'CacheClusters')
for cluster in elasticache_clusters:
    cluster_arn = f"arn:aws:elasticache:{region}:{account_number}:cluster:{cluster['CacheClusterId']}"
    tags = get_elasticache_tags(cluster_arn)
    resources.append({
        'ResourceType': 'ElastiCache Cluster',
        'ResourceArn': cluster_arn,
        'ResourceName': cluster['CacheClusterId'],
        'Tags': tags
    })

# Fetch Elasticsearch domains
es_domains = paginate_boto3_results(es_client, 'list_domain_names', 'DomainNames')
for domain in es_domains:
    domain_name = domain['DomainName']
    domain_arn = f"arn:aws:es:{region}:{account_number}:domain/{domain_name}"
    tags = get_es_tags(domain_arn)
    resources.append({
        'ResourceType': 'Elasticsearch Domain',
        'ResourceArn': domain_arn,
        'ResourceName': domain_name,
        'Tags': tags
    })

# Fetch Elastic Beanstalk applications
ebs_apps = paginate_boto3_results(elasticbeanstalk_client, 'describe_applications', 'Applications')
for app in ebs_apps:
    app_name = app['ApplicationName']
    tags = get_ebs_tags(app_name)
    resources.append({
        'ResourceType': 'Elastic Beanstalk Application',
        'ResourceArn': f"arn:aws:elasticbeanstalk:{region}:{account_number}:application/{app_name}",
        'ResourceName': app_name,
        'Tags': tags
    })

# Fetch S3 buckets
s3_buckets = paginate_boto3_results(s3_client, 'list_buckets', 'Buckets')
for bucket in s3_buckets:
    bucket_name = bucket['Name']
    tags = get_s3_tags(bucket_name)
    resources.append({
        'ResourceType': 'S3 Bucket',
        'ResourceArn': f"arn:aws:s3:::{bucket_name}",
        'ResourceName': bucket_name,
        'Tags': tags
    })

csv_headers = ['Resource Type', 'Resource ARN', 'Region', 'Resource Name', 'Account Number'] + fiserv_tag_keys

with open('all_resources.csv', 'w', newline='') as csvfile:
    writer = csv.writer(csvfile)
    writer.writerow(csv_headers)

    for resource in resources:
        resource_type = resource['ResourceType']
        resource_arn = resource['ResourceArn']
        resource_name = resource['ResourceName']
        tags = resource['Tags']
        fiserv_tags = [tags.get(tag, '') for tag in fiserv_tag_keys]

        row_data = [resource_type, resource_arn, region, resource_name, account_number] + fiserv_tags
        writer.writerow(row_data)

















import boto3
import csv

region = 'us-east-1'  # Specify the region here

# Configure AWS clients with no SSL verification
ec2_client = boto3.client('ec2', region_name=region, verify=False)
rds_client = boto3.client('rds', region_name=region, verify=False)
lambda_client = boto3.client('lambda', region_name=region, verify=False)
elb_client = boto3.client('elb', region_name=region, verify=False)
elbv2_client = boto3.client('elbv2', region_name=region, verify=False)
ecs_client = boto3.client('ecs', region_name=region, verify=False)
dynamodb_client = boto3.client('dynamodb', region_name=region, verify=False)
sns_client = boto3.client('sns', region_name=region, verify=False)
sqs_client = boto3.client('sqs', region_name=region, verify=False)
redshift_client = boto3.client('redshift', region_name=region, verify=False)
dms_client = boto3.client('dms', region_name=region, verify=False)
secretsmanager_client = boto3.client('secretsmanager', region_name=region, verify=False)
elasticache_client = boto3.client('elasticache', region_name=region, verify=False)
es_client = boto3.client('es', region_name=region, verify=False)
elasticbeanstalk_client = boto3.client('elasticbeanstalk', region_name=region, verify=False)
s3_client = boto3.client('s3', region_name=region, verify=False)

sts_client = boto3.client('sts')
account_number = sts_client.get_caller_identity()['Account']

def paginate_boto3_results(client, method, key):
    results = []
    paginator = client.get_paginator(method)
    for page in paginator.paginate():
        results.extend(page.get(key, []))
    return results

def get_ec2_tags(instance_id):
    response = ec2_client.describe_tags(
        Filters=[
            {'Name': 'resource-id', 'Values': [instance_id]}
        ]
    )
    return {tag['Key']: tag['Value'] for tag in response.get('Tags', [])}

def get_rds_tags(resource_arn):
    response = rds_client.list_tags_for_resource(ResourceName=resource_arn)
    return {tag['Key']: tag['Value'] for tag in response.get('TagList', [])}

def get_lambda_tags(function_arn):
    response = lambda_client.list_tags(Resource=function_arn)
    return response.get('Tags', {})

def get_elb_tags(load_balancer_name):
    response = elb_client.describe_tags(
        LoadBalancerNames=[load_balancer_name]
    )
    tags = {}
    if response['TagDescriptions']:
        for tag in response['TagDescriptions'][0]['Tags']:
            tags[tag['Key']] = tag['Value']
    return tags

def get_elbv2_tags(load_balancer_arn):
    response = elbv2_client.describe_tags(
        ResourceArns=[load_balancer_arn]
    )
    tags = {}
    if response['TagDescriptions']:
        for tag in response['TagDescriptions'][0]['Tags']:
            tags[tag['Key']] = tag['Value']
    return tags

def get_dynamodb_tags(table_arn):
    response = dynamodb_client.list_tags_of_resource(ResourceArn=table_arn)
    return {tag['Key']: tag['Value'] for tag in response.get('Tags', [])}

def get_sns_tags(topic_arn):
    response = sns_client.list_tags_for_resource(ResourceArn=topic_arn)
    return {tag['Key']: tag['Value'] for tag in response.get('Tags', [])}

def get_sqs_tags(queue_url):
    response = sqs_client.list_queue_tags(QueueUrl=queue_url)
    return response.get('Tags', {})

def get_redshift_tags(cluster_arn):
    response = redshift_client.describe_tags(ResourceName=cluster_arn)
    return {tag['Key']: tag['Value'] for tag in response.get('TaggedResources', [])}

def get_dms_tags(resource_arn):
    response = dms_client.list_tags_for_resource(ResourceArn=resource_arn)
    return {tag['Key']: tag['Value'] for tag in response.get('TagList', [])}

def get_secretsmanager_tags(secret_arn):
    response = secretsmanager_client.describe_secret(SecretId=secret_arn)
    return {tag['Key']: tag['Value'] for tag in response.get('Tags', [])}

def get_elasticache_tags(resource_arn):
    response = elasticache_client.list_tags_for_resource(ResourceName=resource_arn)
    return {tag['Key']: tag['Value'] for tag in response.get('TagList', [])}

def get_es_tags(domain_arn):
    response = es_client.list_tags(ARN=domain_arn)
    return {tag['Key']: tag['Value'] for tag in response.get('TagList', [])}

def get_ebs_tags(app_name):
    response = elasticbeanstalk_client.list_tags_for_resource(
        ResourceArn=f"arn:aws:elasticbeanstalk:{region}:{account_number}:application/{app_name}"
    )
    return {tag['Key']: tag['Value'] for tag in response.get('ResourceTags', [])}

def get_s3_tags(bucket_name):
    try:
        response = s3_client.get_bucket_tagging(Bucket=bucket_name)
        return {tag['Key']: tag['Value'] for tag in response.get('TagSet', [])}
    except s3_client.exceptions.NoSuchTagSet:
        return {}

# Specify the 'fiserv' tag keys
fiserv_tag_keys = ['fiserv::apm', 'fiserv::app', 'fiserv::description', 'fiserv::owner', 'fiserv::group', 'fiserv::stage', 'fiserv::environment']

resources = []

# Fetch EC2 instances
ec2_instances = paginate_boto3_results(ec2_client, 'describe_instances', 'Reservations')
for reservation in ec2_instances:
    for instance in reservation['Instances']:
        tags = get_ec2_tags(instance['InstanceId'])
        resources.append({
            'ResourceType': 'EC2 Instance',
            'ResourceArn': f"arn:aws:ec2:{region}:{account_number}:instance/{instance['InstanceId']}",
            'ResourceName': tags.get('Name', 'N/A'),
            'Tags': tags
        })

# Fetch RDS DB instances
rds_instances = paginate_boto3_results(rds_client, 'describe_db_instances', 'DBInstances')
for instance in rds_instances:
    tags = get_rds_tags(instance['DBInstanceArn'])
    resources.append({
        'ResourceType': 'RDS DB Instance',
        'ResourceArn': instance['DBInstanceArn'],
        'ResourceName': instance['DBInstanceIdentifier'],
        'Tags': tags
    })

# Fetch RDS DB clusters
rds_clusters = paginate_boto3_results(rds_client, 'describe_db_clusters', 'DBClusters')
for cluster in rds_clusters:
    tags = get_rds_tags(cluster['DBClusterArn'])
    resources.append({
        'ResourceType': 'RDS DB Cluster',
        'ResourceArn': cluster['DBClusterArn'],
        'ResourceName': cluster['DBClusterIdentifier'],
        'Tags': tags
    })

# Fetch Lambda functions
lambda_functions = paginate_boto3_results(lambda_client, 'list_functions', 'Functions')
for function in lambda_functions:
    tags = get_lambda_tags(function['FunctionArn'])
    resources.append({
        'ResourceType': 'Lambda Function',
        'ResourceArn': function['FunctionArn'],
        'ResourceName': function['FunctionName'],
        'Tags': tags
    })

# Fetch Classic Load Balancers
elbs = paginate_boto3_results(elb_client, 'describe_load_balancers', 'LoadBalancerDescriptions')
for elb in elbs:
    tags = get_elb_tags(elb['LoadBalancerName'])
    resources.append({
        'ResourceType': 'Classic Load Balancer',
        'ResourceArn': f"arn:aws:elasticloadbalancing:{region}:{account_number}:loadbalancer/{elb['LoadBalancerName']}",
        'ResourceName': elb['LoadBalancerName'],
        'Tags': tags
    })

# Fetch Application Load Balancers
albs = paginate_boto3_results(elbv2_client, 'describe_load_balancers', 'LoadBalancers')
for alb in albs:
    tags = get_elbv2_tags(alb['LoadBalancerArn'])
    resources.append({
        'ResourceType': 'Application Load Balancer',
        'ResourceArn': alb['LoadBalancerArn'],
        'ResourceName': alb['LoadBalancerName'],
        'Tags': tags
    })

# Fetch ECS clusters
ecs_clusters = paginate_boto3_results(ecs_client, 'list_clusters', 'clusterArns')
for cluster_arn in ecs_clusters:
    tag_response = ecs_client.list_tags_for_resource(resourceArn=cluster_arn)
    cluster_tags = tag_response.get('tags', [])
    fiserv_tags = {tag['key']: tag['value'] for tag in cluster_tags}
    resources.append({
        'ResourceType': 'ECS Cluster',
        'ResourceArn': cluster_arn,
        'ResourceName': cluster_arn.split('/')[-1],
        'Tags': fiserv_tags
    })

# Fetch DynamoDB tables
dynamodb_tables = paginate_boto3_results(dynamodb_client, 'list_tables', 'TableNames')
for table_name in dynamodb_tables:
    table_arn = f"arn:aws:dynamodb:{region}:{account_number}:table/{table_name}"
    tags = get_dynamodb_tags(table_arn)
    resources.append({
        'ResourceType': 'DynamoDB Table',
        'ResourceArn': table_arn,
        'ResourceName': table_name,
        'Tags': tags
    })

# Fetch SNS topics
sns_topics = paginate_boto3_results(sns_client, 'list_topics', 'Topics')
for topic in sns_topics:
    topic_arn = topic['TopicArn']
    tags = get_sns_tags(topic_arn)
    resources.append({
        'ResourceType': 'SNS Topic',
        'ResourceArn': topic_arn,
        'ResourceName': topic_arn.split(':')[-1],
        'Tags': tags
    })

# Fetch SQS queues
sqs_queues = paginate_boto3_results(sqs_client, 'list_queues', 'QueueUrls')
for queue_url in sqs_queues:
    tags = get_sqs_tags(queue_url)
    resources.append({
        'ResourceType': 'SQS Queue',
        'ResourceArn': queue_url,
        'ResourceName': queue_url.split('/')[-1],
        'Tags': tags
    })

# Fetch Redshift clusters
redshift_clusters = paginate_boto3_results(redshift_client, 'describe_clusters', 'Clusters')
for cluster in redshift_clusters:
    cluster_arn = cluster['ClusterNamespaceArn']
    tags = get_redshift_tags(cluster_arn)
    resources.append({
        'ResourceType': 'Redshift Cluster',
        'ResourceArn': cluster_arn,
        'ResourceName': cluster['ClusterIdentifier'],
        'Tags': tags
    })

# Fetch DMS replication tasks
dms_tasks = paginate_boto3_results(dms_client, 'describe_replication_tasks', 'ReplicationTasks')
for task in dms_tasks:
    task_arn = task['ReplicationTaskArn']
    tags = get_dms_tags(task_arn)
    resources.append({
        'ResourceType': 'DMS Replication Task',
        'ResourceArn': task_arn,
        'ResourceName': task['ReplicationTaskIdentifier'],
        'Tags': tags
    })

# Fetch SecretsManager secrets
secrets = paginate_boto3_results(secretsmanager_client, 'list_secrets', 'SecretList')
for secret in secrets:
    secret_arn = secret['ARN']
    tags = get_secretsmanager_tags(secret_arn)
    resources.append({
        'ResourceType': 'SecretsManager Secret',
        'ResourceArn': secret_arn,
        'ResourceName': secret['Name'],
        'Tags': tags
    })

# Fetch ElastiCache clusters
elasticache_clusters = paginate_boto3_results(elasticache_client, 'describe_cache_clusters', 'CacheClusters')
for cluster in elasticache_clusters:
    cluster_arn = f"arn:aws:elasticache:{region}:{account_number}:cluster:{cluster['CacheClusterId']}"
    tags = get_elasticache_tags(cluster_arn)
    resources.append({
        'ResourceType': 'ElastiCache Cluster',
        'ResourceArn': cluster_arn,
        'ResourceName': cluster['CacheClusterId'],
        'Tags': tags
    })

# Fetch Elasticsearch domains
es_domains = paginate_boto3_results(es_client, 'list_domain_names', 'DomainNames')
for domain in es_domains:
    domain_name = domain['DomainName']
    domain_arn = f"arn:aws:es:{region}:{account_number}:domain/{domain_name}"
    tags = get_es_tags(domain_arn)
    resources.append({
        'ResourceType': 'Elasticsearch Domain',
        'ResourceArn': domain_arn,
        'ResourceName': domain_name,
        'Tags': tags
    })

# Fetch Elastic Beanstalk applications
ebs_apps = paginate_boto3_results(elasticbeanstalk_client, 'describe_applications', 'Applications')
for app in ebs_apps:
    app_name = app['ApplicationName']
    tags = get_ebs_tags(app_name)
    resources.append({
        'ResourceType': 'Elastic Beanstalk Application',
        'ResourceArn': f"arn:aws:elasticbeanstalk:{region}:{account_number}:application/{app_name}",
        'ResourceName': app_name,
        'Tags': tags
    })

# Fetch S3 buckets
s3_buckets = paginate_boto3_results(s3_client, 'list_buckets', 'Buckets')
for bucket in s3_buckets:
    bucket_name = bucket['Name']
    tags = get_s3_tags(bucket_name)
    resources.append({
        'ResourceType': 'S3 Bucket',
        'ResourceArn': f"arn:aws:s3:::{bucket_name}",
        'ResourceName': bucket_name,
        'Tags': tags
    })

csv_headers = ['Resource Type', 'Resource ARN', 'Region', 'Resource Name', 'Account Number'] + fiserv_tag_keys

with open('all_resources.csv', 'w', newline='') as csvfile:
    writer = csv.writer(csvfile)
    writer.writerow(csv_headers)

    for resource in resources:
        resource_type = resource['ResourceType']
        resource_arn = resource['ResourceArn']
        resource_name = resource['ResourceName']
        tags = resource['Tags']
        fiserv_tags = [tags.get(tag, '') for tag in fiserv_tag_keys]

        row_data = [resource_type, resource_arn, region, resource_name, account_number] + fiserv_tags
        writer.writerow(row_data)






Traceback (most recent call last):
  File "H:\pychram\pulled\newtest\newscriptbackup.py", line 284, in <module>
    es_domains = paginate_boto3_results(es_client, 'list_domain_names', 'DomainNames')
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "H:\pychram\pulled\newtest\newscriptbackup.py", line 29, in paginate_boto3_results
    paginator = client.get_paginator(method)
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\F37YHCS\AppData\Roaming\Python\Python311\site-packages\botocore\client.py", line 1164, in get_paginator
    raise OperationNotPageableError(operation_name=operation_name)
botocore.exceptions.OperationNotPageableError: Operation cannot be paginated: list_domain_names














import boto3
import csv

region = 'us-east-1'  # Specify the region here

# Configure AWS clients with no SSL verification
ec2_client = boto3.client('ec2', region_name=region, verify=False)
rds_client = boto3.client('rds', region_name=region, verify=False)
lambda_client = boto3.client('lambda', region_name=region, verify=False)
elb_client = boto3.client('elb', region_name=region, verify=False)
elbv2_client = boto3.client('elbv2', region_name=region, verify=False)
ecs_client = boto3.client('ecs', region_name=region, verify=False)
dynamodb_client = boto3.client('dynamodb', region_name=region, verify=False)
sns_client = boto3.client('sns', region_name=region, verify=False)
sqs_client = boto3.client('sqs', region_name=region, verify=False)
redshift_client = boto3.client('redshift', region_name=region, verify=False)
dms_client = boto3.client('dms', region_name=region, verify=False)
secretsmanager_client = boto3.client('secretsmanager', region_name=region, verify=False)
elasticache_client = boto3.client('elasticache', region_name=region, verify=False)
es_client = boto3.client('es', region_name=region, verify=False)
elasticbeanstalk_client = boto3.client('elasticbeanstalk', region_name=region, verify=False)
s3_client = boto3.client('s3', region_name=region, verify=False)

sts_client = boto3.client('sts')
account_number = sts_client.get_caller_identity()['Account']

def paginate_boto3_results(client, method, key):
    results = []
    paginator = client.get_paginator(method)
    for page in paginator.paginate():
        results.extend(page.get(key, []))
    return results

def get_ec2_tags(instance_id):
    response = ec2_client.describe_tags(
        Filters=[
            {'Name': 'resource-id', 'Values': [instance_id]}
        ]
    )
    return {tag['Key']: tag['Value'] for tag in response.get('Tags', [])}

def get_rds_tags(resource_arn):
    response = rds_client.list_tags_for_resource(ResourceName=resource_arn)
    return {tag['Key']: tag['Value'] for tag in response.get('TagList', [])}

def get_lambda_tags(function_arn):
    response = lambda_client.list_tags(Resource=function_arn)
    return response.get('Tags', {})

def get_elb_tags(load_balancer_name):
    response = elb_client.describe_tags(
        LoadBalancerNames=[load_balancer_name]
    )
    tags = {}
    if response['TagDescriptions']:
        for tag in response['TagDescriptions'][0]['Tags']:
            tags[tag['Key']] = tag['Value']
    return tags

def get_elbv2_tags(load_balancer_arn):
    response = elbv2_client.describe_tags(
        ResourceArns=[load_balancer_arn]
    )
    tags = {}
    if response['TagDescriptions']:
        for tag in response['TagDescriptions'][0]['Tags']:
            tags[tag['Key']] = tag['Value']
    return tags

def get_dynamodb_tags(table_arn):
    response = dynamodb_client.list_tags_of_resource(ResourceArn=table_arn)
    return {tag['Key']: tag['Value'] for tag in response.get('Tags', [])}

def get_sns_tags(topic_arn):
    response = sns_client.list_tags_for_resource(ResourceArn=topic_arn)
    return {tag['Key']: tag['Value'] for tag in response.get('Tags', [])}

def get_sqs_tags(queue_url):
    response = sqs_client.list_queue_tags(QueueUrl=queue_url)
    return response.get('Tags', {})

def get_redshift_tags(cluster_arn):
    response = redshift_client.describe_tags(ResourceName=cluster_arn)
    return {tag['Key']: tag['Value'] for tag in response.get('TaggedResources', [])}

def get_dms_tags(resource_arn):
    response = dms_client.list_tags_for_resource(ResourceArn=resource_arn)
    return {tag['Key']: tag['Value'] for tag in response.get('TagList', [])}

def get_secretsmanager_tags(secret_arn):
    response = secretsmanager_client.describe_secret(SecretId=secret_arn)
    return {tag['Key']: tag['Value'] for tag in response.get('Tags', [])}

def get_elasticache_tags(resource_arn):
    response = elasticache_client.list_tags_for_resource(ResourceName=resource_arn)
    return {tag['Key']: tag['Value'] for tag in response.get('TagList', [])}

def get_es_tags(domain_arn):
    response = es_client.list_tags(ARN=domain_arn)
    return {tag['Key']: tag['Value'] for tag in response.get('TagList', [])}

def get_ebs_tags(app_name):
    response = elasticbeanstalk_client.list_tags_for_resource(
        ResourceArn=f"arn:aws:elasticbeanstalk:{region}:{account_number}:application/{app_name}"
    )
    return {tag['Key']: tag['Value'] for tag in response.get('ResourceTags', [])}

def get_s3_tags(bucket_name):
    try:
        response = s3_client.get_bucket_tagging(Bucket=bucket_name)
        return {tag['Key']: tag['Value'] for tag in response.get('TagSet', [])}
    except s3_client.exceptions.NoSuchTagSet:
        return {}

# Specify the 'fiserv' tag keys
fiserv_tag_keys = ['fiserv::apm', 'fiserv::app', 'fiserv::description', 'fiserv::owner', 'fiserv::group', 'fiserv::stage', 'fiserv::environment']

resources = []

# Fetch EC2 instances
ec2_instances = paginate_boto3_results(ec2_client, 'describe_instances', 'Reservations')
for reservation in ec2_instances:
    for instance in reservation['Instances']:
        tags = get_ec2_tags(instance['InstanceId'])
        resources.append({
            'ResourceType': 'EC2 Instance',
            'ResourceArn': f"arn:aws:ec2:{region}:{account_number}:instance/{instance['InstanceId']}",
            'ResourceName': tags.get('Name', 'N/A'),
            'Tags': tags
        })

# Fetch RDS DB instances
rds_instances = paginate_boto3_results(rds_client, 'describe_db_instances', 'DBInstances')
for instance in rds_instances:
    tags = get_rds_tags(instance['DBInstanceArn'])
    resources.append({
        'ResourceType': 'RDS DB Instance',
        'ResourceArn': instance['DBInstanceArn'],
        'ResourceName': instance['DBInstanceIdentifier'],
        'Tags': tags
    })

# Fetch RDS DB clusters
rds_clusters = paginate_boto3_results(rds_client, 'describe_db_clusters', 'DBClusters')
for cluster in rds_clusters:
    tags = get_rds_tags(cluster['DBClusterArn'])
    resources.append({
        'ResourceType': 'RDS DB Cluster',
        'ResourceArn': cluster['DBClusterArn'],
        'ResourceName': cluster['DBClusterIdentifier'],
        'Tags': tags
    })

# Fetch Lambda functions
lambda_functions = paginate_boto3_results(lambda_client, 'list_functions', 'Functions')
for function in lambda_functions:
    tags = get_lambda_tags(function['FunctionArn'])
    resources.append({
        'ResourceType': 'Lambda Function',
        'ResourceArn': function['FunctionArn'],
        'ResourceName': function['FunctionName'],
        'Tags': tags
    })

# Fetch Classic Load Balancers
elbs = paginate_boto3_results(elb_client, 'describe_load_balancers', 'LoadBalancerDescriptions')
for elb in elbs:
    tags = get_elb_tags(elb['LoadBalancerName'])
    resources.append({
        'ResourceType': 'Classic Load Balancer',
        'ResourceArn': f"arn:aws:elasticloadbalancing:{region}:{account_number}:loadbalancer/{elb['LoadBalancerName']}",
        'ResourceName': elb['LoadBalancerName'],
        'Tags': tags
    })

# Fetch Application Load Balancers
albs = paginate_boto3_results(elbv2_client, 'describe_load_balancers', 'LoadBalancers')
for alb in albs:
    tags = get_elbv2_tags(alb['LoadBalancerArn'])
    resources.append({
        'ResourceType': 'Application Load Balancer',
        'ResourceArn': alb['LoadBalancerArn'],
        'ResourceName': alb['LoadBalancerName'],
        'Tags': tags
    })

# Fetch ECS clusters
ecs_clusters = paginate_boto3_results(ecs_client, 'list_clusters', 'clusterArns')
for cluster_arn in ecs_clusters:
    tag_response = ecs_client.list_tags_for_resource(resourceArn=cluster_arn)
    cluster_tags = tag_response.get('tags', [])
    fiserv_tags = {tag['key']: tag['value'] for tag in cluster_tags}
    resources.append({
        'ResourceType': 'ECS Cluster',
        'ResourceArn': cluster_arn,
        'ResourceName': cluster_arn.split('/')[-1],
        'Tags': fiserv_tags
    })

# Fetch DynamoDB tables
dynamodb_tables = paginate_boto3_results(dynamodb_client, 'list_tables', 'TableNames')
for table_name in dynamodb_tables:
    table_arn = f"arn:aws:dynamodb:{region}:{account_number}:table/{table_name}"
    tags = get_dynamodb_tags(table_arn)
    resources.append({
        'ResourceType': 'DynamoDB Table',
        'ResourceArn': table_arn,
        'ResourceName': table_name,
        'Tags': tags
    })

# Fetch SNS topics
sns_topics = paginate_boto3_results(sns_client, 'list_topics', 'Topics')
for topic in sns_topics:
    topic_arn = topic['TopicArn']
    tags = get_sns_tags(topic_arn)
    resources.append({
        'ResourceType': 'SNS Topic',
        'ResourceArn': topic_arn,
        'ResourceName': topic_arn.split(':')[-1],
        'Tags': tags
    })

# Fetch SQS queues
sqs_queues = paginate_boto3_results(sqs_client, 'list_queues', 'QueueUrls')
for queue_url in sqs_queues:
    tags = get_sqs_tags(queue_url)
    resources.append({
        'ResourceType': 'SQS Queue',
        'ResourceArn': queue_url,
        'ResourceName': queue_url.split('/')[-1],
        'Tags': tags
    })

# Fetch Redshift clusters
redshift_clusters = paginate_boto3_results(redshift_client, 'describe_clusters', 'Clusters')
for cluster in redshift_clusters:
    cluster_arn = cluster['ClusterNamespaceArn']
    tags = get_redshift_tags(cluster_arn)
    resources.append({
        'ResourceType': 'Redshift Cluster',
        'ResourceArn': cluster_arn,
        'ResourceName': cluster['ClusterIdentifier'],
        'Tags': tags
    })

# Fetch DMS replication tasks
dms_tasks = paginate_boto3_results(dms_client, 'describe_replication_tasks', 'ReplicationTasks')
for task in dms_tasks:
    task_arn = task['ReplicationTaskArn']
    tags = get_dms_tags(task_arn)
    resources.append({
        'ResourceType': 'DMS Replication Task',
        'ResourceArn': task_arn,
        'ResourceName': task['ReplicationTaskIdentifier'],
        'Tags': tags
    })

# Fetch SecretsManager secrets
secrets = paginate_boto3_results(secretsmanager_client, 'list_secrets', 'SecretList')
for secret in secrets:
    secret_arn = secret['ARN']
    tags = get_secretsmanager_tags(secret_arn)
    resources.append({
        'ResourceType': 'SecretsManager Secret',
        'ResourceArn': secret_arn,
        'ResourceName': secret['Name'],
        'Tags': tags
    })

# Fetch ElastiCache clusters
elasticache_clusters = paginate_boto3_results(elasticache_client, 'describe_cache_clusters', 'CacheClusters')
for cluster in elasticache_clusters:
    cluster_arn = f"arn:aws:elasticache:{region}:{account_number}:cluster:{cluster['CacheClusterId']}"
    tags = get_elasticache_tags(cluster_arn)
    resources.append({
        'ResourceType': 'ElastiCache Cluster',
        'ResourceArn': cluster_arn,
        'ResourceName': cluster['CacheClusterId'],
        'Tags': tags
    })

# Fetch Elasticsearch domains
es_domains = es_client.list_domain_names().get('DomainNames', [])
for domain in es_domains:
    domain_name = domain['DomainName']
    domain_arn = f"arn:aws:es:{region}:{account_number}:domain/{domain_name}"
    tags = get_es_tags(domain_arn)
    resources.append({
        'ResourceType': 'Elasticsearch Domain',
        'ResourceArn': domain_arn,
        'ResourceName': domain_name,
        'Tags': tags
    })

# Fetch Elastic Beanstalk applications
ebs_apps = paginate_boto3_results(elasticbeanstalk_client, 'describe_applications', 'Applications')
for app in ebs_apps:
    app_name = app['ApplicationName']
    tags = get_ebs_tags(app_name)
    resources.append({
        'ResourceType': 'Elastic Beanstalk Application',
        'ResourceArn': f"arn:aws:elasticbeanstalk:{region}:{account_number}:application/{app_name}",
        'ResourceName': app_name,
        'Tags': tags
    })

# Fetch S3 buckets
s3_buckets = paginate_boto3_results(s3_client, 'list_buckets', 'Buckets')
for bucket in s3_buckets:
    bucket_name = bucket['Name']
    tags = get_s3_tags(bucket_name)
    resources.append({
        'ResourceType': 'S3 Bucket',
        'ResourceArn': f"arn:aws:s3:::{bucket_name}",
        'ResourceName': bucket_name,
        'Tags': tags
    })

csv_headers = ['Resource Type', 'Resource ARN', 'Region', 'Resource Name', 'Account Number'] + fiserv_tag_keys

with open('all_resources.csv', 'w', newline='') as csvfile:
    writer = csv.writer(csvfile)
    writer.writerow(csv_headers)

    for resource in resources:
        resource_type = resource['ResourceType']
        resource_arn = resource['ResourceArn']
        resource_name = resource['ResourceName']
        tags = resource['Tags']
        fiserv_tags = [tags.get(tag, '') for tag in fiserv_tag_keys]

        row_data = [resource_type, resource_arn, region, resource_name, account_number] + fiserv_tags
        writer.writerow(row_data)








Traceback (most recent call last):
  File "H:\pychram\pulled\newtest\newscriptbackup.py", line 297, in <module>
    ebs_apps = paginate_boto3_results(elasticbeanstalk_client, 'describe_applications', 'Applications')
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "H:\pychram\pulled\newtest\newscriptbackup.py", line 29, in paginate_boto3_results
    paginator = client.get_paginator(method)
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\F37YHCS\AppData\Roaming\Python\Python311\site-packages\botocore\client.py", line 1164, in get_paginator
    raise OperationNotPageableError(operation_name=operation_name)
botocore.exceptions.OperationNotPageableError: Operation cannot be paginated: describe_applications

















import boto3
import csv

region = 'us-east-1'  # Specify the region here

# Configure AWS clients with no SSL verification
ec2_client = boto3.client('ec2', region_name=region, verify=False)
rds_client = boto3.client('rds', region_name=region, verify=False)
lambda_client = boto3.client('lambda', region_name=region, verify=False)
elb_client = boto3.client('elb', region_name=region, verify=False)
elbv2_client = boto3.client('elbv2', region_name=region, verify=False)
ecs_client = boto3.client('ecs', region_name=region, verify=False)
dynamodb_client = boto3.client('dynamodb', region_name=region, verify=False)
sns_client = boto3.client('sns', region_name=region, verify=False)
sqs_client = boto3.client('sqs', region_name=region, verify=False)
redshift_client = boto3.client('redshift', region_name=region, verify=False)
dms_client = boto3.client('dms', region_name=region, verify=False)
secretsmanager_client = boto3.client('secretsmanager', region_name=region, verify=False)
elasticache_client = boto3.client('elasticache', region_name=region, verify=False)
es_client = boto3.client('es', region_name=region, verify=False)
elasticbeanstalk_client = boto3.client('elasticbeanstalk', region_name=region, verify=False)
s3_client = boto3.client('s3', region_name=region, verify=False)

sts_client = boto3.client('sts')
account_number = sts_client.get_caller_identity()['Account']

def paginate_boto3_results(client, method, key):
    results = []
    paginator = client.get_paginator(method)
    for page in paginator.paginate():
        results.extend(page.get(key, []))
    return results

def get_ec2_tags(instance_id):
    response = ec2_client.describe_tags(
        Filters=[
            {'Name': 'resource-id', 'Values': [instance_id]}
        ]
    )
    return {tag['Key']: tag['Value'] for tag in response.get('Tags', [])}

def get_rds_tags(resource_arn):
    response = rds_client.list_tags_for_resource(ResourceName=resource_arn)
    return {tag['Key']: tag['Value'] for tag in response.get('TagList', [])}

def get_lambda_tags(function_arn):
    response = lambda_client.list_tags(Resource=function_arn)
    return response.get('Tags', {})

def get_elb_tags(load_balancer_name):
    response = elb_client.describe_tags(
        LoadBalancerNames=[load_balancer_name]
    )
    tags = {}
    if response['TagDescriptions']:
        for tag in response['TagDescriptions'][0]['Tags']:
            tags[tag['Key']] = tag['Value']
    return tags

def get_elbv2_tags(load_balancer_arn):
    response = elbv2_client.describe_tags(
        ResourceArns=[load_balancer_arn]
    )
    tags = {}
    if response['TagDescriptions']:
        for tag in response['TagDescriptions'][0]['Tags']:
            tags[tag['Key']] = tag['Value']
    return tags

def get_dynamodb_tags(table_arn):
    response = dynamodb_client.list_tags_of_resource(ResourceArn=table_arn)
    return {tag['Key']: tag['Value'] for tag in response.get('Tags', [])}

def get_sns_tags(topic_arn):
    response = sns_client.list_tags_for_resource(ResourceArn=topic_arn)
    return {tag['Key']: tag['Value'] for tag in response.get('Tags', [])}

def get_sqs_tags(queue_url):
    response = sqs_client.list_queue_tags(QueueUrl=queue_url)
    return response.get('Tags', {})

def get_redshift_tags(cluster_arn):
    response = redshift_client.describe_tags(ResourceName=cluster_arn)
    return {tag['Key']: tag['Value'] for tag in response.get('TaggedResources', [])}

def get_dms_tags(resource_arn):
    response = dms_client.list_tags_for_resource(ResourceArn=resource_arn)
    return {tag['Key']: tag['Value'] for tag in response.get('TagList', [])}

def get_secretsmanager_tags(secret_arn):
    response = secretsmanager_client.describe_secret(SecretId=secret_arn)
    return {tag['Key']: tag['Value'] for tag in response.get('Tags', [])}

def get_elasticache_tags(resource_arn):
    response = elasticache_client.list_tags_for_resource(ResourceName=resource_arn)
    return {tag['Key']: tag['Value'] for tag in response.get('TagList', [])}

def get_es_tags(domain_arn):
    response = es_client.list_tags(ARN=domain_arn)
    return {tag['Key']: tag['Value'] for tag in response.get('TagList', [])}

def get_ebs_tags(app_name):
    response = elasticbeanstalk_client.list_tags_for_resource(
        ResourceArn=f"arn:aws:elasticbeanstalk:{region}:{account_number}:application/{app_name}"
    )
    return {tag['Key']: tag['Value'] for tag in response.get('ResourceTags', [])}

def get_s3_tags(bucket_name):
    try:
        response = s3_client.get_bucket_tagging(Bucket=bucket_name)
        return {tag['Key']: tag['Value'] for tag in response.get('TagSet', [])}
    except s3_client.exceptions.NoSuchTagSet:
        return {}

# Specify the 'fiserv' tag keys
fiserv_tag_keys = ['fiserv::apm', 'fiserv::app', 'fiserv::description', 'fiserv::owner', 'fiserv::group', 'fiserv::stage', 'fiserv::environment']

resources = []

# Fetch EC2 instances
ec2_instances = paginate_boto3_results(ec2_client, 'describe_instances', 'Reservations')
for reservation in ec2_instances:
    for instance in reservation['Instances']:
        tags = get_ec2_tags(instance['InstanceId'])
        resources.append({
            'ResourceType': 'EC2 Instance',
            'ResourceArn': f"arn:aws:ec2:{region}:{account_number}:instance/{instance['InstanceId']}",
            'ResourceName': tags.get('Name', 'N/A'),
            'Tags': tags
        })

# Fetch RDS DB instances
rds_instances = paginate_boto3_results(rds_client, 'describe_db_instances', 'DBInstances')
for instance in rds_instances:
    tags = get_rds_tags(instance['DBInstanceArn'])
    resources.append({
        'ResourceType': 'RDS DB Instance',
        'ResourceArn': instance['DBInstanceArn'],
        'ResourceName': instance['DBInstanceIdentifier'],
        'Tags': tags
    })

# Fetch RDS DB clusters
rds_clusters = paginate_boto3_results(rds_client, 'describe_db_clusters', 'DBClusters')
for cluster in rds_clusters:
    tags = get_rds_tags(cluster['DBClusterArn'])
    resources.append({
        'ResourceType': 'RDS DB Cluster',
        'ResourceArn': cluster['DBClusterArn'],
        'ResourceName': cluster['DBClusterIdentifier'],
        'Tags': tags
    })

# Fetch Lambda functions
lambda_functions = paginate_boto3_results(lambda_client, 'list_functions', 'Functions')
for function in lambda_functions:
    tags = get_lambda_tags(function['FunctionArn'])
    resources.append({
        'ResourceType': 'Lambda Function',
        'ResourceArn': function['FunctionArn'],
        'ResourceName': function['FunctionName'],
        'Tags': tags
    })

# Fetch Classic Load Balancers
elbs = paginate_boto3_results(elb_client, 'describe_load_balancers', 'LoadBalancerDescriptions')
for elb in elbs:
    tags = get_elb_tags(elb['LoadBalancerName'])
    resources.append({
        'ResourceType': 'Classic Load Balancer',
        'ResourceArn': f"arn:aws:elasticloadbalancing:{region}:{account_number}:loadbalancer/{elb['LoadBalancerName']}",
        'ResourceName': elb['LoadBalancerName'],
        'Tags': tags
    })

# Fetch Application Load Balancers
albs = paginate_boto3_results(elbv2_client, 'describe_load_balancers', 'LoadBalancers')
for alb in albs:
    tags = get_elbv2_tags(alb['LoadBalancerArn'])
    resources.append({
        'ResourceType': 'Application Load Balancer',
        'ResourceArn': alb['LoadBalancerArn'],
        'ResourceName': alb['LoadBalancerName'],
        'Tags': tags
    })

# Fetch ECS clusters
ecs_clusters = paginate_boto3_results(ecs_client, 'list_clusters', 'clusterArns')
for cluster_arn in ecs_clusters:
    tag_response = ecs_client.list_tags_for_resource(resourceArn=cluster_arn)
    cluster_tags = tag_response.get('tags', [])
    fiserv_tags = {tag['key']: tag['value'] for tag in cluster_tags}
    resources.append({
        'ResourceType': 'ECS Cluster',
        'ResourceArn': cluster_arn,
        'ResourceName': cluster_arn.split('/')[-1],
        'Tags': fiserv_tags
    })

# Fetch DynamoDB tables
dynamodb_tables = paginate_boto3_results(dynamodb_client, 'list_tables', 'TableNames')
for table_name in dynamodb_tables:
    table_arn = f"arn:aws:dynamodb:{region}:{account_number}:table/{table_name}"
    tags = get_dynamodb_tags(table_arn)
    resources.append({
        'ResourceType': 'DynamoDB Table',
        'ResourceArn': table_arn,
        'ResourceName': table_name,
        'Tags': tags
    })

# Fetch SNS topics
sns_topics = paginate_boto3_results(sns_client, 'list_topics', 'Topics')
for topic in sns_topics:
    topic_arn = topic['TopicArn']
    tags = get_sns_tags(topic_arn)
    resources.append({
        'ResourceType': 'SNS Topic',
        'ResourceArn': topic_arn,
        'ResourceName': topic_arn.split(':')[-1],
        'Tags': tags
    })

# Fetch SQS queues
sqs_queues = paginate_boto3_results(sqs_client, 'list_queues', 'QueueUrls')
for queue_url in sqs_queues:
    tags = get_sqs_tags(queue_url)
    resources.append({
        'ResourceType': 'SQS Queue',
        'ResourceArn': queue_url,
        'ResourceName': queue_url.split('/')[-1],
        'Tags': tags
    })

# Fetch Redshift clusters
redshift_clusters = paginate_boto3_results(redshift_client, 'describe_clusters', 'Clusters')
for cluster in redshift_clusters:
    cluster_arn = cluster['ClusterNamespaceArn']
    tags = get_redshift_tags(cluster_arn)
    resources.append({
        'ResourceType': 'Redshift Cluster',
        'ResourceArn': cluster_arn,
        'ResourceName': cluster['ClusterIdentifier'],
        'Tags': tags
    })

# Fetch DMS replication tasks
dms_tasks = paginate_boto3_results(dms_client, 'describe_replication_tasks', 'ReplicationTasks')
for task in dms_tasks:
    task_arn = task['ReplicationTaskArn']
    tags = get_dms_tags(task_arn)
    resources.append({
        'ResourceType': 'DMS Replication Task',
        'ResourceArn': task_arn,
        'ResourceName': task['ReplicationTaskIdentifier'],
        'Tags': tags
    })

# Fetch SecretsManager secrets
secrets = paginate_boto3_results(secretsmanager_client, 'list_secrets', 'SecretList')
for secret in secrets:
    secret_arn = secret['ARN']
    tags = get_secretsmanager_tags(secret_arn)
    resources.append({
        'ResourceType': 'SecretsManager Secret',
        'ResourceArn': secret_arn,
        'ResourceName': secret['Name'],
        'Tags': tags
    })

# Fetch ElastiCache clusters
elasticache_clusters = paginate_boto3_results(elasticache_client, 'describe_cache_clusters', 'CacheClusters')
for cluster in elasticache_clusters:
    cluster_arn = f"arn:aws:elasticache:{region}:{account_number}:cluster:{cluster['CacheClusterId']}"
    tags = get_elasticache_tags(cluster_arn)
    resources.append({
        'ResourceType': 'ElastiCache Cluster',
        'ResourceArn': cluster_arn,
        'ResourceName': cluster['CacheClusterId'],
        'Tags': tags
    })

# Fetch Elasticsearch domains
es_domains = es_client.list_domain_names().get('DomainNames', [])
for domain in es_domains:
    domain_name = domain['DomainName']
    domain_arn = f"arn:aws:es:{region}:{account_number}:domain/{domain_name}"
    tags = get_es_tags(domain_arn)
    resources.append({
        'ResourceType': 'Elasticsearch Domain',
        'ResourceArn': domain_arn,
        'ResourceName': domain_name,
        'Tags': tags
    })

# Fetch Elastic Beanstalk applications
ebs_apps = elasticbeanstalk_client.describe_applications().get('Applications', [])
for app in ebs_apps:
    app_name = app['ApplicationName']
    tags = get_ebs_tags(app_name)
    resources.append({
        'ResourceType': 'Elastic Beanstalk Application',
        'ResourceArn': f"arn:aws:elasticbeanstalk:{region}:{account_number}:application/{app_name}",
        'ResourceName': app_name,
        'Tags': tags
    })

# Fetch S3 buckets
s3_buckets = paginate_boto3_results(s3_client, 'list_buckets', 'Buckets')
for bucket in s3_buckets:
    bucket_name = bucket['Name']
    tags = get_s3_tags(bucket_name)
    resources.append({
        'ResourceType': 'S3 Bucket',
        'ResourceArn': f"arn:aws:s3:::{bucket_name}",
        'ResourceName': bucket_name,
        'Tags': tags
    })

csv_headers = ['Resource Type', 'Resource ARN', 'Region', 'Resource Name', 'Account Number'] + fiserv_tag_keys

with open('all_resources.csv', 'w', newline='') as csvfile:
    writer = csv.writer(csvfile)
    writer.writerow(csv_headers)

    for resource in resources:
        resource_type = resource['ResourceType']
        resource_arn = resource['ResourceArn']
        resource_name = resource['ResourceName']
        tags = resource['Tags']
        fiserv_tags = [tags.get(tag, '') for tag in fiserv_tag_keys]

        row_data = [resource_type, resource_arn, region, resource_name, account_number] + fiserv_tags
        writer.writerow(row_data)







Traceback (most recent call last):
  File "H:\pychram\pulled\newtest\newscriptbackup.py", line 309, in <module>
    s3_buckets = paginate_boto3_results(s3_client, 'list_buckets', 'Buckets')
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "H:\pychram\pulled\newtest\newscriptbackup.py", line 29, in paginate_boto3_results
    paginator = client.get_paginator(method)
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\F37YHCS\AppData\Roaming\Python\Python311\site-packages\botocore\client.py", line 1164, in get_paginator
    raise OperationNotPageableError(operation_name=operation_name)
botocore.exceptions.OperationNotPageableError: Operation cannot be paginated: list_buckets















import boto3
import csv

region = 'us-east-1'  # Specify the region here

# Configure AWS clients with no SSL verification
ec2_client = boto3.client('ec2', region_name=region, verify=False)
rds_client = boto3.client('rds', region_name=region, verify=False)
lambda_client = boto3.client('lambda', region_name=region, verify=False)
elb_client = boto3.client('elb', region_name=region, verify=False)
elbv2_client = boto3.client('elbv2', region_name=region, verify=False)
ecs_client = boto3.client('ecs', region_name=region, verify=False)
dynamodb_client = boto3.client('dynamodb', region_name=region, verify=False)
sns_client = boto3.client('sns', region_name=region, verify=False)
sqs_client = boto3.client('sqs', region_name=region, verify=False)
redshift_client = boto3.client('redshift', region_name=region, verify=False)
dms_client = boto3.client('dms', region_name=region, verify=False)
secretsmanager_client = boto3.client('secretsmanager', region_name=region, verify=False)
elasticache_client = boto3.client('elasticache', region_name=region, verify=False)
es_client = boto3.client('es', region_name=region, verify=False)
elasticbeanstalk_client = boto3.client('elasticbeanstalk', region_name=region, verify=False)
s3_client = boto3.client('s3', region_name=region, verify=False)

sts_client = boto3.client('sts')
account_number = sts_client.get_caller_identity()['Account']

def paginate_boto3_results(client, method, key):
    results = []
    paginator = client.get_paginator(method)
    for page in paginator.paginate():
        results.extend(page.get(key, []))
    return results

def get_ec2_tags(instance_id):
    response = ec2_client.describe_tags(
        Filters=[
            {'Name': 'resource-id', 'Values': [instance_id]}
        ]
    )
    return {tag['Key']: tag['Value'] for tag in response.get('Tags', [])}

def get_rds_tags(resource_arn):
    response = rds_client.list_tags_for_resource(ResourceName=resource_arn)
    return {tag['Key']: tag['Value'] for tag in response.get('TagList', [])}

def get_lambda_tags(function_arn):
    response = lambda_client.list_tags(Resource=function_arn)
    return response.get('Tags', {})

def get_elb_tags(load_balancer_name):
    response = elb_client.describe_tags(
        LoadBalancerNames=[load_balancer_name]
    )
    tags = {}
    if response['TagDescriptions']:
        for tag in response['TagDescriptions'][0]['Tags']:
            tags[tag['Key']] = tag['Value']
    return tags

def get_elbv2_tags(load_balancer_arn):
    response = elbv2_client.describe_tags(
        ResourceArns=[load_balancer_arn]
    )
    tags = {}
    if response['TagDescriptions']:
        for tag in response['TagDescriptions'][0]['Tags']:
            tags[tag['Key']] = tag['Value']
    return tags

def get_dynamodb_tags(table_arn):
    response = dynamodb_client.list_tags_of_resource(ResourceArn=table_arn)
    return {tag['Key']: tag['Value'] for tag in response.get('Tags', [])}

def get_sns_tags(topic_arn):
    response = sns_client.list_tags_for_resource(ResourceArn=topic_arn)
    return {tag['Key']: tag['Value'] for tag in response.get('Tags', [])}

def get_sqs_tags(queue_url):
    response = sqs_client.list_queue_tags(QueueUrl=queue_url)
    return response.get('Tags', {})

def get_redshift_tags(cluster_arn):
    response = redshift_client.describe_tags(ResourceName=cluster_arn)
    return {tag['Key']: tag['Value'] for tag in response.get('TaggedResources', [])}

def get_dms_tags(resource_arn):
    response = dms_client.list_tags_for_resource(ResourceArn=resource_arn)
    return {tag['Key']: tag['Value'] for tag in response.get('TagList', [])}

def get_secretsmanager_tags(secret_arn):
    response = secretsmanager_client.describe_secret(SecretId=secret_arn)
    return {tag['Key']: tag['Value'] for tag in response.get('Tags', [])}

def get_elasticache_tags(resource_arn):
    response = elasticache_client.list_tags_for_resource(ResourceName=resource_arn)
    return {tag['Key']: tag['Value'] for tag in response.get('TagList', [])}

def get_es_tags(domain_arn):
    response = es_client.list_tags(ARN=domain_arn)
    return {tag['Key']: tag['Value'] for tag in response.get('TagList', [])}

def get_ebs_tags(app_name):
    response = elasticbeanstalk_client.list_tags_for_resource(
        ResourceArn=f"arn:aws:elasticbeanstalk:{region}:{account_number}:application/{app_name}"
    )
    return {tag['Key']: tag['Value'] for tag in response.get('ResourceTags', [])}

def get_s3_tags(bucket_name):
    try:
        response = s3_client.get_bucket_tagging(Bucket=bucket_name)
        return {tag['Key']: tag['Value'] for tag in response.get('TagSet', [])}
    except s3_client.exceptions.NoSuchTagSet:
        return {}

# Specify the 'fiserv' tag keys
fiserv_tag_keys = ['fiserv::apm', 'fiserv::app', 'fiserv::description', 'fiserv::owner', 'fiserv::group', 'fiserv::stage', 'fiserv::environment']

resources = []

# Fetch EC2 instances
ec2_instances = paginate_boto3_results(ec2_client, 'describe_instances', 'Reservations')
for reservation in ec2_instances:
    for instance in reservation['Instances']:
        tags = get_ec2_tags(instance['InstanceId'])
        resources.append({
            'ResourceType': 'EC2 Instance',
            'ResourceArn': f"arn:aws:ec2:{region}:{account_number}:instance/{instance['InstanceId']}",
            'ResourceName': tags.get('Name', 'N/A'),
            'Tags': tags
        })

# Fetch RDS DB instances
rds_instances = paginate_boto3_results(rds_client, 'describe_db_instances', 'DBInstances')
for instance in rds_instances:
    tags = get_rds_tags(instance['DBInstanceArn'])
    resources.append({
        'ResourceType': 'RDS DB Instance',
        'ResourceArn': instance['DBInstanceArn'],
        'ResourceName': instance['DBInstanceIdentifier'],
        'Tags': tags
    })

# Fetch RDS DB clusters
rds_clusters = paginate_boto3_results(rds_client, 'describe_db_clusters', 'DBClusters')
for cluster in rds_clusters:
    tags = get_rds_tags(cluster['DBClusterArn'])
    resources.append({
        'ResourceType': 'RDS DB Cluster',
        'ResourceArn': cluster['DBClusterArn'],
        'ResourceName': cluster['DBClusterIdentifier'],
        'Tags': tags
    })

# Fetch Lambda functions
lambda_functions = paginate_boto3_results(lambda_client, 'list_functions', 'Functions')
for function in lambda_functions:
    tags = get_lambda_tags(function['FunctionArn'])
    resources.append({
        'ResourceType': 'Lambda Function',
        'ResourceArn': function['FunctionArn'],
        'ResourceName': function['FunctionName'],
        'Tags': tags
    })

# Fetch Classic Load Balancers
elbs = paginate_boto3_results(elb_client, 'describe_load_balancers', 'LoadBalancerDescriptions')
for elb in elbs:
    tags = get_elb_tags(elb['LoadBalancerName'])
    resources.append({
        'ResourceType': 'Classic Load Balancer',
        'ResourceArn': f"arn:aws:elasticloadbalancing:{region}:{account_number}:loadbalancer/{elb['LoadBalancerName']}",
        'ResourceName': elb['LoadBalancerName'],
        'Tags': tags
    })

# Fetch Application Load Balancers
albs = paginate_boto3_results(elbv2_client, 'describe_load_balancers', 'LoadBalancers')
for alb in albs:
    tags = get_elbv2_tags(alb['LoadBalancerArn'])
    resources.append({
        'ResourceType': 'Application Load Balancer',
        'ResourceArn': alb['LoadBalancerArn'],
        'ResourceName': alb['LoadBalancerName'],
        'Tags': tags
    })

# Fetch ECS clusters
ecs_clusters = paginate_boto3_results(ecs_client, 'list_clusters', 'clusterArns')
for cluster_arn in ecs_clusters:
    tag_response = ecs_client.list_tags_for_resource(resourceArn=cluster_arn)
    cluster_tags = tag_response.get('tags', [])
    fiserv_tags = {tag['key']: tag['value'] for tag in cluster_tags}
    resources.append({
        'ResourceType': 'ECS Cluster',
        'ResourceArn': cluster_arn,
        'ResourceName': cluster_arn.split('/')[-1],
        'Tags': fiserv_tags
    })

# Fetch DynamoDB tables
dynamodb_tables = dynamodb_client.list_tables().get('TableNames', [])
for table_name in dynamodb_tables:
    table_arn = f"arn:aws:dynamodb:{region}:{account_number}:table/{table_name}"
    tags = get_dynamodb_tags(table_arn)
    resources.append({
        'ResourceType': 'DynamoDB Table',
        'ResourceArn': table_arn,
        'ResourceName': table_name,
        'Tags': tags
    })

# Fetch SNS topics
sns_topics = paginate_boto3_results(sns_client, 'list_topics', 'Topics')
for topic in sns_topics:
    topic_arn = topic['TopicArn']
    tags = get_sns_tags(topic_arn)
    resources.append({
        'ResourceType': 'SNS Topic',
        'ResourceArn': topic_arn,
        'ResourceName': topic_arn.split(':')[-1],
        'Tags': tags
    })

# Fetch SQS queues
sqs_queues = paginate_boto3_results(sqs_client, 'list_queues', 'QueueUrls')
for queue_url in sqs_queues:
    tags = get_sqs_tags(queue_url)
    resources.append({
        'ResourceType': 'SQS Queue',
        'ResourceArn': queue_url,
        'ResourceName': queue_url.split('/')[-1],
        'Tags': tags
    })

# Fetch Redshift clusters
redshift_clusters = paginate_boto3_results(redshift_client, 'describe_clusters', 'Clusters')
for cluster in redshift_clusters:
    cluster_arn = f"arn:aws:redshift:{region}:{account_number}:cluster/{cluster['ClusterIdentifier']}"
    tags = get_redshift_tags(cluster_arn)
    resources.append({
        'ResourceType': 'Redshift Cluster',
        'ResourceArn': cluster_arn,
        'ResourceName': cluster['ClusterIdentifier'],
        'Tags': tags
    })

# Fetch DMS replication tasks
dms_tasks = paginate_boto3_results(dms_client, 'describe_replication_tasks', 'ReplicationTasks')
for task in dms_tasks:
    task_arn = task['ReplicationTaskArn']
    tags = get_dms_tags(task_arn)
    resources.append({
        'ResourceType': 'DMS Replication Task',
        'ResourceArn': task_arn,
        'ResourceName': task['ReplicationTaskIdentifier'],
        'Tags': tags
    })

# Fetch SecretsManager secrets
secrets = paginate_boto3_results(secretsmanager_client, 'list_secrets', 'SecretList')
for secret in secrets:
    secret_arn = secret['ARN']
    tags = get_secretsmanager_tags(secret_arn)
    resources.append({
        'ResourceType': 'SecretsManager Secret',
        'ResourceArn': secret_arn,
        'ResourceName': secret['Name'],
        'Tags': tags
    })

# Fetch ElastiCache clusters
elasticache_clusters = paginate_boto3_results(elasticache_client, 'describe_cache_clusters', 'CacheClusters')
for cluster in elasticache_clusters:
    cluster_arn = f"arn:aws:elasticache:{region}:{account_number}:cluster:{cluster['CacheClusterId']}"
    tags = get_elasticache_tags(cluster_arn)
    resources.append({
        'ResourceType': 'ElastiCache Cluster',
        'ResourceArn': cluster_arn,
        'ResourceName': cluster['CacheClusterId'],
        'Tags': tags
    })

# Fetch Elasticsearch domains
es_domains = es_client.list_domain_names().get('DomainNames', [])
for domain in es_domains:
    domain_name = domain['DomainName']
    domain_arn = f"arn:aws:es:{region}:{account_number}:domain/{domain_name}"
    tags = get_es_tags(domain_arn)
    resources.append({
        'ResourceType': 'Elasticsearch Domain',
        'ResourceArn': domain_arn,
        'ResourceName': domain_name,
        'Tags': tags
    })

# Fetch Elastic Beanstalk applications
ebs_apps = elasticbeanstalk_client.describe_applications().get('Applications', [])
for app in ebs_apps:
    app_name = app['ApplicationName']
    tags = get_ebs_tags(app_name)
    resources.append({
        'ResourceType': 'Elastic Beanstalk Application',
        'ResourceArn': f"arn:aws:elasticbeanstalk:{region}:{account_number}:application/{app_name}",
        'ResourceName': app_name,
        'Tags': tags
    })

# Fetch S3 buckets
try:
    s3_buckets = s3_client.list_buckets().get('Buckets', [])
    for bucket in s3_buckets:
        bucket_name = bucket['Name']
        tags = get_s3_tags(bucket_name)
        resources.append({
            'ResourceType': 'S3 Bucket',
            'ResourceArn': f"arn:aws:s3:::{bucket_name}",
            'ResourceName': bucket_name,
            'Tags': tags
        })
except Exception as e:
    print(f"Error fetching S3 buckets: {e}")

csv_headers = ['Resource Type', 'Resource ARN', 'Region', 'Resource Name', 'Account Number'] + fiserv_tag_keys

with open('all_resources.csv', 'w', newline='') as csvfile:
    writer = csv.writer(csvfile)
    writer.writerow(csv_headers)

    for resource in resources:
        resource_type = resource['ResourceType']
        resource_arn = resource['ResourceArn']
        resource_name = resource['ResourceName']
        tags = resource['Tags']
        fiserv_tags = [tags.get(tag, '') for tag in fiserv_tag_keys]

        row_data = [resource_type, resource_arn, region, resource_name, account_number] + fiserv_tags
        writer.writerow(row_data)





Error fetching S3 buckets: <botocore.errorfactory.S3Exceptions object at 0x000001EE375AEE50> object has no attribute NoSuchTagSet. Valid exceptions are: BucketAlreadyExists, BucketAlreadyOwnedByYou, InvalidObjectState, NoSuchBucket, NoSuchKey, NoSuchUpload, ObjectAlreadyInActiveTierError, ObjectNotInActiveTierError
























import boto3
import csv
from botocore.exceptions import ClientError

region = 'us-east-1'  # Specify the region here

# Configure AWS clients with no SSL verification
ec2_client = boto3.client('ec2', region_name=region, verify=False)
rds_client = boto3.client('rds', region_name=region, verify=False)
lambda_client = boto3.client('lambda', region_name=region, verify=False)
elb_client = boto3.client('elb', region_name=region, verify=False)
elbv2_client = boto3.client('elbv2', region_name=region, verify=False)
ecs_client = boto3.client('ecs', region_name=region, verify=False)
dynamodb_client = boto3.client('dynamodb', region_name=region, verify=False)
sns_client = boto3.client('sns', region_name=region, verify=False)
sqs_client = boto3.client('sqs', region_name=region, verify=False)
redshift_client = boto3.client('redshift', region_name=region, verify=False)
dms_client = boto3.client('dms', region_name=region, verify=False)
secretsmanager_client = boto3.client('secretsmanager', region_name=region, verify=False)
elasticache_client = boto3.client('elasticache', region_name=region, verify=False)
es_client = boto3.client('es', region_name=region, verify=False)
elasticbeanstalk_client = boto3.client('elasticbeanstalk', region_name=region, verify=False)
s3_client = boto3.client('s3', region_name=region, verify=False)

sts_client = boto3.client('sts')
account_number = sts_client.get_caller_identity()['Account']

def paginate_boto3_results(client, method, key):
    results = []
    paginator = client.get_paginator(method)
    for page in paginator.paginate():
        results.extend(page.get(key, []))
    return results

def get_ec2_tags(instance_id):
    response = ec2_client.describe_tags(
        Filters=[
            {'Name': 'resource-id', 'Values': [instance_id]}
        ]
    )
    return {tag['Key']: tag['Value'] for tag in response.get('Tags', [])}

def get_rds_tags(resource_arn):
    response = rds_client.list_tags_for_resource(ResourceName=resource_arn)
    return {tag['Key']: tag['Value'] for tag in response.get('TagList', [])}

def get_lambda_tags(function_arn):
    response = lambda_client.list_tags(Resource=function_arn)
    return response.get('Tags', {})

def get_elb_tags(load_balancer_name):
    response = elb_client.describe_tags(
        LoadBalancerNames=[load_balancer_name]
    )
    tags = {}
    if response['TagDescriptions']:
        for tag in response['TagDescriptions'][0]['Tags']:
            tags[tag['Key']] = tag['Value']
    return tags

def get_elbv2_tags(load_balancer_arn):
    response = elbv2_client.describe_tags(
        ResourceArns=[load_balancer_arn]
    )
    tags = {}
    if response['TagDescriptions']:
        for tag in response['TagDescriptions'][0]['Tags']:
            tags[tag['Key']] = tag['Value']
    return tags

def get_dynamodb_tags(table_arn):
    response = dynamodb_client.list_tags_of_resource(ResourceArn=table_arn)
    return {tag['Key']: tag['Value'] for tag in response.get('Tags', [])}

def get_sns_tags(topic_arn):
    response = sns_client.list_tags_for_resource(ResourceArn=topic_arn)
    return {tag['Key']: tag['Value'] for tag in response.get('Tags', [])}

def get_sqs_tags(queue_url):
    response = sqs_client.list_queue_tags(QueueUrl=queue_url)
    return response.get('Tags', {})

def get_redshift_tags(cluster_arn):
    response = redshift_client.describe_tags(ResourceName=cluster_arn)
    return {tag['Key']: tag['Value'] for tag in response.get('TaggedResources', [])}

def get_dms_tags(resource_arn):
    response = dms_client.list_tags_for_resource(ResourceArn=resource_arn)
    return {tag['Key']: tag['Value'] for tag in response.get('TagList', [])}

def get_secretsmanager_tags(secret_arn):
    response = secretsmanager_client.describe_secret(SecretId=secret_arn)
    return {tag['Key']: tag['Value'] for tag in response.get('Tags', [])}

def get_elasticache_tags(resource_arn):
    response = elasticache_client.list_tags_for_resource(ResourceName=resource_arn)
    return {tag['Key']: tag['Value'] for tag in response.get('TagList', [])}

def get_es_tags(domain_arn):
    response = es_client.list_tags(ARN=domain_arn)
    return {tag['Key']: tag['Value'] for tag in response.get('TagList', [])}

def get_ebs_tags(app_name):
    response = elasticbeanstalk_client.list_tags_for_resource(
        ResourceArn=f"arn:aws:elasticbeanstalk:{region}:{account_number}:application/{app_name}"
    )
    return {tag['Key']: tag['Value'] for tag in response.get('ResourceTags', [])}

def get_s3_tags(bucket_name):
    try:
        response = s3_client.get_bucket_tagging(Bucket=bucket_name)
        return {tag['Key']: tag['Value'] for tag in response.get('TagSet', [])}
    except ClientError as e:
        if e.response['Error']['Code'] == 'NoSuchTagSet':
            return {}
        else:
            print(f"Error fetching tags for S3 bucket {bucket_name}: {e}")
            return {}

# Specify the 'fiserv' tag keys
fiserv_tag_keys = ['fiserv::apm', 'fiserv::app', 'fiserv::description', 'fiserv::owner', 'fiserv::group', 'fiserv::stage', 'fiserv::environment']

resources = []

# Fetch EC2 instances
ec2_instances = paginate_boto3_results(ec2_client, 'describe_instances', 'Reservations')
for reservation in ec2_instances:
    for instance in reservation['Instances']:
        tags = get_ec2_tags(instance['InstanceId'])
        resources.append({
            'ResourceType': 'EC2 Instance',
            'ResourceArn': f"arn:aws:ec2:{region}:{account_number}:instance/{instance['InstanceId']}",
            'ResourceName': tags.get('Name', 'N/A'),
            'Tags': tags
        })

# Fetch RDS DB instances
rds_instances = paginate_boto3_results(rds_client, 'describe_db_instances', 'DBInstances')
for instance in rds_instances:
    tags = get_rds_tags(instance['DBInstanceArn'])
    resources.append({
        'ResourceType': 'RDS DB Instance',
        'ResourceArn': instance['DBInstanceArn'],
        'ResourceName': instance['DBInstanceIdentifier'],
        'Tags': tags
    })

# Fetch RDS DB clusters
rds_clusters = paginate_boto3_results(rds_client, 'describe_db_clusters', 'DBClusters')
for cluster in rds_clusters:
    tags = get_rds_tags(cluster['DBClusterArn'])
    resources.append({
        'ResourceType': 'RDS DB Cluster',
        'ResourceArn': cluster['DBClusterArn'],
        'ResourceName': cluster['DBClusterIdentifier'],
        'Tags': tags
    })

# Fetch Lambda functions
lambda_functions = paginate_boto3_results(lambda_client, 'list_functions', 'Functions')
for function in lambda_functions:
    tags = get_lambda_tags(function['FunctionArn'])
    resources.append({
        'ResourceType': 'Lambda Function',
        'ResourceArn': function['FunctionArn'],
        'ResourceName': function['FunctionName'],
        'Tags': tags
    })

# Fetch Classic Load Balancers
elbs = paginate_boto3_results(elb_client, 'describe_load_balancers', 'LoadBalancerDescriptions')
for elb in elbs:
    tags = get_elb_tags(elb['LoadBalancerName'])
    resources.append({
        'ResourceType': 'Classic Load Balancer',
        'ResourceArn': f"arn:aws:elasticloadbalancing:{region}:{account_number}:loadbalancer/{elb['LoadBalancerName']}",
        'ResourceName': elb['LoadBalancerName'],
        'Tags': tags
    })

# Fetch Application Load Balancers
albs = paginate_boto3_results(elbv2_client, 'describe_load_balancers', 'LoadBalancers')
for alb in albs:
    tags = get_elbv2_tags(alb['LoadBalancerArn'])
    resources.append({
        'ResourceType': 'Application Load Balancer',
        'ResourceArn': alb['LoadBalancerArn'],
        'ResourceName': alb['LoadBalancerName'],
        'Tags': tags
    })

# Fetch ECS clusters
ecs_clusters = paginate_boto3_results(ecs_client, 'list_clusters', 'clusterArns')
for cluster_arn in ecs_clusters:
    tag_response = ecs_client.list_tags_for_resource(resourceArn=cluster_arn)
    cluster_tags = tag_response.get('tags', [])
    fiserv_tags = {tag['key']: tag['value'] for tag in cluster_tags}
    resources.append({
        'ResourceType': 'ECS Cluster',
        'ResourceArn': cluster_arn,
        'ResourceName': cluster_arn.split('/')[-1],
        'Tags': fiserv_tags
    })

# Fetch DynamoDB tables
dynamodb_tables = paginate_boto3_results(dynamodb_client, 'list_tables', 'TableNames')
for table_name in dynamodb_tables:
    table_arn = f"arn:aws:dynamodb:{region}:{account_number}:table/{table_name}"
    tags = get_dynamodb_tags(table_arn)
    resources.append({
        'ResourceType': 'DynamoDB Table',
        'ResourceArn': table_arn,
        'ResourceName': table_name,
        'Tags': tags
    })

# Fetch SNS topics
sns_topics = paginate_boto3_results(sns_client, 'list_topics', 'Topics')
for topic in sns_topics:
    topic_arn = topic['TopicArn']
    tags = get_sns_tags(topic_arn)
    resources.append({
        'ResourceType': 'SNS Topic',
        'ResourceArn': topic_arn,
        'ResourceName': topic_arn.split(':')[-1],
        'Tags': tags
    })

# Fetch SQS queues
sqs_queues = paginate_boto3_results(sqs_client, 'list_queues', 'QueueUrls')
for queue_url in sqs_queues:
    tags = get_sqs_tags(queue_url)
    resources.append({
        'ResourceType': 'SQS Queue',
        'ResourceArn': queue_url,
        'ResourceName': queue_url.split('/')[-1],
        'Tags': tags
    })

# Fetch Redshift clusters
redshift_clusters = paginate_boto3_results(redshift_client, 'describe_clusters', 'Clusters')
for cluster in redshift_clusters:
    cluster_arn = f"arn:aws:redshift:{region}:{account_number}:cluster/{cluster['ClusterIdentifier']}"
    tags = get_redshift_tags(cluster_arn)
    resources.append({
        'ResourceType': 'Redshift Cluster',
        'ResourceArn': cluster_arn,
        'ResourceName': cluster['ClusterIdentifier'],
        'Tags': tags
    })

# Fetch DMS replication tasks
dms_tasks = paginate_boto3_results(dms_client, 'describe_replication_tasks', 'ReplicationTasks')
for task in dms_tasks:
    task_arn = task['ReplicationTaskArn']
    tags = get_dms_tags(task_arn)
    resources.append({
        'ResourceType': 'DMS Replication Task',
        'ResourceArn': task_arn,
        'ResourceName': task['ReplicationTaskIdentifier'],
        'Tags': tags
    })

# Fetch SecretsManager secrets
secrets = paginate_boto3_results(secretsmanager_client, 'list_secrets', 'SecretList')
for secret in secrets:
    secret_arn = secret['ARN']
    tags = get_secretsmanager_tags(secret_arn)
    resources.append({
        'ResourceType': 'SecretsManager Secret',
        'ResourceArn': secret_arn,
        'ResourceName': secret['Name'],
        'Tags': tags
    })

# Fetch ElastiCache clusters
elasticache_clusters = paginate_boto3_results(elasticache_client, 'describe_cache_clusters', 'CacheClusters')
for cluster in elasticache_clusters:
    cluster_arn = f"arn:aws:elasticache:{region}:{account_number}:cluster:{cluster['CacheClusterId']}"
    tags = get_elasticache_tags(cluster_arn)
    resources.append({
        'ResourceType': 'ElastiCache Cluster',
        'ResourceArn': cluster_arn,
        'ResourceName': cluster['CacheClusterId'],
        'Tags': tags
    })

# Fetch Elasticsearch domains
try:
    es_domains = es_client.list_domain_names().get('DomainNames', [])
    for domain in es_domains:
        domain_name = domain['DomainName']
        domain_arn = f"arn:aws:es:{region}:{account_number}:domain/{domain_name}"
        tags = get_es_tags(domain_arn)
        resources.append({
            'ResourceType': 'Elasticsearch Domain',
            'ResourceArn': domain_arn,
            'ResourceName': domain_name,
            'Tags': tags
        })
except ClientError as e:
    print(f"Error fetching Elasticsearch domains: {e}")

# Fetch Elastic Beanstalk applications
try:
    ebs_apps = elasticbeanstalk_client.describe_applications().get('Applications', [])
    for app in ebs_apps:
        app_name = app['ApplicationName']
        tags = get_ebs_tags(app_name)
        resources.append({
            'ResourceType': 'Elastic Beanstalk Application',
            'ResourceArn': f"arn:aws:elasticbeanstalk:{region}:{account_number}:application/{app_name}",
            'ResourceName': app_name,
            'Tags': tags
        })
except ClientError as e:
    print(f"Error fetching Elastic Beanstalk applications: {e}")

# Fetch S3 buckets
try:
    s3_buckets = s3_client.list_buckets().get('Buckets', [])
    for bucket in s3_buckets:
        bucket_name = bucket['Name']
        tags = get_s3_tags(bucket_name)
        resources.append({
            'ResourceType': 'S3 Bucket',
            'ResourceArn': f"arn:aws:s3:::{bucket_name}",
            'ResourceName': bucket_name,
            'Tags': tags
        })
except ClientError as e:
    print(f"Error fetching S3 buckets: {e}")

csv_headers = ['Resource Type', 'Resource ARN', 'Region', 'Resource Name', 'Account Number'] + fiserv_tag_keys

with open('all_resources.csv', 'w', newline='') as csvfile:
    writer = csv.writer(csvfile)
    writer.writerow(csv_headers)

    for resource in resources:
        resource_type = resource['ResourceType']
        resource_arn = resource['ResourceArn']
        resource_name = resource['ResourceName']
        tags = resource['Tags']
        fiserv_tags = [tags.get(tag, '') for tag in fiserv_tag_keys]

        row_data = [resource_type, resource_arn, region, resource_name, account_number] + fiserv_tags
        writer.writerow(row_data)








































import boto3
import csv
from botocore.exceptions import ClientError

region = 'us-east-1'  # Specify the region here

# Configure AWS clients with no SSL verification
ec2_client = boto3.client('ec2', region_name=region, verify=False)
rds_client = boto3.client('rds', region_name=region, verify=False)
lambda_client = boto3.client('lambda', region_name=region, verify=False)
elb_client = boto3.client('elb', region_name=region, verify=False)
elbv2_client = boto3.client('elbv2', region_name=region, verify=False)
ecs_client = boto3.client('ecs', region_name=region, verify=False)
dynamodb_client = boto3.client('dynamodb', region_name=region, verify=False)
sns_client = boto3.client('sns', region_name=region, verify=False)
sqs_client = boto3.client('sqs', region_name=region, verify=False)
redshift_client = boto3.client('redshift', region_name=region, verify=False)
dms_client = boto3.client('dms', region_name=region, verify=False)
secretsmanager_client = boto3.client('secretsmanager', region_name=region, verify=False)
elasticache_client = boto3.client('elasticache', region_name=region, verify=False)
es_client = boto3.client('es', region_name=region, verify=False)
elasticbeanstalk_client = boto3.client('elasticbeanstalk', region_name=region, verify=False)
s3_client = boto3.client('s3', region_name=region, verify=False)
ecr_client = boto3.client('ecr', region_name=region, verify=False)
route53_client = boto3.client('route53', region_name=region, verify=False)

sts_client = boto3.client('sts')
account_number = sts_client.get_caller_identity()['Account']

def paginate_boto3_results(client, method, key):
    results = []
    paginator = client.get_paginator(method)
    for page in paginator.paginate():
        results.extend(page.get(key, []))
    return results

def get_ec2_tags(instance_id):
    response = ec2_client.describe_tags(
        Filters=[
            {'Name': 'resource-id', 'Values': [instance_id]}
        ]
    )
    return {tag['Key']: tag['Value'] for tag in response.get('Tags', [])}

def get_rds_tags(resource_arn):
    response = rds_client.list_tags_for_resource(ResourceName=resource_arn)
    return {tag['Key']: tag['Value'] for tag in response.get('TagList', [])}

def get_lambda_tags(function_arn):
    response = lambda_client.list_tags(Resource=function_arn)
    return response.get('Tags', {})

def get_elb_tags(load_balancer_name):
    response = elb_client.describe_tags(
        LoadBalancerNames=[load_balancer_name]
    )
    tags = {}
    if response['TagDescriptions']:
        for tag in response['TagDescriptions'][0]['Tags']:
            tags[tag['Key']] = tag['Value']
    return tags

def get_elbv2_tags(load_balancer_arn):
    response = elbv2_client.describe_tags(
        ResourceArns=[load_balancer_arn]
    )
    tags = {}
    if response['TagDescriptions']:
        for tag in response['TagDescriptions'][0]['Tags']:
            tags[tag['Key']] = tag['Value']
    return tags

def get_dynamodb_tags(table_arn):
    response = dynamodb_client.list_tags_of_resource(ResourceArn=table_arn)
    return {tag['Key']: tag['Value'] for tag in response.get('Tags', [])}

def get_sns_tags(topic_arn):
    response = sns_client.list_tags_for_resource(ResourceArn=topic_arn)
    return {tag['Key']: tag['Value'] for tag in response.get('Tags', [])}

def get_sqs_tags(queue_url):
    response = sqs_client.list_queue_tags(QueueUrl=queue_url)
    return response.get('Tags', {})

def get_redshift_tags(cluster_arn):
    response = redshift_client.describe_tags(ResourceName=cluster_arn)
    return {tag['Key']: tag['Value'] for tag in response.get('TaggedResources', [])}

def get_dms_tags(resource_arn):
    response = dms_client.list_tags_for_resource(ResourceArn=resource_arn)
    return {tag['Key']: tag['Value'] for tag in response.get('TagList', [])}

def get_secretsmanager_tags(secret_arn):
    response = secretsmanager_client.describe_secret(SecretId=secret_arn)
    return {tag['Key']: tag['Value'] for tag in response.get('Tags', [])}

def get_elasticache_tags(resource_arn):
    response = elasticache_client.list_tags_for_resource(ResourceName=resource_arn)
    return {tag['Key']: tag['Value'] for tag in response.get('TagList', [])}

def get_es_tags(domain_arn):
    response = es_client.list_tags(ARN=domain_arn)
    return {tag['Key']: tag['Value'] for tag in response.get('TagList', [])}

def get_ebs_tags(app_name):
    response = elasticbeanstalk_client.list_tags_for_resource(
        ResourceArn=f"arn:aws:elasticbeanstalk:{region}:{account_number}:application/{app_name}"
    )
    return {tag['Key']: tag['Value'] for tag in response.get('ResourceTags', [])}

def get_s3_tags(bucket_name):
    try:
        response = s3_client.get_bucket_tagging(Bucket=bucket_name)
        return {tag['Key']: tag['Value'] for tag in response.get('TagSet', [])}
    except ClientError as e:
        if e.response['Error']['Code'] == 'NoSuchTagSet':
            return {}
        else:
            print(f"Error fetching tags for S3 bucket {bucket_name}: {e}")
            return {}

def get_ecr_tags(repository_arn):
    response = ecr_client.list_tags_for_resource(resourceArn=repository_arn)
    return {tag['Key']: tag['Value'] for tag in response.get('tags', [])}

def get_route53_tags(hosted_zone_id):
    response = route53_client.list_tags_for_resource(ResourceType='hostedzone', ResourceId=hosted_zone_id)
    return {tag['Key']: tag['Value'] for tag in response.get('Tags', [])}

# Specify the 'fiserv' tag keys
fiserv_tag_keys = ['fiserv::apm', 'fiserv::app', 'fiserv::description', 'fiserv::owner', 'fiserv::group', 'fiserv::stage', 'fiserv::environment']

resources = []

# Fetch EC2 instances
ec2_instances = paginate_boto3_results(ec2_client, 'describe_instances', 'Reservations')
for reservation in ec2_instances:
    for instance in reservation['Instances']:
        tags = get_ec2_tags(instance['InstanceId'])
        resources.append({
            'ResourceType': 'EC2 Instance',
            'ResourceArn': f"arn:aws:ec2:{region}:{account_number}:instance/{instance['InstanceId']}",
            'ResourceName': tags.get('Name', 'N/A'),
            'Tags': tags
        })

# Fetch RDS DB instances
rds_instances = paginate_boto3_results(rds_client, 'describe_db_instances', 'DBInstances')
for instance in rds_instances:
    tags = get_rds_tags(instance['DBInstanceArn'])
    resources.append({
        'ResourceType': 'RDS DB Instance',
        'ResourceArn': instance['DBInstanceArn'],
        'ResourceName': instance['DBInstanceIdentifier'],
        'Tags': tags
    })

# Fetch RDS DB clusters
rds_clusters = paginate_boto3_results(rds_client, 'describe_db_clusters', 'DBClusters')
for cluster in rds_clusters:
    tags = get_rds_tags(cluster['DBClusterArn'])
    resources.append({
        'ResourceType': 'RDS DB Cluster',
        'ResourceArn': cluster['DBClusterArn'],
        'ResourceName': cluster['DBClusterIdentifier'],
        'Tags': tags
    })

# Fetch Lambda functions
lambda_functions = paginate_boto3_results(lambda_client, 'list_functions', 'Functions')
for function in lambda_functions:
    tags = get_lambda_tags(function['FunctionArn'])
    resources.append({
        'ResourceType': 'Lambda Function',
        'ResourceArn': function['FunctionArn'],
        'ResourceName': function['FunctionName'],
        'Tags': tags
    })

# Fetch Classic Load Balancers
elbs = paginate_boto3_results(elb_client, 'describe_load_balancers', 'LoadBalancerDescriptions')
for elb in elbs:
    tags = get_elb_tags(elb['LoadBalancerName'])
    resources.append({
        'ResourceType': 'Classic Load Balancer',
        'ResourceArn': f"arn:aws:elasticloadbalancing:{region}:{account_number}:loadbalancer/{elb['LoadBalancerName']}",
        'ResourceName': elb['LoadBalancerName'],
        'Tags': tags
    })

# Fetch Application Load Balancers
albs = paginate_boto3_results(elbv2_client, 'describe_load_balancers', 'LoadBalancers')
for alb in albs:
    tags = get_elbv2_tags(alb['LoadBalancerArn'])
    resources.append({
        'ResourceType': 'Application Load Balancer',
        'ResourceArn': alb['LoadBalancerArn'],
        'ResourceName': alb['LoadBalancerName'],
        'Tags': tags
    })

# Fetch ECS clusters
ecs_clusters = paginate_boto3_results(ecs_client, 'list_clusters', 'clusterArns')
for cluster_arn in ecs_clusters:
    tag_response = ecs_client.list_tags_for_resource(resourceArn=cluster_arn)
    cluster_tags = tag_response.get('tags', [])
    fiserv_tags = {tag['key']: tag['value'] for tag in cluster_tags}
    resources.append({
        'ResourceType': 'ECS Cluster',
        'ResourceArn': cluster_arn,
        'ResourceName': cluster_arn.split('/')[-1],
        'Tags': fiserv_tags
    })

# Fetch DynamoDB tables
dynamodb_tables = paginate_boto3_results(dynamodb_client, 'list_tables', 'TableNames')
for table_name in dynamodb_tables:
    table_arn = f"arn:aws:dynamodb:{region}:{account_number}:table/{table_name}"
    tags = get_dynamodb_tags(table_arn)
    resources.append({
        'ResourceType': 'DynamoDB Table',
        'ResourceArn': table_arn,
        'ResourceName': table_name,
        'Tags': tags
    })

# Fetch SNS topics
sns_topics = paginate_boto3_results(sns_client, 'list_topics', 'Topics')
for topic in sns_topics:
    topic_arn = topic['TopicArn']
    tags = get_sns_tags(topic_arn)
    resources.append({
        'ResourceType': 'SNS Topic',
        'ResourceArn': topic_arn,
        'ResourceName': topic_arn.split(':')[-1],
        'Tags': tags
    })

# Fetch SQS queues
sqs_queues = paginate_boto3_results(sqs_client, 'list_queues', 'QueueUrls')
for queue_url in sqs_queues:
    tags = get_sqs_tags(queue_url)
    resources.append({
        'ResourceType': 'SQS Queue',
        'ResourceArn': queue_url,
        'ResourceName': queue_url.split('/')[-1],
        'Tags': tags
    })

# Fetch Redshift clusters
redshift_clusters = paginate_boto3_results(redshift_client, 'describe_clusters', 'Clusters')
for cluster in redshift_clusters:
    cluster_arn = f"arn:aws:redshift:{region}:{account_number}:cluster/{cluster['ClusterIdentifier']}"
    tags = get_redshift_tags(cluster_arn)
    resources.append({
        'ResourceType': 'Redshift Cluster',
        'ResourceArn': cluster_arn,
        'ResourceName': cluster['ClusterIdentifier'],
        'Tags': tags
    })

# Fetch DMS replication tasks
dms_tasks = paginate_boto3_results(dms_client, 'describe_replication_tasks', 'ReplicationTasks')
for task in dms_tasks:
    task_arn = task['ReplicationTaskArn']
    tags = get_dms_tags(task_arn)
    resources.append({
        'ResourceType': 'DMS Replication Task',
        'ResourceArn': task_arn,
        'ResourceName': task['ReplicationTaskIdentifier'],
        'Tags': tags
    })

# Fetch SecretsManager secrets
secrets = paginate_boto3_results(secretsmanager_client, 'list_secrets', 'SecretList')
for secret in secrets:
    secret_arn = secret['ARN']
    tags = get_secretsmanager_tags(secret_arn)
    resources.append({
        'ResourceType': 'SecretsManager Secret',
        'ResourceArn': secret_arn,
        'ResourceName': secret['Name'],
        'Tags': tags
    })

# Fetch ElastiCache clusters
elasticache_clusters = paginate_boto3_results(elasticache_client, 'describe_cache_clusters', 'CacheClusters')
for cluster in elasticache_clusters:
    cluster_arn = f"arn:aws:elasticache:{region}:{account_number}:cluster:{cluster['CacheClusterId']}"
    tags = get_elasticache_tags(cluster_arn)
    resources.append({
        'ResourceType': 'ElastiCache Cluster',
        'ResourceArn': cluster_arn,
        'ResourceName': cluster['CacheClusterId'],
        'Tags': tags
    })

# Fetch Elasticsearch domains
try:
    es_domains = es_client.list_domain_names().get('DomainNames', [])
    for domain in es_domains:
        domain_name = domain['DomainName']
        domain_arn = f"arn:aws:es:{region}:{account_number}:domain/{domain_name}"
        tags = get_es_tags(domain_arn)
        resources.append({
            'ResourceType': 'Elasticsearch Domain',
            'ResourceArn': domain_arn,
            'ResourceName': domain_name,
            'Tags': tags
        })
except ClientError as e:
    print(f"Error fetching Elasticsearch domains: {e}")

# Fetch Elastic Beanstalk applications
try:
    ebs_apps = elasticbeanstalk_client.describe_applications().get('Applications', [])
    for app in ebs_apps:
        app_name = app['ApplicationName']
        tags = get_ebs_tags(app_name)
        resources.append({
            'ResourceType': 'Elastic Beanstalk Application',
            'ResourceArn': f"arn:aws:elasticbeanstalk:{region}:{account_number}:application/{app_name}",
            'ResourceName': app_name,
            'Tags': tags
        })
except ClientError as e:
    print(f"Error fetching Elastic Beanstalk applications: {e}")

# Fetch S3 buckets
try:
    s3_buckets = s3_client.list_buckets().get('Buckets', [])
    for bucket in s3_buckets:
        bucket_name = bucket['Name']
        tags = get_s3_tags(bucket_name)
        resources.append({
            'ResourceType': 'S3 Bucket',
            'ResourceArn': f"arn:aws:s3:::{bucket_name}",
            'ResourceName': bucket_name,
            'Tags': tags
        })
except ClientError as e:
    print(f"Error fetching S3 buckets: {e}")

# Fetch ECR repositories
ecr_repositories = paginate_boto3_results(ecr_client, 'describe_repositories', 'repositories')
for repo in ecr_repositories:
    repo_arn = repo['repositoryArn']
    tags = get_ecr_tags(repo_arn)
    resources.append({
        'ResourceType': 'ECR Repository',
        'ResourceArn': repo_arn,
        'ResourceName': repo['repositoryName'],
        'Tags': tags
    })

# Fetch Route 53 hosted zones
route53_zones = paginate_boto3_results(route53_client, 'list_hosted_zones', 'HostedZones')
for zone in route53_zones:
    zone_id = zone['Id'].split('/')[-1]
    tags = get_route53_tags(zone_id)
    resources.append({
        'ResourceType': 'Route 53 Hosted Zone',
        'ResourceArn': f"arn:aws:route53:::hostedzone/{zone_id}",
        'ResourceName': zone['Name'],
        'Tags': tags
    })

csv_headers = ['Resource Type', 'Resource ARN', 'Region', 'Resource Name', 'Account Number'] + fiserv_tag_keys

with open('all_resources.csv', 'w', newline='') as csvfile:
    writer = csv.writer(csvfile)
    writer.writerow(csv_headers)

    for resource in resources:
        resource_type = resource['ResourceType']
        resource_arn = resource['ResourceArn']
        resource_name = resource['ResourceName']
        tags = resource['Tags']
        fiserv_tags = [tags.get(tag, '') for tag in fiserv_tag_keys]

        row_data = [resource_type, resource_arn, region, resource_name, account_number] + fiserv_tags
        writer.writerow(row_data)

























import boto3
import csv
from botocore.exceptions import ClientError

# List of regions to check
regions = ['us-east-1', 'us-west-1']  # Add more regions as needed

# Initialize global resource tracking
global_resources = {
    'S3': set()
}

def get_client(service, region=None):
    return boto3.client(service, region_name=region, verify=False) if region else boto3.client(service, verify=False)

def get_ec2_tags(instance_id, ec2_client):
    response = ec2_client.describe_tags(
        Filters=[
            {'Name': 'resource-id', 'Values': [instance_id]}
        ]
    )
    return {tag['Key']: tag['Value'] for tag in response.get('Tags', [])}

# Define functions for fetching tags (same as before)
def get_rds_tags(resource_arn, rds_client):
    response = rds_client.list_tags_for_resource(ResourceName=resource_arn)
    return {tag['Key']: tag['Value'] for tag in response.get('TagList', [])}

def get_lambda_tags(function_arn, lambda_client):
    response = lambda_client.list_tags(Resource=function_arn)
    return response.get('Tags', {})

def get_elb_tags(load_balancer_name, elb_client):
    response = elb_client.describe_tags(
        LoadBalancerNames=[load_balancer_name]
    )
    tags = {}
    if response['TagDescriptions']:
        for tag in response['TagDescriptions'][0]['Tags']:
            tags[tag['Key']] = tag['Value']
    return tags

def get_elbv2_tags(load_balancer_arn, elbv2_client):
    response = elbv2_client.describe_tags(
        ResourceArns=[load_balancer_arn]
    )
    tags = {}
    if response['TagDescriptions']:
        for tag in response['TagDescriptions'][0]['Tags']:
            tags[tag['Key']] = tag['Value']
    return tags

def get_dynamodb_tags(table_arn, dynamodb_client):
    response = dynamodb_client.list_tags_of_resource(ResourceArn=table_arn)
    return {tag['Key']: tag['Value'] for tag in response.get('Tags', [])}

def get_sns_tags(topic_arn, sns_client):
    response = sns_client.list_tags_for_resource(ResourceArn=topic_arn)
    return {tag['Key']: tag['Value'] for tag in response.get('Tags', [])}

def get_sqs_tags(queue_url, sqs_client):
    response = sqs_client.list_queue_tags(QueueUrl=queue_url)
    return response.get('Tags', {})

def get_redshift_tags(cluster_arn, redshift_client):
    response = redshift_client.describe_tags(ResourceName=cluster_arn)
    return {tag['Key']: tag['Value'] for tag in response.get('TaggedResources', [])}

def get_dms_tags(resource_arn, dms_client):
    response = dms_client.list_tags_for_resource(ResourceArn=resource_arn)
    return {tag['Key']: tag['Value'] for tag in response.get('TagList', [])}

def get_secretsmanager_tags(secret_arn, secretsmanager_client):
    response = secretsmanager_client.describe_secret(SecretId=secret_arn)
    return {tag['Key']: tag['Value'] for tag in response.get('Tags', [])}

def get_elasticache_tags(resource_arn, elasticache_client):
    response = elasticache_client.list_tags_for_resource(ResourceName=resource_arn)
    return {tag['Key']: tag['Value'] for tag in response.get('TagList', [])}

def get_es_tags(domain_arn, es_client):
    response = es_client.list_tags(ARN=domain_arn)
    return {tag['Key']: tag['Value'] for tag in response.get('TagList', [])}

def get_ebs_tags(app_name, elasticbeanstalk_client):
    response = elasticbeanstalk_client.list_tags_for_resource(
        ResourceArn=f"arn:aws:elasticbeanstalk:{region}:{account_number}:application/{app_name}"
    )
    return {tag['Key']: tag['Value'] for tag in response.get('ResourceTags', [])}

def get_s3_tags(bucket_name, s3_client):
    try:
        response = s3_client.get_bucket_tagging(Bucket=bucket_name)
        return {tag['Key']: tag['Value'] for tag in response.get('TagSet', [])}
    except ClientError as e:
        if e.response['Error']['Code'] == 'NoSuchTagSet':
            return {}
        else:
            print(f"Error fetching tags for S3 bucket {bucket_name}: {e}")
            return {}

def get_ecr_tags(repository_arn, ecr_client):
    response = ecr_client.list_tags_for_resource(resourceArn=repository_arn)
    return {tag['Key']: tag['Value'] for tag in response.get('tags', [])}

def get_route53_tags(hosted_zone_id, route53_client):
    response = route53_client.list_tags_for_resource(ResourceType='hostedzone', ResourceId=hosted_zone_id)
    return {tag['Key']: tag['Value'] for tag in response.get('Tags', [])}

def paginate_boto3_results(client, method, key):
    results = []
    paginator = client.get_paginator(method)
    for page in paginator.paginate():
        results.extend(page.get(key, []))
    return results

# Specify the 'fiserv' tag keys
fiserv_tag_keys = ['fiserv::apm', 'fiserv::app', 'fiserv::description', 'fiserv::owner', 'fiserv::group', 'fiserv::stage', 'fiserv::environment']

resources = []

# Loop through regions
for region in regions:
    print(f"Fetching resources in region: {region}")

    # Initialize clients
    ec2_client = get_client('ec2', region)
    rds_client = get_client('rds', region)
    lambda_client = get_client('lambda', region)
    elb_client = get_client('elb', region)
    elbv2_client = get_client('elbv2', region)
    ecs_client = get_client('ecs', region)
    dynamodb_client = get_client('dynamodb', region)
    sns_client = get_client('sns', region)
    sqs_client = get_client('sqs', region)
    redshift_client = get_client('redshift', region)
    dms_client = get_client('dms', region)
    secretsmanager_client = get_client('secretsmanager', region)
    elasticache_client = get_client('elasticache', region)
    es_client = get_client('es', region)
    elasticbeanstalk_client = get_client('elasticbeanstalk', region)
    s3_client = get_client('s3', region)
    ecr_client = get_client('ecr', region)
    route53_client = get_client('route53', region)

    # Fetch EC2 instances
    ec2_instances = paginate_boto3_results(ec2_client, 'describe_instances', 'Reservations')
    for reservation in ec2_instances:
        for instance in reservation['Instances']:
            tags = get_ec2_tags(instance['InstanceId'], ec2_client)
            resources.append({
                'ResourceType': 'EC2 Instance',
                'ResourceArn': f"arn:aws:ec2:{region}:{account_number}:instance/{instance['InstanceId']}",
                'ResourceName': tags.get('Name', 'N/A'),
                'Tags': tags
            })

    # Fetch RDS DB instances
    rds_instances = paginate_boto3_results(rds_client, 'describe_db_instances', 'DBInstances')
    for instance in rds_instances:
        tags = get_rds_tags(instance['DBInstanceArn'], rds_client)
        resources.append({
            'ResourceType': 'RDS DB Instance',
            'ResourceArn': instance['DBInstanceArn'],
            'ResourceName': instance['DBInstanceIdentifier'],
            'Tags': tags
        })

    # Fetch RDS DB clusters
    rds_clusters = paginate_boto3_results(rds_client, 'describe_db_clusters', 'DBClusters')
    for cluster in rds_clusters:
        tags = get_rds_tags(cluster['DBClusterArn'], rds_client)
        resources.append({
            'ResourceType': 'RDS DB Cluster',
            'ResourceArn': cluster['DBClusterArn'],
            'ResourceName': cluster['DBClusterIdentifier'],
            'Tags': tags
        })

    # Fetch Lambda functions
    lambda_functions = paginate_boto3_results(lambda_client, 'list_functions', 'Functions')
    for function in lambda_functions:
        tags = get_lambda_tags(function['FunctionArn'], lambda_client)
        resources.append({
            'ResourceType': 'Lambda Function',
            'ResourceArn': function['FunctionArn'],
            'ResourceName': function['FunctionName'],
            'Tags': tags
        })

    # Fetch Classic Load Balancers
    elbs = paginate_boto3_results(elb_client, 'describe_load_balancers', 'LoadBalancerDescriptions')
    for elb in elbs:
        tags = get_elb_tags(elb['LoadBalancerName'], elb_client)
        resources.append({
            'ResourceType': 'Classic Load Balancer',
            'ResourceArn': f"arn:aws:elasticloadbalancing:{region}:{account_number}:loadbalancer/{elb['LoadBalancerName']}",
            'ResourceName': elb['LoadBalancerName'],
            'Tags': tags
        })

    # Fetch Application Load Balancers
    albs = paginate_boto3_results(elbv2_client, 'describe_load_balancers', 'LoadBalancers')
    for alb in albs:
        tags = get_elbv2_tags(alb['LoadBalancerArn'], elbv2_client)
        resources.append({
            'ResourceType': 'Application Load Balancer',
            'ResourceArn': alb['LoadBalancerArn'],
            'ResourceName': alb['LoadBalancerName'],
            'Tags': tags
        })

    # Fetch ECS clusters
    ecs_clusters = paginate_boto3_results(ecs_client, 'list_clusters', 'clusterArns')
    for cluster_arn in ecs_clusters:
        tag_response = ecs_client.list_tags_for_resource(resourceArn=cluster_arn)
        cluster_tags = tag_response.get('tags', [])
        fiserv_tags = {tag['key']: tag['value'] for tag in cluster_tags}
        resources.append({
            'ResourceType': 'ECS Cluster',
            'ResourceArn': cluster_arn,
            'ResourceName': cluster_arn.split('/')[-1],
            'Tags': fiserv_tags
        })

    # Fetch DynamoDB tables
    dynamodb_tables = paginate_boto3_results(dynamodb_client, 'list_tables', 'TableNames')
    for table_name in dynamodb_tables:
        table_arn = f"arn:aws:dynamodb:{region}:{account_number}:table/{table_name}"
        tags = get_dynamodb_tags(table_arn, dynamodb_client)
        resources.append({
            'ResourceType': 'DynamoDB Table',
            'ResourceArn': table_arn,
            'ResourceName': table_name,
            'Tags': tags
        })

    # Fetch SNS topics
    sns_topics = paginate_boto3_results(sns_client, 'list_topics', 'Topics')
    for topic in sns_topics:
        topic_arn = topic['TopicArn']
        tags = get_sns_tags(topic_arn, sns_client)
        resources.append({
            'ResourceType': 'SNS Topic',
            'ResourceArn': topic_arn,
            'ResourceName': topic_arn.split(':')[-1],
            'Tags': tags
        })

    # Fetch SQS queues
    sqs_queues = paginate_boto3_results(sqs_client, 'list_queues', 'QueueUrls')
    for queue_url in sqs_queues:
        tags = get_sqs_tags(queue_url, sqs_client)
        resources.append({
            'ResourceType': 'SQS Queue',
            'ResourceArn': queue_url,
            'ResourceName': queue_url.split('/')[-1],
            'Tags': tags
        })

    # Fetch Redshift clusters
    redshift_clusters = paginate_boto3_results(redshift_client, 'describe_clusters', 'Clusters')
    for cluster in redshift_clusters:
        cluster_arn = f"arn:aws:redshift:{region}:{account_number}:cluster/{cluster['ClusterIdentifier']}"
        tags = get_redshift_tags(cluster_arn, redshift_client)
        resources.append({
            'ResourceType': 'Redshift Cluster',
            'ResourceArn': cluster_arn,
            'ResourceName': cluster['ClusterIdentifier'],
            'Tags': tags
        })

    # Fetch DMS replication tasks
    dms_tasks = paginate_boto3_results(dms_client, 'describe_replication_tasks', 'ReplicationTasks')
    for task in dms_tasks:
        task_arn = task['ReplicationTaskArn']
        tags = get_dms_tags(task_arn, dms_client)
        resources.append({
            'ResourceType': 'DMS Replication Task',
            'ResourceArn': task_arn,
            'ResourceName': task['ReplicationTaskIdentifier'],
            'Tags': tags
        })

    # Fetch SecretsManager secrets
    secrets = paginate_boto3_results(secretsmanager_client, 'list_secrets', 'SecretList')
    for secret in secrets:
        secret_arn = secret['ARN']
        tags = get_secretsmanager_tags(secret_arn, secretsmanager_client)
        resources.append({
            'ResourceType': 'SecretsManager Secret',
            'ResourceArn': secret_arn,
            'ResourceName': secret['Name'],
            'Tags': tags
        })

    # Fetch ElastiCache clusters
    elasticache_clusters = paginate_boto3_results(elasticache_client, 'describe_cache_clusters', 'CacheClusters')
    for cluster in elasticache_clusters:
        cluster_arn = f"arn:aws:elasticache:{region}:{account_number}:cluster:{cluster['CacheClusterId']}"
        tags = get_elasticache_tags(cluster_arn, elasticache_client)
        resources.append({
            'ResourceType': 'ElastiCache Cluster',
            'ResourceArn': cluster_arn,
            'ResourceName': cluster['CacheClusterId'],
            'Tags': tags
        })

    # Fetch Elasticsearch domains
    try:
        es_domains = es_client.list_domain_names().get('DomainNames', [])
        for domain in es_domains:
            domain_name = domain['DomainName']
            domain_arn = f"arn:aws:es:{region}:{account_number}:domain/{domain_name}"
            tags = get_es_tags(domain_arn, es_client)
            resources.append({
                'ResourceType': 'Elasticsearch Domain',
                'ResourceArn': domain_arn,
                'ResourceName': domain_name,
                'Tags': tags
            })
    except ClientError as e:
        print(f"Error fetching Elasticsearch domains: {e}")

    # Fetch Elastic Beanstalk applications
    try:
        ebs_apps = elasticbeanstalk_client.describe_applications().get('Applications', [])
        for app in ebs_apps:
            app_name = app['ApplicationName']
            tags = get_ebs_tags(app_name, elasticbeanstalk_client)
            resources.append({
                'ResourceType': 'Elastic Beanstalk Application',
                'ResourceArn': f"arn:aws:elasticbeanstalk:{region}:{account_number}:application/{app_name}",
                'ResourceName': app_name,
                'Tags': tags
            })
    except ClientError as e:
        print(f"Error fetching Elastic Beanstalk applications: {e}")

    # Fetch S3 buckets
    try:
        s3_buckets = s3_client.list_buckets().get('Buckets', [])
        for bucket in s3_buckets:
            bucket_name = bucket['Name']
            if bucket_name not in global_resources['S3']:
                global_resources['S3'].add(bucket_name)
                tags = get_s3_tags(bucket_name, s3_client)
                resources.append({
                    'ResourceType': 'S3 Bucket',
                    'ResourceArn': f"arn:aws:s3:::{bucket_name}",
                    'ResourceName': bucket_name,
                    'Tags': tags
                })
    except ClientError as e:
        print(f"Error fetching S3 buckets: {e}")

    # Fetch ECR repositories
    ecr_repositories = paginate_boto3_results(ecr_client, 'describe_repositories', 'repositories')
    for repo in ecr_repositories:
        repo_arn = repo['repositoryArn']
        tags = get_ecr_tags(repo_arn, ecr_client)
        resources.append({
            'ResourceType': 'ECR Repository',
            'ResourceArn': repo_arn,
            'ResourceName': repo['repositoryName'],
            'Tags': tags
        })

    # Fetch Route 53 hosted zones
    route53_zones = paginate_boto3_results(route53_client, 'list_hosted_zones', 'HostedZones')
    for zone in route53_zones:
        zone_id = zone['Id'].split('/')[-1]
        tags = get_route53_tags(zone_id, route53_client)
        resources.append({
            'ResourceType': 'Route 53 Hosted Zone',
            'ResourceArn': f"arn:aws:route53:::hostedzone/{zone_id}",
            'ResourceName': zone['Name'],
            'Tags': tags
        })

csv_headers = ['Resource Type', 'Resource ARN', 'Region', 'Resource Name', 'Account Number'] + fiserv_tag_keys

with open('all_resources.csv', 'w', newline='') as csvfile:
    writer = csv.writer(csvfile)
    writer.writerow(csv_headers)

    for resource in resources:
        resource_type = resource['ResourceType']
        resource_arn = resource['ResourceArn']
        resource_name = resource['ResourceName']
        tags = resource['Tags']
        fiserv_tags = [tags.get(tag, '') for tag in fiserv_tag_keys]

        row_data = [resource_type, resource_arn, region, resource_name, account_number] + fiserv_tags
        writer.writerow(row_data)



























import boto3
import csv
from botocore.exceptions import ClientError

# List of regions to check
regions = ['us-east-1', 'us-west-1']  # Add more regions as needed

# Initialize global resource tracking
global_resources = {
    'S3': set()
}

def get_client(service, region=None):
    return boto3.client(service, region_name=region, verify=False) if region else boto3.client(service, verify=False)

def get_s3_bucket_location(bucket_name, s3_client):
    try:
        response = s3_client.get_bucket_location(Bucket=bucket_name)
        location = response.get('LocationConstraint', '')
        return location if location else 'us-east-1'
    except ClientError as e:
        print(f"Error fetching location for S3 bucket {bucket_name}: {e}")
        return 'Unknown'

def get_s3_tags(bucket_name, s3_client):
    try:
        response = s3_client.get_bucket_tagging(Bucket=bucket_name)
        return {tag['Key']: tag['Value'] for tag in response.get('TagSet', [])}
    except ClientError as e:
        if e.response['Error']['Code'] == 'NoSuchTagSet':
            return {}
        else:
            print(f"Error fetching tags for S3 bucket {bucket_name}: {e}")
            return {}

def get_dynamodb_tags(table_arn, dynamodb_client):
    try:
        response = dynamodb_client.list_tags_of_resource(ResourceArn=table_arn)
        return {tag['Key']: tag['Value'] for tag in response.get('Tags', [])}
    except ClientError as e:
        print(f"Error fetching tags for DynamoDB table {table_arn}: {e}")
        return {}

def get_sns_tags(topic_arn, sns_client):
    try:
        response = sns_client.list_tags_for_resource(ResourceArn=topic_arn)
        return {tag['Key']: tag['Value'] for tag in response.get('Tags', [])}
    except ClientError as e:
        print(f"Error fetching tags for SNS topic {topic_arn}: {e}")
        return {}

def get_sqs_tags(queue_url, sqs_client):
    try:
        response = sqs_client.list_queue_tags(QueueUrl=queue_url)
        return {tag['Key']: tag['Value'] for tag in response.get('Tags', [])}
    except ClientError as e:
        print(f"Error fetching tags for SQS queue {queue_url}: {e}")
        return {}

def get_redshift_tags(cluster_arn, redshift_client):
    try:
        response = redshift_client.list_tags_for_resource(ResourceName=cluster_arn)
        return {tag['Key']: tag['Value'] for tag in response.get('Tags', [])}
    except ClientError as e:
        print(f"Error fetching tags for Redshift cluster {cluster_arn}: {e}")
        return {}

def get_dms_tags(task_arn, dms_client):
    try:
        response = dms_client.list_tags_for_resource(ResourceArn=task_arn)
        return {tag['Key']: tag['Value'] for tag in response.get('Tags', [])}
    except ClientError as e:
        print(f"Error fetching tags for DMS replication task {task_arn}: {e}")
        return {}

def get_secretsmanager_tags(secret_arn, secretsmanager_client):
    try:
        response = secretsmanager_client.list_secret_version_ids(SecretId=secret_arn)
        return {tag['Key']: tag['Value'] for tag in response.get('Tags', [])}
    except ClientError as e:
        print(f"Error fetching tags for SecretsManager secret {secret_arn}: {e}")
        return {}

def get_elasticache_tags(cluster_arn, elasticache_client):
    try:
        response = elasticache_client.list_tags_for_resource(ResourceName=cluster_arn)
        return {tag['Key']: tag['Value'] for tag in response.get('Tags', [])}
    except ClientError as e:
        print(f"Error fetching tags for ElastiCache cluster {cluster_arn}: {e}")
        return {}

def get_es_tags(domain_arn, es_client):
    try:
        response = es_client.list_tags(arn=domain_arn)
        return {tag['Key']: tag['Value'] for tag in response.get('Tags', [])}
    except ClientError as e:
        print(f"Error fetching tags for Elasticsearch domain {domain_arn}: {e}")
        return {}

def get_ebs_tags(app_name, elasticbeanstalk_client):
    try:
        response = elasticbeanstalk_client.list_tags_for_resource(ResourceArn=f"arn:aws:elasticbeanstalk:{region}:{account_number}:application/{app_name}")
        return {tag['Key']: tag['Value'] for tag in response.get('Tags', [])}
    except ClientError as e:
        print(f"Error fetching tags for Elastic Beanstalk application {app_name}: {e}")
        return {}

def get_ecr_tags(repo_arn, ecr_client):
    try:
        response = ecr_client.list_tags_for_resource(resourceArn=repo_arn)
        return {tag['Key']: tag['Value'] for tag in response.get('Tags', [])}
    except ClientError as e:
        print(f"Error fetching tags for ECR repository {repo_arn}: {e}")
        return {}

def get_route53_tags(zone_id, route53_client):
    try:
        response = route53_client.list_tags_for_resource(ResourceType='hostedzone', ResourceId=zone_id)
        return {tag['Key']: tag['Value'] for tag in response.get('Tags', [])}
    except ClientError as e:
        print(f"Error fetching tags for Route 53 hosted zone {zone_id}: {e}")
        return {}

def paginate_boto3_results(client, method, key):
    results = []
    try:
        paginator = client.get_paginator(method)
        for page in paginator.paginate():
            results.extend(page.get(key, []))
    except ClientError as e:
        print(f"Error paginating results for {method}: {e}")
    return results

resources = []

# Loop through regions
for region in regions:
    print(f"Fetching resources in region: {region}")

    # Initialize clients
    ec2_client = get_client('ec2', region)
    s3_client = get_client('s3', region)
    dynamodb_client = get_client('dynamodb', region)
    sns_client = get_client('sns', region)
    sqs_client = get_client('sqs', region)
    redshift_client = get_client('redshift', region)
    dms_client = get_client('dms', region)
    secretsmanager_client = get_client('secretsmanager', region)
    elasticache_client = get_client('elasticache', region)
    es_client = get_client('es', region)
    elasticbeanstalk_client = get_client('elasticbeanstalk', region)
    ecr_client = get_client('ecr', region)
    route53_client = get_client('route53', region)
    elb_client = get_client('elb', region)
    elbv2_client = get_client('elbv2', region)
    ecs_client = get_client('ecs', region)

    # Fetch EC2 instances
    ec2_instances = paginate_boto3_results(ec2_client, 'describe_instances', 'Reservations')
    for reservation in ec2_instances:
        for instance in reservation['Instances']:
            tags = get_ec2_tags(instance['InstanceId'], ec2_client)
            resources.append({
                'ResourceType': 'EC2 Instance',
                'ResourceArn': f"arn:aws:ec2:{region}:{account_number}:instance/{instance['InstanceId']}",
                'ResourceName': next((tag['Value'] for tag in tags if tag['Key'] == 'Name'), 'N/A'),
                'Tags': {tag['Key']: tag['Value'] for tag in tags}
            })

    # Fetch RDS DB instances
    rds_instances = paginate_boto3_results(rds_client, 'describe_db_instances', 'DBInstances')
    for instance in rds_instances:
        tags = get_rds_tags(instance['DBInstanceArn'], rds_client)
        resources.append({
            'ResourceType': 'RDS DB Instance',
            'ResourceArn': instance['DBInstanceArn'],
            'ResourceName': instance['DBInstanceIdentifier'],
            'Tags': tags
        })

    # Fetch RDS DB clusters
    rds_clusters = paginate_boto3_results(rds_client, 'describe_db_clusters', 'DBClusters')
    for cluster in rds_clusters:
        tags = get_rds_tags(cluster['DBClusterArn'], rds_client)
        resources.append({
            'ResourceType': 'RDS DB Cluster',
            'ResourceArn': cluster['DBClusterArn'],
            'ResourceName': cluster['DBClusterIdentifier'],
            'Tags': tags
        })

    # Fetch Lambda functions
    lambda_functions = paginate_boto3_results(lambda_client, 'list_functions', 'Functions')
    for function in lambda_functions:
        tags = get_lambda_tags(function['FunctionArn'], lambda_client)
        resources.append({
            'ResourceType': 'Lambda Function',
            'ResourceArn': function['FunctionArn'],
            'ResourceName': function['FunctionName'],
            'Tags': tags
        })

    # Fetch Classic Load Balancers
    elbs = paginate_boto3_results(elb_client, 'describe_load_balancers', 'LoadBalancerDescriptions')
    for elb in elbs:
        tags = get_elb_tags(elb['LoadBalancerName'], elb_client)
        resources.append({
            'ResourceType': 'Classic Load Balancer',
            'ResourceArn': f"arn:aws:elasticloadbalancing:{region}:{account_number}:loadbalancer/{elb['LoadBalancerName']}",
            'ResourceName': elb['LoadBalancerName'],
            'Tags': tags
        })

    # Fetch Application Load Balancers
    albs = paginate_boto3_results(elbv2_client, 'describe_load_balancers', 'LoadBalancers')
    for alb in albs:
        tags = get_alb_tags(alb['LoadBalancerArn'], elbv2_client)
        resources.append({
            'ResourceType': 'Application Load Balancer',
            'ResourceArn': alb['LoadBalancerArn'],
            'ResourceName': alb['LoadBalancerName'],
            'Tags': tags
        })

    # Fetch ECS clusters
    ecs_clusters = paginate_boto3_results(ecs_client, 'list_clusters', 'clusterArns')
    for cluster_arn in ecs_clusters:
        tags = get_ecs_tags(cluster_arn, ecs_client)
        resources.append({
            'ResourceType': 'ECS Cluster',
            'ResourceArn': cluster_arn,
            'ResourceName': cluster_arn.split('/')[-1],
            'Tags': tags
        })

    # Fetch DynamoDB tables
    dynamodb_tables = paginate_boto3_results(dynamodb_client, 'list_tables', 'TableNames')
    for table_name in dynamodb_tables:
        table_arn = dynamodb_client.describe_table(TableName=table_name)['Table']['TableArn']
        tags = get_dynamodb_tags(table_arn, dynamodb_client)
        resources.append({
            'ResourceType': 'DynamoDB Table',
            'ResourceArn': table_arn,
            'ResourceName': table_name,
            'Tags': tags
        })

    # Fetch SNS topics
    sns_topics = paginate_boto3_results(sns_client, 'list_topics', 'Topics')
    for topic_arn in sns_topics:
        tags = get_sns_tags(topic_arn, sns_client)
        resources.append({
            'ResourceType': 'SNS Topic',
            'ResourceArn': topic_arn,
            'ResourceName': topic_arn.split(':')[-1],
            'Tags': tags
        })

    # Fetch SQS queues
    sqs_queues = paginate_boto3_results(sqs_client, 'list_queues', 'QueueUrls')
    for queue_url in sqs_queues:
        tags = get_sqs_tags(queue_url, sqs_client)
        resources.append({
            'ResourceType': 'SQS Queue',
            'ResourceArn': f"arn:aws:sqs:{region}:{account_number}:{queue_url.split('/')[-1]}",
            'ResourceName': queue_url.split('/')[-1],
            'Tags': tags
        })

    # Fetch Redshift clusters
    redshift_clusters = paginate_boto3_results(redshift_client, 'describe_clusters', 'Clusters')
    for cluster in redshift_clusters:
        tags = get_redshift_tags(cluster['ClusterArn'], redshift_client)
        resources.append({
            'ResourceType': 'Redshift Cluster',
            'ResourceArn': cluster['ClusterArn'],
            'ResourceName': cluster['ClusterIdentifier'],
            'Tags': tags
        })

    # Fetch DMS replication tasks
    dms_tasks = paginate_boto3_results(dms_client, 'describe_replication_tasks', 'ReplicationTasks')
    for task in dms_tasks:
        tags = get_dms_tags(task['ReplicationTaskArn'], dms_client)
        resources.append({
            'ResourceType': 'DMS Replication Task',
            'ResourceArn': task['ReplicationTaskArn'],
            'ResourceName': task['ReplicationTaskIdentifier'],
            'Tags': tags
        })

    # Fetch SecretsManager secrets
    secrets = paginate_boto3_results(secretsmanager_client, 'list_secrets', 'SecretList')
    for secret in secrets:
        tags = get_secretsmanager_tags(secret['ARN'], secretsmanager_client)
        resources.append({
            'ResourceType': 'SecretsManager Secret',
            'ResourceArn': secret['ARN'],
            'ResourceName': secret['Name'],
            'Tags': tags
        })

    # Fetch ElastiCache clusters
    elasticache_clusters = paginate_boto3_results(elasticache_client, 'describe_cache_clusters', 'CacheClusters')
    for cluster in elasticache_clusters:
        tags = get_elasticache_tags(cluster['ARN'], elasticache_client)
        resources.append({
            'ResourceType': 'ElastiCache Cluster',
            'ResourceArn': cluster['ARN'],
            'ResourceName': cluster['CacheClusterId'],
            'Tags': tags
        })

    # Fetch Elasticsearch domains
    es_domains = es_client.list_domain_names()['DomainNames']
    for domain in es_domains:
        domain_arn = f"arn:aws:es:{region}:{account_number}:domain/{domain['DomainName']}"
        tags = get_es_tags(domain_arn, es_client)
        resources.append({
            'ResourceType': 'Elasticsearch Domain',
            'ResourceArn': domain_arn,
            'ResourceName': domain['DomainName'],
            'Tags': tags
        })

    # Fetch Elastic Beanstalk applications
    ebs_apps = paginate_boto3_results(elasticbeanstalk_client, 'describe_applications', 'Applications')
    for app in ebs_apps:
        tags = get_ebs_tags(app['ApplicationName'], elasticbeanstalk_client)
        resources.append({
            'ResourceType': 'Elastic Beanstalk Application',
            'ResourceArn': f"arn:aws:elasticbeanstalk:{region}:{account_number}:application/{app['ApplicationName']}",
            'ResourceName': app['ApplicationName'],
            'Tags': tags
        })

    # Fetch ECR repositories
    ecr_repos = paginate_boto3_results(ecr_client, 'describe_repositories', 'repositories')
    for repo in ecr_repos:
        tags = get_ecr_tags(repo['repositoryArn'], ecr_client)
        resources.append({
            'ResourceType': 'ECR Repository',
            'ResourceArn': repo['repositoryArn'],
            'ResourceName': repo['repositoryName'],
            'Tags': tags
        })

    # Fetch Route 53 hosted zones
    route53_zones = paginate_boto3_results(route53_client, 'list_hosted_zones', 'HostedZones')
    for zone in route53_zones:
        tags = get_route53_tags(zone['Id'], route53_client)
        resources.append({
            'ResourceType': 'Route 53 Hosted Zone',
            'ResourceArn': f"arn:aws:route53:::hostedzone/{zone['Id'].split('/')[-1]}",
            'ResourceName': zone['Name'],
            'Tags': tags
        })

    # Write to CSV
    csv_headers = ['Resource Type', 'Resource ARN', 'Region', 'Resource Name', 'Account Number'] + fiserv_tag_keys
    with open('all_resources.csv', 'w', newline='') as csvfile:
        writer = csv.writer(csvfile)
        writer.writerow(csv_headers)

        for resource in resources:
            resource_type = resource['ResourceType']
            resource_arn = resource['ResourceArn']
            region = resource.get('Region', 'N/A')
            resource_name = resource['ResourceName']
            tags = resource['Tags']
            fiserv_tags = [tags.get(tag, '') for tag in fiserv_tag_keys]

            row_data = [resource_type, resource_arn, region, resource_name, account_number] + fiserv_tags
            writer.writerow(row_data)































import boto3
import csv
from botocore.exceptions import ClientError

region = 'us-east-1'  # Specify the region here

# Configure AWS clients with no SSL verification
ec2_client = boto3.client('ec2', region_name=region, verify=False)
rds_client = boto3.client('rds', region_name=region, verify=False)
lambda_client = boto3.client('lambda', region_name=region, verify=False)
elb_client = boto3.client('elb', region_name=region, verify=False)
elbv2_client = boto3.client('elbv2', region_name=region, verify=False)
ecs_client = boto3.client('ecs', region_name=region, verify=False)
dynamodb_client = boto3.client('dynamodb', region_name=region, verify=False)
sns_client = boto3.client('sns', region_name=region, verify=False)
sqs_client = boto3.client('sqs', region_name=region, verify=False)
redshift_client = boto3.client('redshift', region_name=region, verify=False)
dms_client = boto3.client('dms', region_name=region, verify=False)
secretsmanager_client = boto3.client('secretsmanager', region_name=region, verify=False)
elasticache_client = boto3.client('elasticache', region_name=region, verify=False)
es_client = boto3.client('es', region_name=region, verify=False)
elasticbeanstalk_client = boto3.client('elasticbeanstalk', region_name=region, verify=False)
s3_client = boto3.client('s3', region_name=region, verify=False)
ecr_client = boto3.client('ecr', region_name=region, verify=False)
route53_client = boto3.client('route53', region_name=region, verify=False)

sts_client = boto3.client('sts')
account_number = sts_client.get_caller_identity()['Account']

def paginate_boto3_results(client, method, key):
    results = []
    paginator = client.get_paginator(method)
    for page in paginator.paginate():
        results.extend(page.get(key, []))
    return results

def get_ec2_tags(instance_id):
    response = ec2_client.describe_tags(
        Filters=[
            {'Name': 'resource-id', 'Values': [instance_id]}
        ]
    )
    return {tag['Key']: tag['Value'] for tag in response.get('Tags', [])}

def get_rds_tags(resource_arn):
    response = rds_client.list_tags_for_resource(ResourceName=resource_arn)
    return {tag['Key']: tag['Value'] for tag in response.get('TagList', [])}

def get_lambda_tags(function_arn):
    response = lambda_client.list_tags(Resource=function_arn)
    return response.get('Tags', {})

def get_elb_tags(load_balancer_name):
    response = elb_client.describe_tags(
        LoadBalancerNames=[load_balancer_name]
    )
    tags = {}
    if response['TagDescriptions']:
        for tag in response['TagDescriptions'][0]['Tags']:
            tags[tag['Key']] = tag['Value']
    return tags

def get_elbv2_tags(load_balancer_arn):
    response = elbv2_client.describe_tags(
        ResourceArns=[load_balancer_arn]
    )
    tags = {}
    if response['TagDescriptions']:
        for tag in response['TagDescriptions'][0]['Tags']:
            tags[tag['Key']] = tag['Value']
    return tags

def get_dynamodb_tags(table_arn):
    response = dynamodb_client.list_tags_of_resource(ResourceArn=table_arn)
    return {tag['Key']: tag['Value'] for tag in response.get('Tags', [])}

def get_sns_tags(topic_arn):
    response = sns_client.list_tags_for_resource(ResourceArn=topic_arn)
    return {tag['Key']: tag['Value'] for tag in response.get('Tags', [])}

def get_sqs_tags(queue_url):
    response = sqs_client.list_queue_tags(QueueUrl=queue_url)
    return response.get('Tags', {})

def get_redshift_tags(cluster_arn):
    response = redshift_client.describe_tags(ResourceName=cluster_arn)
    return {tag['Key']: tag['Value'] for tag in response.get('TaggedResources', [])}

def get_dms_tags(resource_arn):
    response = dms_client.list_tags_for_resource(ResourceArn=resource_arn)
    return {tag['Key']: tag['Value'] for tag in response.get('TagList', [])}

def get_secretsmanager_tags(secret_arn):
    response = secretsmanager_client.describe_secret(SecretId=secret_arn)
    return {tag['Key']: tag['Value'] for tag in response.get('Tags', [])}

def get_elasticache_tags(resource_arn):
    response = elasticache_client.list_tags_for_resource(ResourceName=resource_arn)
    return {tag['Key']: tag['Value'] for tag in response.get('TagList', [])}

def get_es_tags(domain_arn):
    response = es_client.list_tags(ARN=domain_arn)
    return {tag['Key']: tag['Value'] for tag in response.get('TagList', [])}

def get_ebs_tags(app_name):
    response = elasticbeanstalk_client.list_tags_for_resource(
        ResourceArn=f"arn:aws:elasticbeanstalk:{region}:{account_number}:application/{app_name}"
    )
    return {tag['Key']: tag['Value'] for tag in response.get('ResourceTags', [])}

def get_s3_tags(bucket_name):
    try:
        response = s3_client.get_bucket_tagging(Bucket=bucket_name)
        return {tag['Key']: tag['Value'] for tag in response.get('TagSet', [])}
    except ClientError as e:
        if e.response['Error']['Code'] == 'NoSuchTagSet':
            return {}
        else:
            print(f"Error fetching tags for S3 bucket {bucket_name}: {e}")
            return {}

def get_ecr_tags(repository_arn):
    response = ecr_client.list_tags_for_resource(resourceArn=repository_arn)
    return {tag['Key']: tag['Value'] for tag in response.get('tags', [])}

def get_route53_tags(hosted_zone_id):
    response = route53_client.list_tags_for_resource(ResourceType='hostedzone', ResourceId=hosted_zone_id)
    return {tag['Key']: tag['Value'] for tag in response.get('Tags', [])}

# Specify the 'fiserv' tag keys
fiserv_tag_keys = ['fiserv::apm', 'fiserv::app', 'fiserv::description', 'fiserv::owner', 'fiserv::group', 'fiserv::stage', 'fiserv::environment']

resources = []

# Fetch EC2 instances
ec2_instances = paginate_boto3_results(ec2_client, 'describe_instances', 'Reservations')
for reservation in ec2_instances:
    for instance in reservation['Instances']:
        tags = get_ec2_tags(instance['InstanceId'])
        resources.append({
            'ResourceType': 'EC2 Instance',
            'ResourceArn': f"arn:aws:ec2:{region}:{account_number}:instance/{instance['InstanceId']}",
            'ResourceName': tags.get('Name', 'N/A'),
            'Tags': tags
        })

# Fetch RDS DB instances
rds_instances = paginate_boto3_results(rds_client, 'describe_db_instances', 'DBInstances')
for instance in rds_instances:
    tags = get_rds_tags(instance['DBInstanceArn'])
    resources.append({
        'ResourceType': 'RDS DB Instance',
        'ResourceArn': instance['DBInstanceArn'],
        'ResourceName': instance['DBInstanceIdentifier'],
        'Tags': tags
    })

# Fetch RDS DB clusters
rds_clusters = paginate_boto3_results(rds_client, 'describe_db_clusters', 'DBClusters')
for cluster in rds_clusters:
    tags = get_rds_tags(cluster['DBClusterArn'])
    resources.append({
        'ResourceType': 'RDS DB Cluster',
        'ResourceArn': cluster['DBClusterArn'],
        'ResourceName': cluster['DBClusterIdentifier'],
        'Tags': tags
    })

# Fetch Lambda functions
lambda_functions = paginate_boto3_results(lambda_client, 'list_functions', 'Functions')
for function in lambda_functions:
    tags = get_lambda_tags(function['FunctionArn'])
    resources.append({
        'ResourceType': 'Lambda Function',
        'ResourceArn': function['FunctionArn'],
        'ResourceName': function['FunctionName'],
        'Tags': tags
    })

# Fetch Classic Load Balancers
elbs = paginate_boto3_results(elb_client, 'describe_load_balancers', 'LoadBalancerDescriptions')
for elb in elbs:
    tags = get_elb_tags(elb['LoadBalancerName'])
    resources.append({
        'ResourceType': 'Classic Load Balancer',
        'ResourceArn': f"arn:aws:elasticloadbalancing:{region}:{account_number}:loadbalancer/{elb['LoadBalancerName']}",
        'ResourceName': elb['LoadBalancerName'],
        'Tags': tags
    })

# Fetch Application Load Balancers
albs = paginate_boto3_results(elbv2_client, 'describe_load_balancers', 'LoadBalancers')
for alb in albs:
    tags = get_elbv2_tags(alb['LoadBalancerArn'])
    resources.append({
        'ResourceType': 'Application Load Balancer',
        'ResourceArn': alb['LoadBalancerArn'],
        'ResourceName': alb['LoadBalancerName'],
        'Tags': tags
    })

# Fetch ECS clusters
ecs_clusters = paginate_boto3_results(ecs_client, 'list_clusters', 'clusterArns')
for cluster_arn in ecs_clusters:
    tag_response = ecs_client.list_tags_for_resource(resourceArn=cluster_arn)
    cluster_tags = tag_response.get('tags', [])
    fiserv_tags = {tag['key']: tag['value'] for tag in cluster_tags}
    resources.append({
        'ResourceType': 'ECS Cluster',
        'ResourceArn': cluster_arn,
        'ResourceName': cluster_arn.split('/')[-1],
        'Tags': fiserv_tags
    })

# Fetch DynamoDB tables
dynamodb_tables = paginate_boto3_results(dynamodb_client, 'list_tables', 'TableNames')
for table_name in dynamodb_tables:
    table_arn = f"arn:aws:dynamodb:{region}:{account_number}:table/{table_name}"
    tags = get_dynamodb_tags(table_arn)
    resources.append({
        'ResourceType': 'DynamoDB Table',
        'ResourceArn': table_arn,
        'ResourceName': table_name,
        'Tags': tags
    })

# Fetch SNS topics
sns_topics = paginate_boto3_results(sns_client, 'list_topics', 'Topics')
for topic in sns_topics:
    topic_arn = topic['TopicArn']
    tags = get_sns_tags(topic_arn)
    resources.append({
        'ResourceType': 'SNS Topic',
        'ResourceArn': topic_arn,
        'ResourceName': topic_arn.split(':')[-1],
        'Tags': tags
    })

# Fetch SQS queues
sqs_queues = paginate_boto3_results(sqs_client, 'list_queues', 'QueueUrls')
for queue_url in sqs_queues:
    tags = get_sqs_tags(queue_url)
    resources.append({
        'ResourceType': 'SQS Queue',
        'ResourceArn': queue_url,
        'ResourceName': queue_url.split('/')[-1],
        'Tags': tags
    })

# Fetch Redshift clusters
redshift_clusters = paginate_boto3_results(redshift_client, 'describe_clusters', 'Clusters')
for cluster in redshift_clusters:
    cluster_arn = f"arn:aws:redshift:{region}:{account_number}:cluster/{cluster['ClusterIdentifier']}"
    tags = get_redshift_tags(cluster_arn)
    resources.append({
        'ResourceType': 'Redshift Cluster',
        'ResourceArn': cluster_arn,
        'ResourceName': cluster['ClusterIdentifier'],
        'Tags': tags
    })

# Fetch DMS replication tasks
dms_tasks = paginate_boto3_results(dms_client, 'describe_replication_tasks', 'ReplicationTasks')
for task in dms_tasks:
    task_arn = task['ReplicationTaskArn']
    tags = get_dms_tags(task_arn)
    resources.append({
        'ResourceType': 'DMS Replication Task',
        'ResourceArn': task_arn,
        'ResourceName': task['ReplicationTaskIdentifier'],
        'Tags': tags
    })

# Fetch SecretsManager secrets
secrets = paginate_boto3_results(secretsmanager_client, 'list_secrets', 'SecretList')
for secret in secrets:
    secret_arn = secret['ARN']
    tags = get_secretsmanager_tags(secret_arn)
    resources.append({
        'ResourceType': 'SecretsManager Secret',
        'ResourceArn': secret_arn,
        'ResourceName': secret['Name'],
        'Tags': tags
    })

# Fetch ElastiCache clusters
elasticache_clusters = paginate_boto3_results(elasticache_client, 'describe_cache_clusters', 'CacheClusters')
for cluster in elasticache_clusters:
    cluster_arn = f"arn:aws:elasticache:{region}:{account_number}:cluster:{cluster['CacheClusterId']}"
    tags = get_elasticache_tags(cluster_arn)
    resources.append({
        'ResourceType': 'ElastiCache Cluster',
        'ResourceArn': cluster_arn,
        'ResourceName': cluster['CacheClusterId'],
        'Tags': tags
    })

# Fetch Elasticsearch domains
try:
    es_domains = es_client.list_domain_names().get('DomainNames', [])
    for domain in es_domains:
        domain_name = domain['DomainName']
        domain_arn = f"arn:aws:es:{region}:{account_number}:domain/{domain_name}"
        tags = get_es_tags(domain_arn)
        resources.append({
            'ResourceType': 'Elasticsearch Domain',
            'ResourceArn': domain_arn,
            'ResourceName': domain_name,
            'Tags': tags
        })
except ClientError as e:
    print(f"Error fetching Elasticsearch domains: {e}")

# Fetch Elastic Beanstalk applications
try:
    ebs_apps = elasticbeanstalk_client.describe_applications().get('Applications', [])
    for app in ebs_apps:
        app_name = app['ApplicationName']
        tags = get_ebs_tags(app_name)
        resources.append({
            'ResourceType': 'Elastic Beanstalk Application',
            'ResourceArn': f"arn:aws:elasticbeanstalk:{region}:{account_number}:application/{app_name}",
            'ResourceName': app_name,
            'Tags': tags
        })
except ClientError as e:
    print(f"Error fetching Elastic Beanstalk applications: {e}")

# Fetch S3 buckets
try:
    s3_buckets = s3_client.list_buckets().get('Buckets', [])
    for bucket in s3_buckets:
        bucket_name = bucket['Name']
        tags = get_s3_tags(bucket_name)
        resources.append({
            'ResourceType': 'S3 Bucket',
            'ResourceArn': f"arn:aws:s3:::{bucket_name}",
            'ResourceName': bucket_name,
            'Tags': tags
        })
except ClientError as e:
    print(f"Error fetching S3 buckets: {e}")

# Fetch ECR repositories
ecr_repositories = paginate_boto3_results(ecr_client, 'describe_repositories', 'repositories')
for repo in ecr_repositories:
    repo_arn = repo['repositoryArn']
    tags = get_ecr_tags(repo_arn)
    resources.append({
        'ResourceType': 'ECR Repository',
        'ResourceArn': repo_arn,
        'ResourceName': repo['repositoryName'],
        'Tags': tags
    })

# Fetch Route 53 hosted zones
route53_zones = paginate_boto3_results(route53_client, 'list_hosted_zones', 'HostedZones')
for zone in route53_zones:
    zone_id = zone['Id'].split('/')[-1]
    tags = get_route53_tags(zone_id)
    resources.append({
        'ResourceType': 'Route 53 Hosted Zone',
        'ResourceArn': f"arn:aws:route53:::hostedzone/{zone_id}",
        'ResourceName': zone['Name'],
        'Tags': tags
    })

csv_headers = ['Resource Type', 'Resource ARN', 'Region', 'Resource Name', 'Account Number'] + fiserv_tag_keys

with open('all_resources.csv', 'w', newline='') as csvfile:
    writer = csv.writer(csvfile)
    writer.writerow(csv_headers)

    for resource in resources:
        resource_type = resource['ResourceType']
        resource_arn = resource['ResourceArn']
        resource_name = resource['ResourceName']
        tags = resource['Tags']
        fiserv_tags = [tags.get(tag, '') for tag in fiserv_tag_keys]

        row_data = [resource_type, resource_arn, region, resource_name, account_number] + fiserv_tags
        writer.writerow(row_data)


























import boto3
import csv
from botocore.exceptions import ClientError

regions = ['us-east-1', 'us-west-1', 'eu-central-1']  # List of regions
account_number = boto3.client('sts').get_caller_identity()['Account']

# Function to create clients for a given region
def create_clients(region):
    return {
        'ec2': boto3.client('ec2', region_name=region, verify=False),
        'rds': boto3.client('rds', region_name=region, verify=False),
        'lambda': boto3.client('lambda', region_name=region, verify=False),
        'elb': boto3.client('elb', region_name=region, verify=False),
        'elbv2': boto3.client('elbv2', region_name=region, verify=False),
        'ecs': boto3.client('ecs', region_name=region, verify=False),
        'dynamodb': boto3.client('dynamodb', region_name=region, verify=False),
        'sns': boto3.client('sns', region_name=region, verify=False),
        'sqs': boto3.client('sqs', region_name=region, verify=False),
        'redshift': boto3.client('redshift', region_name=region, verify=False),
        'dms': boto3.client('dms', region_name=region, verify=False),
        'secretsmanager': boto3.client('secretsmanager', region_name=region, verify=False),
        'elasticache': boto3.client('elasticache', region_name=region, verify=False),
        'es': boto3.client('es', region_name=region, verify=False),
        'elasticbeanstalk': boto3.client('elasticbeanstalk', region_name=region, verify=False),
        's3': boto3.client('s3', region_name=region, verify=False),
        'ecr': boto3.client('ecr', region_name=region, verify=False),
        'route53': boto3.client('route53', region_name=region, verify=False),
    }

def paginate_boto3_results(client, method, key):
    results = []
    paginator = client.get_paginator(method)
    for page in paginator.paginate():
        results.extend(page.get(key, []))
    return results

def get_tags(client, resource_type, arn):
    try:
        if resource_type == 's3':
            response = client.get_bucket_tagging(Bucket=arn)
            return {tag['Key']: tag['Value'] for tag in response.get('TagSet', [])}
        elif resource_type == 'ec2':
            response = client.describe_tags(Filters=[{'Name': 'resource-id', 'Values': [arn]}])
            return {tag['Key']: tag['Value'] for tag in response.get('Tags', [])}
        elif resource_type == 'rds':
            response = client.list_tags_for_resource(ResourceName=arn)
            return {tag['Key']: tag['Value'] for tag in response.get('TagList', [])}
        elif resource_type == 'lambda':
            response = client.list_tags(Resource=arn)
            return response.get('Tags', {})
        elif resource_type == 'elb':
            response = client.describe_tags(LoadBalancerNames=[arn])
            tags = {}
            if response['TagDescriptions']:
                for tag in response['TagDescriptions'][0]['Tags']:
                    tags[tag['Key']] = tag['Value']
            return tags
        elif resource_type == 'elbv2':
            response = client.describe_tags(ResourceArns=[arn])
            tags = {}
            if response['TagDescriptions']:
                for tag in response['TagDescriptions'][0]['Tags']:
                    tags[tag['Key']] = tag['Value']
            return tags
        elif resource_type == 'dynamodb':
            response = client.list_tags_of_resource(ResourceArn=arn)
            return {tag['Key']: tag['Value'] for tag in response.get('Tags', [])}
        elif resource_type == 'sns':
            response = client.list_tags_for_resource(ResourceArn=arn)
            return {tag['Key']: tag['Value'] for tag in response.get('Tags', [])}
        elif resource_type == 'sqs':
            response = client.list_queue_tags(QueueUrl=arn)
            return response.get('Tags', {})
        elif resource_type == 'redshift':
            response = client.describe_tags(ResourceName=arn)
            return {tag['Key']: tag['Value'] for tag in response.get('TaggedResources', [])}
        elif resource_type == 'dms':
            response = client.list_tags_for_resource(ResourceArn=arn)
            return {tag['Key']: tag['Value'] for tag in response.get('TagList', [])}
        elif resource_type == 'secretsmanager':
            response = client.describe_secret(SecretId=arn)
            return {tag['Key']: tag['Value'] for tag in response.get('Tags', [])}
        elif resource_type == 'elasticache':
            response = client.list_tags_for_resource(ResourceName=arn)
            return {tag['Key']: tag['Value'] for tag in response.get('TagList', [])}
        elif resource_type == 'es':
            response = client.list_tags(ARN=arn)
            return {tag['Key']: tag['Value'] for tag in response.get('TagList', [])}
        elif resource_type == 'elasticbeanstalk':
            response = client.list_tags_for_resource(ResourceArn=arn)
            return {tag['Key']: tag['Value'] for tag in response.get('ResourceTags', [])}
        elif resource_type == 'ecr':
            response = client.list_tags_for_resource(resourceArn=arn)
            return {tag['Key']: tag['Value'] for tag in response.get('tags', [])}
        elif resource_type == 'route53':
            response = client.list_tags_for_resource(ResourceType='hostedzone', ResourceId=arn)
            return {tag['Key']: tag['Value'] for tag in response.get('Tags', [])}
    except ClientError as e:
        print(f"Error fetching tags for {resource_type} {arn}: {e}")
        return {}

# Specify the 'fiserv' tag keys
fiserv_tag_keys = ['fiserv::apm', 'fiserv::app', 'fiserv::description', 'fiserv::owner', 'fiserv::group', 'fiserv::stage', 'fiserv::environment']

resources = []
processed_s3_buckets = set()

for region in regions:
    print(f"Processing region: {region}")
    clients = create_clients(region)

    # Fetch EC2 instances
    ec2_instances = paginate_boto3_results(clients['ec2'], 'describe_instances', 'Reservations')
    for reservation in ec2_instances:
        for instance in reservation['Instances']:
            tags = get_tags(clients['ec2'], 'ec2', instance['InstanceId'])
            resources.append({
                'ResourceType': 'EC2 Instance',
                'ResourceArn': f"arn:aws:ec2:{region}:{account_number}:instance/{instance['InstanceId']}",
                'ResourceName': tags.get('Name', 'N/A'),
                'Tags': tags
            })

    # Fetch RDS DB instances
    rds_instances = paginate_boto3_results(clients['rds'], 'describe_db_instances', 'DBInstances')
    for instance in rds_instances:
        tags = get_tags(clients['rds'], 'rds', instance['DBInstanceArn'])
        resources.append({
            'ResourceType': 'RDS DB Instance',
            'ResourceArn': instance['DBInstanceArn'],
            'ResourceName': instance['DBInstanceIdentifier'],
            'Tags': tags
        })

    # Fetch RDS DB clusters
    rds_clusters = paginate_boto3_results(clients['rds'], 'describe_db_clusters', 'DBClusters')
    for cluster in rds_clusters:
        tags = get_tags(clients['rds'], 'rds', cluster['DBClusterArn'])
        resources.append({
            'ResourceType': 'RDS DB Cluster',
            'ResourceArn': cluster['DBClusterArn'],
            'ResourceName': cluster['DBClusterIdentifier'],
            'Tags': tags
        })

    # Fetch Lambda functions
    lambda_functions = paginate_boto3_results(clients['lambda'], 'list_functions', 'Functions')
    for function in lambda_functions:
        tags = get_tags(clients['lambda'], 'lambda', function['FunctionArn'])
        resources.append({
            'ResourceType': 'Lambda Function',
            'ResourceArn': function['FunctionArn'],
            'ResourceName': function['FunctionName'],
            'Tags': tags
        })

    # Fetch Classic Load Balancers
    elbs = paginate_boto3_results(clients['elb'], 'describe_load_balancers', 'LoadBalancerDescriptions')
    for elb in elbs:
        tags = get_tags(clients['elb'], 'elb', elb['LoadBalancerName'])
        resources.append({
            'ResourceType': 'Classic Load Balancer',
            'ResourceArn': f"arn:aws:elasticloadbalancing:{region}:{account_number}:loadbalancer/{elb['LoadBalancerName']}",
            'ResourceName': elb['LoadBalancerName'],
            'Tags': tags
        })

    # Fetch Application Load Balancers
    albs = paginate_boto3_results(clients['elbv2'], 'describe_load_balancers', 'LoadBalancers')
    for alb in albs:
        tags = get_tags(clients['elbv2'], 'elbv2', alb['LoadBalancerArn'])
        resources.append({
            'ResourceType': 'Application Load Balancer',
            'ResourceArn': alb['LoadBalancerArn'],
            'ResourceName': alb['LoadBalancerName'],
            'Tags': tags
        })

    # Fetch ECS clusters
    ecs_clusters = paginate_boto3_results(clients['ecs'], 'list_clusters', 'clusterArns')
    for cluster_arn in ecs_clusters:
        tag_response = clients['ecs'].list_tags_for_resource(resourceArn=cluster_arn)
        cluster_tags = tag_response.get('tags', [])
        fiserv_tags = {tag['key']: tag['value'] for tag in cluster_tags}
        resources.append({
            'ResourceType': 'ECS Cluster',
            'ResourceArn': cluster_arn,
            'ResourceName': cluster_arn.split('/')[-1],
            'Tags': fiserv_tags
        })

    # Fetch DynamoDB tables
    dynamodb_tables = paginate_boto3_results(clients['dynamodb'], 'list_tables', 'TableNames')
    for table_name in dynamodb_tables:
        table_arn = f"arn:aws:dynamodb:{region}:{account_number}:table/{table_name}"
        tags = get_tags(clients['dynamodb'], 'dynamodb', table_arn)
        resources.append({
            'ResourceType': 'DynamoDB Table',
            'ResourceArn': table_arn,
            'ResourceName': table_name,
            'Tags': tags
        })

    # Fetch SNS topics
    sns_topics = paginate_boto3_results(clients['sns'], 'list_topics', 'Topics')
    for topic in sns_topics:
        topic_arn = topic['TopicArn']
        tags = get_tags(clients['sns'], 'sns', topic_arn)
        resources.append({
            'ResourceType': 'SNS Topic',
            'ResourceArn': topic_arn,
            'ResourceName': topic_arn.split(':')[-1],
            'Tags': tags
        })

    # Fetch SQS queues
    sqs_queues = paginate_boto3_results(clients['sqs'], 'list_queues', 'QueueUrls')
    for queue_url in sqs_queues:
        tags = get_tags(clients['sqs'], 'sqs', queue_url)
        resources.append({
            'ResourceType': 'SQS Queue',
            'ResourceArn': queue_url,
            'ResourceName': queue_url.split('/')[-1],
            'Tags': tags
        })

    # Fetch Redshift clusters
    redshift_clusters = paginate_boto3_results(clients['redshift'], 'describe_clusters', 'Clusters')
    for cluster in redshift_clusters:
        cluster_arn = f"arn:aws:redshift:{region}:{account_number}:cluster/{cluster['ClusterIdentifier']}"
        tags = get_tags(clients['redshift'], 'redshift', cluster_arn)
        resources.append({
            'ResourceType': 'Redshift Cluster',
            'ResourceArn': cluster_arn,
            'ResourceName': cluster['ClusterIdentifier'],
            'Tags': tags
        })

    # Fetch DMS replication tasks
    dms_tasks = paginate_boto3_results(clients['dms'], 'describe_replication_tasks', 'ReplicationTasks')
    for task in dms_tasks:
        task_arn = task['ReplicationTaskArn']
        tags = get_tags(clients['dms'], 'dms', task_arn)
        resources.append({
            'ResourceType': 'DMS Replication Task',
            'ResourceArn': task_arn,
            'ResourceName': task['ReplicationTaskIdentifier'],
            'Tags': tags
        })

    # Fetch SecretsManager secrets
    secrets = paginate_boto3_results(clients['secretsmanager'], 'list_secrets', 'SecretList')
    for secret in secrets:
        secret_arn = secret['ARN']
        tags = get_tags(clients['secretsmanager'], 'secretsmanager', secret_arn)
        resources.append({
            'ResourceType': 'SecretsManager Secret',
            'ResourceArn': secret_arn,
            'ResourceName': secret['Name'],
            'Tags': tags
        })

    # Fetch ElastiCache clusters
    elasticache_clusters = paginate_boto3_results(clients['elasticache'], 'describe_cache_clusters', 'CacheClusters')
    for cluster in elasticache_clusters:
        cluster_arn = f"arn:aws:elasticache:{region}:{account_number}:cluster:{cluster['CacheClusterId']}"
        tags = get_tags(clients['elasticache'], 'elasticache', cluster_arn)
        resources.append({
            'ResourceType': 'ElastiCache Cluster',
            'ResourceArn': cluster_arn,
            'ResourceName': cluster['CacheClusterId'],
            'Tags': tags
        })

    # Fetch Elasticsearch domains
    try:
        es_domains = clients['es'].list_domain_names().get('DomainNames', [])
        for domain in es_domains:
            domain_name = domain['DomainName']
            domain_arn = f"arn:aws:es:{region}:{account_number}:domain/{domain_name}"
            tags = get_tags(clients['es'], 'es', domain_arn)
            resources.append({
                'ResourceType': 'Elasticsearch Domain',
                'ResourceArn': domain_arn,
                'ResourceName': domain_name,
                'Tags': tags
            })
    except ClientError as e:
        print(f"Error fetching Elasticsearch domains: {e}")

    # Fetch Elastic Beanstalk applications
    try:
        ebs_apps = clients['elasticbeanstalk'].describe_applications().get('Applications', [])
        for app in ebs_apps:
            app_name = app['ApplicationName']
            tags = get_tags(clients['elasticbeanstalk'], 'elasticbeanstalk', f"arn:aws:elasticbeanstalk:{region}:{account_number}:application/{app_name}")
            resources.append({
                'ResourceType': 'Elastic Beanstalk Application',
                'ResourceArn': f"arn:aws:elasticbeanstalk:{region}:{account_number}:application/{app_name}",
                'ResourceName': app_name,
                'Tags': tags
            })
    except ClientError as e:
        print(f"Error fetching Elastic Beanstalk applications: {e}")

    # Fetch S3 buckets
    try:
        s3_buckets = clients['s3'].list_buckets().get('Buckets', [])
        for bucket in s3_buckets:
            bucket_name = bucket['Name']
            if bucket_name not in processed_s3_buckets:
                processed_s3_buckets.add(bucket_name)
                tags = get_tags(clients['s3'], 's3', bucket_name)
                resources.append({
                    'ResourceType': 'S3 Bucket',
                    'ResourceArn': f"arn:aws:s3:::{bucket_name}",
                    'ResourceName': bucket_name,
                    'Tags': tags
                })
    except ClientError as e:
        print(f"Error fetching S3 buckets: {e}")

    # Fetch ECR repositories
    ecr_repositories = paginate_boto3_results(clients['ecr'], 'describe_repositories', 'repositories')
    for repo in ecr_repositories:
        repo_arn = repo['repositoryArn']
        tags = get_tags(clients['ecr'], 'ecr', repo_arn)
        resources.append({
            'ResourceType': 'ECR Repository',
            'ResourceArn': repo_arn,
            'ResourceName': repo['repositoryName'],
            'Tags': tags
        })

    # Fetch Route 53 hosted zones
    route53_zones = paginate_boto3_results(clients['route53'], 'list_hosted_zones', 'HostedZones')
    for zone in route53_zones:
        zone_id = zone['Id'].split('/')[-1]
        tags = get_tags(clients['route53'], 'route53', zone_id)
        resources.append({
            'ResourceType': 'Route 53 Hosted Zone',
            'ResourceArn': f"arn:aws:route53:::hostedzone/{zone_id}",
            'ResourceName': zone['Name'],
            'Tags': tags
        })

csv_headers = ['Resource Type', 'Resource ARN', 'Region', 'Resource Name', 'Account Number'] + fiserv_tag_keys

with open('all_resources.csv', 'w', newline='') as csvfile:
    writer = csv.writer(csvfile)
    writer.writerow(csv_headers)

    for resource in resources:
        resource_type = resource['ResourceType']
        resource_arn = resource['ResourceArn']
        resource_name = resource['ResourceName']
        tags = resource['Tags']
        fiserv_tags = [tags.get(tag, '') for tag in fiserv_tag_keys]

        row_data = [resource_type, resource_arn, region, resource_name, account_number] + fiserv_tags
        writer.writerow(row_data)































import boto3
import csv
from botocore.exceptions import ClientError

# Define the regions to process
regions = ['us-east-1', 'us-west-1']  # Add more regions as needed

# Initialize clients for each region
clients = {region: {
    'ec2': boto3.client('ec2', region_name=region, verify=False),
    'rds': boto3.client('rds', region_name=region, verify=False),
    'lambda': boto3.client('lambda', region_name=region, verify=False),
    'elb': boto3.client('elb', region_name=region, verify=False),
    'elbv2': boto3.client('elbv2', region_name=region, verify=False),
    'ecs': boto3.client('ecs', region_name=region, verify=False),
    'dynamodb': boto3.client('dynamodb', region_name=region, verify=False),
    'sns': boto3.client('sns', region_name=region, verify=False),
    'sqs': boto3.client('sqs', region_name=region, verify=False),
    'redshift': boto3.client('redshift', region_name=region, verify=False),
    'dms': boto3.client('dms', region_name=region, verify=False),
    'secretsmanager': boto3.client('secretsmanager', region_name=region, verify=False),
    'elasticache': boto3.client('elasticache', region_name=region, verify=False),
    'es': boto3.client('es', region_name=region, verify=False),
    'elasticbeanstalk': boto3.client('elasticbeanstalk', region_name=region, verify=False),
    's3': boto3.client('s3', region_name=region, verify=False),
    'ecr': boto3.client('ecr', region_name=region, verify=False),
    'route53': boto3.client('route53', region_name=region, verify=False)
} for region in regions}

sts_client = boto3.client('sts')
account_number = sts_client.get_caller_identity()['Account']

def paginate_boto3_results(client, method, key):
    results = []
    try:
        paginator = client.get_paginator(method)
        for page in paginator.paginate():
            results.extend(page.get(key, []))
    except Exception as e:
        print(f"Error paginating results for {method}: {e}")
    return results

def get_s3_region(bucket_name, s3_client):
    try:
        response = s3_client.get_bucket_location(Bucket=bucket_name)
        return response.get('LocationConstraint', 'us-east-1')  # Default to 'us-east-1' if not specified
    except ClientError as e:
        print(f"Error fetching region for S3 bucket {bucket_name}: {e}")
        return 'unknown'

def get_s3_tags(bucket_name, s3_client):
    try:
        response = s3_client.get_bucket_tagging(Bucket=bucket_name)
        return {tag['Key']: tag['Value'] for tag in response.get('TagSet', [])}
    except ClientError as e:
        if e.response['Error']['Code'] == 'NoSuchTagSet':
            return {}
        else:
            print(f"Error fetching tags for S3 bucket {bucket_name}: {e}")
            return {}

def get_resource_tags(client, resource_arn):
    try:
        response = client.list_tags_for_resource(ResourceName=resource_arn)
        return {tag['Key']: tag['Value'] for tag in response.get('Tags', [])}
    except ClientError as e:
        print(f"Error fetching tags for resource {resource_arn}: {e}")
        return {}

def collect_resources_for_region(region):
    ec2_client = clients[region]['ec2']
    rds_client = clients[region]['rds']
    lambda_client = clients[region]['lambda']
    elb_client = clients[region]['elb']
    elbv2_client = clients[region]['elbv2']
    ecs_client = clients[region]['ecs']
    dynamodb_client = clients[region]['dynamodb']
    sns_client = clients[region]['sns']
    sqs_client = clients[region]['sqs']
    redshift_client = clients[region]['redshift']
    dms_client = clients[region]['dms']
    secretsmanager_client = clients[region]['secretsmanager']
    elasticache_client = clients[region]['elasticache']
    es_client = clients[region]['es']
    elasticbeanstalk_client = clients[region]['elasticbeanstalk']
    s3_client = clients[region]['s3']
    ecr_client = clients[region]['ecr']
    route53_client = clients[region]['route53']

    resources = []

    # Fetch EC2 instances
    ec2_instances = paginate_boto3_results(ec2_client, 'describe_instances', 'Reservations')
    for reservation in ec2_instances:
        for instance in reservation['Instances']:
            tags = get_resource_tags(ec2_client, instance['InstanceId'])
            resources.append({
                'ResourceType': 'EC2 Instance',
                'ResourceArn': f"arn:aws:ec2:{region}:{account_number}:instance/{instance['InstanceId']}",
                'ResourceName': tags.get('Name', 'N/A'),
                'Region': region,
                'Tags': tags
            })

    # Fetch RDS DB instances
    rds_instances = paginate_boto3_results(rds_client, 'describe_db_instances', 'DBInstances')
    for instance in rds_instances:
        tags = get_resource_tags(rds_client, instance['DBInstanceArn'])
        resources.append({
            'ResourceType': 'RDS DB Instance',
            'ResourceArn': instance['DBInstanceArn'],
            'ResourceName': instance['DBInstanceIdentifier'],
            'Region': region,
            'Tags': tags
        })

    # Fetch RDS DB clusters
    rds_clusters = paginate_boto3_results(rds_client, 'describe_db_clusters', 'DBClusters')
    for cluster in rds_clusters:
        tags = get_resource_tags(rds_client, cluster['DBClusterArn'])
        resources.append({
            'ResourceType': 'RDS DB Cluster',
            'ResourceArn': cluster['DBClusterArn'],
            'ResourceName': cluster['DBClusterIdentifier'],
            'Region': region,
            'Tags': tags
        })

    # Fetch Lambda functions
    lambda_functions = paginate_boto3_results(lambda_client, 'list_functions', 'Functions')
    for function in lambda_functions:
        tags = get_resource_tags(lambda_client, function['FunctionArn'])
        resources.append({
            'ResourceType': 'Lambda Function',
            'ResourceArn': function['FunctionArn'],
            'ResourceName': function['FunctionName'],
            'Region': region,
            'Tags': tags
        })

    # Fetch Classic Load Balancers
    elbs = paginate_boto3_results(elb_client, 'describe_load_balancers', 'LoadBalancerDescriptions')
    for elb in elbs:
        tags = get_resource_tags(elb_client, elb['LoadBalancerName'])
        resources.append({
            'ResourceType': 'Classic Load Balancer',
            'ResourceArn': f"arn:aws:elasticloadbalancing:{region}:{account_number}:loadbalancer/{elb['LoadBalancerName']}",
            'ResourceName': elb['LoadBalancerName'],
            'Region': region,
            'Tags': tags
        })

    # Fetch Application Load Balancers
    albs = paginate_boto3_results(elbv2_client, 'describe_load_balancers', 'LoadBalancers')
    for alb in albs:
        tags = get_resource_tags(elbv2_client, alb['LoadBalancerArn'])
        resources.append({
            'ResourceType': 'Application Load Balancer',
            'ResourceArn': alb['LoadBalancerArn'],
            'ResourceName': alb['LoadBalancerName'],
            'Region': region,
            'Tags': tags
        })

    # Fetch ECS clusters
    ecs_clusters = paginate_boto3_results(ecs_client, 'list_clusters', 'clusterArns')
    for cluster_arn in ecs_clusters:
        tag_response = ecs_client.list_tags_for_resource(resourceArn=cluster_arn)
        cluster_tags = tag_response.get('tags', [])
        tags = {tag['key']: tag['value'] for tag in cluster_tags}
        resources.append({
            'ResourceType': 'ECS Cluster',
            'ResourceArn': cluster_arn,
            'ResourceName': cluster_arn.split('/')[-1],
            'Region': region,
            'Tags': tags
        })

    # Fetch DynamoDB tables
    dynamodb_tables = paginate_boto3_results(dynamodb_client, 'list_tables', 'TableNames')
    for table_name in dynamodb_tables:
        table_arn = f"arn:aws:dynamodb:{region}:{account_number}:table/{table_name}"
        tags = get_resource_tags(dynamodb_client, table_arn)
        resources.append({
            'ResourceType': 'DynamoDB Table',
            'ResourceArn': table_arn,
            'ResourceName': table_name,
            'Region': region,
            'Tags': tags
        })

    # Fetch SNS topics
    sns_topics = paginate_boto3_results(sns_client, 'list_topics', 'Topics')
    for topic in sns_topics:
        topic_arn = topic['TopicArn']
        tags = get_resource_tags(sns_client, topic_arn)
        resources.append({
            'ResourceType': 'SNS Topic',
            'ResourceArn': topic_arn,
            'ResourceName': topic_arn.split(':')[-1],
            'Region': region,
            'Tags': tags
        })

    # Fetch SQS queues
    sqs_queues = paginate_boto3_results(sqs_client, 'list_queues', 'QueueUrls')
    for queue_url in sqs_queues:
        queue_arn = f"arn:aws:sqs:{region}:{account_number}:{queue_url.split('/')[-1]}"
        tags = get_resource_tags(sqs_client, queue_arn)
        resources.append({
            'ResourceType': 'SQS Queue',
            'ResourceArn': queue_url,
            'ResourceName': queue_url.split('/')[-1],
            'Region': region,
            'Tags': tags
        })

    # Fetch Redshift clusters
    redshift_clusters = paginate_boto3_results(redshift_client, 'describe_clusters', 'Clusters')
    for cluster in redshift_clusters:
        tags = get_resource_tags(redshift_client, cluster['ClusterNamespaceArn'])
        resources.append({
            'ResourceType': 'Redshift Cluster',
            'ResourceArn': cluster['ClusterNamespaceArn'],
            'ResourceName': cluster['ClusterIdentifier'],
            'Region': region,
            'Tags': tags
        })

    # Fetch DMS replication instances
    dms_instances = paginate_boto3_results(dms_client, 'describe_replication_instances', 'ReplicationInstances')
    for instance in dms_instances:
        tags = get_resource_tags(dms_client, instance['ReplicationInstanceArn'])
        resources.append({
            'ResourceType': 'DMS Replication Instance',
            'ResourceArn': instance['ReplicationInstanceArn'],
            'ResourceName': instance['ReplicationInstanceIdentifier'],
            'Region': region,
            'Tags': tags
        })

    # Fetch Secrets Manager secrets
    secrets = paginate_boto3_results(secretsmanager_client, 'list_secrets', 'SecretList')
    for secret in secrets:
        tags = get_resource_tags(secretsmanager_client, secret['ARN'])
        resources.append({
            'ResourceType': 'Secrets Manager Secret',
            'ResourceArn': secret['ARN'],
            'ResourceName': secret['Name'],
            'Region': region,
            'Tags': tags
        })

    # Fetch ElastiCache clusters
    elasticache_clusters = paginate_boto3_results(elasticache_client, 'describe_cache_clusters', 'CacheClusters')
    for cluster in elasticache_clusters:
        tags = get_resource_tags(elasticache_client, cluster['CacheClusterId'])
        resources.append({
            'ResourceType': 'ElastiCache Cluster',
            'ResourceArn': f"arn:aws:elasticache:{region}:{account_number}:cluster/{cluster['CacheClusterId']}",
            'ResourceName': cluster['CacheClusterId'],
            'Region': region,
            'Tags': tags
        })

    # Fetch OpenSearch domains
    es_domains = paginate_boto3_results(es_client, 'list_domain_names', 'DomainNames')
    for domain in es_domains:
        domain_name = domain['DomainName']
        tags = get_resource_tags(es_client, domain_name)
        resources.append({
            'ResourceType': 'OpenSearch Domain',
            'ResourceArn': f"arn:aws:es:{region}:{account_number}:domain/{domain_name}",
            'ResourceName': domain_name,
            'Region': region,
            'Tags': tags
        })

    # Fetch Elastic Beanstalk environments
    eb_environments = paginate_boto3_results(elasticbeanstalk_client, 'describe_environments', 'Environments')
    for environment in eb_environments:
        tags = get_resource_tags(elasticbeanstalk_client, environment['EnvironmentName'])
        resources.append({
            'ResourceType': 'Elastic Beanstalk Environment',
            'ResourceArn': f"arn:aws:elasticbeanstalk:{region}:{account_number}:environment/{environment['ApplicationName']}/{environment['EnvironmentName']}",
            'ResourceName': environment['EnvironmentName'],
            'Region': region,
            'Tags': tags
        })

    # Fetch S3 buckets
    try:
        s3_buckets = s3_client.list_buckets().get('Buckets', [])
        processed_buckets = set()  # To avoid duplicates
        for bucket in s3_buckets:
            bucket_name = bucket['Name']
            if bucket_name not in processed_buckets:
                processed_buckets.add(bucket_name)
                bucket_region = get_s3_region(bucket_name, s3_client)
                tags = get_s3_tags(bucket_name, s3_client)
                resources.append({
                    'ResourceType': 'S3 Bucket',
                    'ResourceArn': f"arn:aws:s3:::{bucket_name}",
                    'ResourceName': bucket_name,
                    'Region': bucket_region,
                    'Tags': tags
                })
    except ClientError as e:
        print(f"Error fetching S3 buckets: {e}")

    # Fetch ECR repositories
    ecr_repositories = paginate_boto3_results(ecr_client, 'describe_repositories', 'repositories')
    for repo in ecr_repositories:
        repo_arn = repo['repositoryArn']
        tags = get_resource_tags(ecr_client, repo_arn)
        resources.append({
            'ResourceType': 'ECR Repository',
            'ResourceArn': repo_arn,
            'ResourceName': repo['repositoryName'],
            'Region': region,
            'Tags': tags
        })

    # Fetch Route 53 hosted zones
    route53_zones = paginate_boto3_results(route53_client, 'list_hosted_zones', 'HostedZones')
    processed_zones = set()  # To avoid duplicates
    for zone in route53_zones:
        zone_id = zone['Id'].split('/')[-1]
        if zone_id not in processed_zones:
            processed_zones.add(zone_id)
            tags = get_resource_tags(route53_client, zone_id)
            resources.append({
                'ResourceType': 'Route 53 Hosted Zone',
                'ResourceArn': f"arn:aws:route53:::hostedzone/{zone_id}",
                'ResourceName': zone['Name'],
                'Region': region,
                'Tags': tags
            })

    return resources

def get_ec2_tags(instance_id):
    # Add your logic to fetch EC2 instance tags
    return {}

def get_rds_tags(arn):
    # Add your logic to fetch RDS instance tags
    return {}

def get_lambda_tags(arn):
    # Add your logic to fetch Lambda function tags
    return {}

def get_elb_tags(load_balancer_name):
    # Add your logic to fetch Classic Load Balancer tags
    return {}

def get_elbv2_tags(load_balancer_arn):
    # Add your logic to fetch Application Load Balancer tags
    return {}

def get_dynamodb_tags(table_arn):
    # Add your logic to fetch DynamoDB table tags
    return {}

def get_sns_tags(topic_arn):
    # Add your logic to fetch SNS topic tags
    return {}

def get_sqs_tags(queue_url):
    # Add your logic to fetch SQS queue tags
    return {}

def get_redshift_tags(cluster_arn):
    # Add your logic to fetch Redshift cluster tags
    return {}

def get_dms_tags(replication_instance_arn):
    # Add your logic to fetch DMS replication instance tags
    return {}

def get_secretsmanager_tags(secret_arn):
    # Add your logic to fetch Secrets Manager secret tags
    return {}

def get_elasticache_tags(cluster_arn):
    # Add your logic to fetch ElastiCache cluster tags
    return {}

def get_opensearch_tags(domain_name):
    # Add your logic to fetch OpenSearch domain tags
    return {}

def get_elasticbeanstalk_tags(environment_name):
    # Add your logic to fetch Elastic Beanstalk environment tags
    return {}

def get_ecr_tags(repo_arn):
    # Add your logic to fetch ECR repository tags
    return {}

def get_route53_tags(zone_id):
    # Add your logic to fetch Route 53 hosted zone tags
    return {}

# Collect all resources
all_resources = []
for region in regions:
    all_resources.extend(collect_resources_for_region(region))

# Define your desired tag keys
fiserv_tag_keys = ['Environment', 'Project']  # Update with your actual tag keys

# Write resources to CSV
csv_headers = ['Resource Type', 'Resource ARN', 'Region', 'Resource Name', 'Account Number'] + fiserv_tag_keys

with open('all_resources.csv', 'w', newline='') as csvfile:
    writer = csv.writer(csvfile)
    writer.writerow(csv_headers)

    for resource in all_resources:
        resource_type = resource['ResourceType']
        resource_arn = resource['ResourceArn']
        resource_name = resource['ResourceName']
        region = resource['Region']
        tags = resource['Tags']
        fiserv_tags = [tags.get(tag, '') for tag in fiserv_tag_keys]

        row_data = [resource_type, resource_arn, region, resource_name, account_number] + fiserv_tags
        writer.writerow(row_data)











Traceback (most recent call last):
  File "H:\pychram\pulled\newtest\newscriptmulti.py", line 409, in <module>
    all_resources.extend(collect_resources_for_region(region))
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "H:\pychram\pulled\newtest\newscriptmulti.py", line 96, in collect_resources_for_region
    tags = get_resource_tags(ec2_client, instance['InstanceId'])
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "H:\pychram\pulled\newtest\newscriptmulti.py", line 64, in get_resource_tags
    response = client.list_tags_for_resource(ResourceName=resource_arn)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\F37YHCS\AppData\Roaming\Python\Python311\site-packages\botocore\client.py", line 918, in __getattr__
    raise AttributeError(
AttributeError: 'EC2' object has no attribute 'list_tags_for_resource'

























import boto3
import csv
from botocore.exceptions import ClientError

# Define the regions to process
regions = ['us-east-1', 'us-west-1']  # Add more regions as needed

# Initialize clients for each region
clients = {region: {
    'ec2': boto3.client('ec2', region_name=region, verify=False),
    'rds': boto3.client('rds', region_name=region, verify=False),
    'lambda': boto3.client('lambda', region_name=region, verify=False),
    'elb': boto3.client('elb', region_name=region, verify=False),
    'elbv2': boto3.client('elbv2', region_name=region, verify=False),
    'ecs': boto3.client('ecs', region_name=region, verify=False),
    'dynamodb': boto3.client('dynamodb', region_name=region, verify=False),
    'sns': boto3.client('sns', region_name=region, verify=False),
    'sqs': boto3.client('sqs', region_name=region, verify=False),
    'redshift': boto3.client('redshift', region_name=region, verify=False),
    'dms': boto3.client('dms', region_name=region, verify=False),
    'secretsmanager': boto3.client('secretsmanager', region_name=region, verify=False),
    'elasticache': boto3.client('elasticache', region_name=region, verify=False),
    'es': boto3.client('es', region_name=region, verify=False),
    'elasticbeanstalk': boto3.client('elasticbeanstalk', region_name=region, verify=False),
    's3': boto3.client('s3', region_name=region, verify=False),
    'ecr': boto3.client('ecr', region_name=region, verify=False),
    'route53': boto3.client('route53', region_name=region, verify=False)
} for region in regions}

sts_client = boto3.client('sts')
account_number = sts_client.get_caller_identity()['Account']

def paginate_boto3_results(client, method, key):
    results = []
    try:
        paginator = client.get_paginator(method)
        for page in paginator.paginate():
            results.extend(page.get(key, []))
    except Exception as e:
        print(f"Error paginating results for {method}: {e}")
    return results

def get_s3_region(bucket_name, s3_client):
    try:
        response = s3_client.get_bucket_location(Bucket=bucket_name)
        return response.get('LocationConstraint', 'us-east-1')  # Default to 'us-east-1' if not specified
    except ClientError as e:
        print(f"Error fetching region for S3 bucket {bucket_name}: {e}")
        return 'unknown'

def get_s3_tags(bucket_name, s3_client):
    try:
        response = s3_client.get_bucket_tagging(Bucket=bucket_name)
        return {tag['Key']: tag['Value'] for tag in response.get('TagSet', [])}
    except ClientError as e:
        if e.response['Error']['Code'] == 'NoSuchTagSet':
            return {}
        else:
            print(f"Error fetching tags for S3 bucket {bucket_name}: {e}")
            return {}

def get_resource_tags(client, resource_arn, resource_type):
    try:
        if resource_type == 'ec2':
            response = client.describe_tags(Filters=[{'Name': 'resource-id', 'Values': [resource_arn]}])
            return {tag['Key']: tag['Value'] for tag in response.get('Tags', [])}
        else:
            response = client.list_tags_for_resource(ResourceName=resource_arn)
            return {tag['Key']: tag['Value'] for tag in response.get('Tags', [])}
    except ClientError as e:
        print(f"Error fetching tags for resource {resource_arn}: {e}")
        return {}

def collect_resources_for_region(region):
    ec2_client = clients[region]['ec2']
    rds_client = clients[region]['rds']
    lambda_client = clients[region]['lambda']
    elb_client = clients[region]['elb']
    elbv2_client = clients[region]['elbv2']
    ecs_client = clients[region]['ecs']
    dynamodb_client = clients[region]['dynamodb']
    sns_client = clients[region]['sns']
    sqs_client = clients[region]['sqs']
    redshift_client = clients[region]['redshift']
    dms_client = clients[region]['dms']
    secretsmanager_client = clients[region]['secretsmanager']
    elasticache_client = clients[region]['elasticache']
    es_client = clients[region]['es']
    elasticbeanstalk_client = clients[region]['elasticbeanstalk']
    s3_client = clients[region]['s3']
    ecr_client = clients[region]['ecr']
    route53_client = clients[region]['route53']

    resources = []

    # Fetch EC2 instances
    ec2_instances = paginate_boto3_results(ec2_client, 'describe_instances', 'Reservations')
    for reservation in ec2_instances:
        for instance in reservation['Instances']:
            tags = get_resource_tags(ec2_client, instance['InstanceId'], 'ec2')
            resources.append({
                'ResourceType': 'EC2 Instance',
                'ResourceArn': f"arn:aws:ec2:{region}:{account_number}:instance/{instance['InstanceId']}",
                'ResourceName': tags.get('Name', 'N/A'),
                'Region': region,
                'Tags': tags
            })

    # Fetch RDS DB instances
    rds_instances = paginate_boto3_results(rds_client, 'describe_db_instances', 'DBInstances')
    for instance in rds_instances:
        tags = get_resource_tags(rds_client, instance['DBInstanceArn'], 'rds')
        resources.append({
            'ResourceType': 'RDS DB Instance',
            'ResourceArn': instance['DBInstanceArn'],
            'ResourceName': instance['DBInstanceIdentifier'],
            'Region': region,
            'Tags': tags
        })

    # Fetch RDS DB clusters
    rds_clusters = paginate_boto3_results(rds_client, 'describe_db_clusters', 'DBClusters')
    for cluster in rds_clusters:
        tags = get_resource_tags(rds_client, cluster['DBClusterArn'], 'rds')
        resources.append({
            'ResourceType': 'RDS DB Cluster',
            'ResourceArn': cluster['DBClusterArn'],
            'ResourceName': cluster['DBClusterIdentifier'],
            'Region': region,
            'Tags': tags
        })

    # Fetch Lambda functions
    lambda_functions = paginate_boto3_results(lambda_client, 'list_functions', 'Functions')
    for function in lambda_functions:
        tags = get_resource_tags(lambda_client, function['FunctionArn'], 'lambda')
        resources.append({
            'ResourceType': 'Lambda Function',
            'ResourceArn': function['FunctionArn'],
            'ResourceName': function['FunctionName'],
            'Region': region,
            'Tags': tags
        })

    # Fetch Classic Load Balancers
    elbs = paginate_boto3_results(elb_client, 'describe_load_balancers', 'LoadBalancerDescriptions')
    for elb in elbs:
        tags = get_resource_tags(elb_client, elb['LoadBalancerName'], 'elb')
        resources.append({
            'ResourceType': 'Classic Load Balancer',
            'ResourceArn': f"arn:aws:elasticloadbalancing:{region}:{account_number}:loadbalancer/{elb['LoadBalancerName']}",
            'ResourceName': elb['LoadBalancerName'],
            'Region': region,
            'Tags': tags
        })

    # Fetch Application Load Balancers
    albs = paginate_boto3_results(elbv2_client, 'describe_load_balancers', 'LoadBalancers')
    for alb in albs:
        tags = get_resource_tags(elbv2_client, alb['LoadBalancerArn'], 'elbv2')
        resources.append({
            'ResourceType': 'Application Load Balancer',
            'ResourceArn': alb['LoadBalancerArn'],
            'ResourceName': alb['LoadBalancerName'],
            'Region': region,
            'Tags': tags
        })

    # Fetch ECS clusters
    ecs_clusters = paginate_boto3_results(ecs_client, 'list_clusters', 'clusterArns')
    for cluster_arn in ecs_clusters:
        tag_response = ecs_client.list_tags_for_resource(resourceArn=cluster_arn)
        cluster_tags = tag_response.get('tags', [])
        tags = {tag['key']: tag['value'] for tag in cluster_tags}
        resources.append({
            'ResourceType': 'ECS Cluster',
            'ResourceArn': cluster_arn,
            'ResourceName': cluster_arn.split('/')[-1],
            'Region': region,
            'Tags': tags
        })

    # Fetch DynamoDB tables
    dynamodb_tables = paginate_boto3_results(dynamodb_client, 'list_tables', 'TableNames')
    for table_name in dynamodb_tables:
        table_arn = f"arn:aws:dynamodb:{region}:{account_number}:table/{table_name}"
        tags = get_resource_tags(dynamodb_client, table_arn, 'dynamodb')
        resources.append({
            'ResourceType': 'DynamoDB Table',
            'ResourceArn': table_arn,
            'ResourceName': table_name,
            'Region': region,
            'Tags': tags
        })

    # Fetch SNS topics
    sns_topics = paginate_boto3_results(sns_client, 'list_topics', 'Topics')
    for topic in sns_topics:
        topic_arn = topic['TopicArn']
        tags = get_resource_tags(sns_client, topic_arn, 'sns')
        resources.append({
            'ResourceType': 'SNS Topic',
            'ResourceArn': topic_arn,
            'ResourceName': topic_arn.split(':')[-1],
            'Region': region,
            'Tags': tags
        })

    # Fetch SQS queues
    sqs_queues = paginate_boto3_results(sqs_client, 'list_queues', 'QueueUrls')
    for queue_url in sqs_queues:
        queue_arn = f"arn:aws:sqs:{region}:{account_number}:{queue_url.split('/')[-1]}"
        tags = get_resource_tags(sqs_client, queue_arn, 'sqs')
        resources.append({
            'ResourceType': 'SQS Queue',
            'ResourceArn': queue_url,
            'ResourceName': queue_url.split('/')[-1],
            'Region': region,
            'Tags': tags
        })

    # Fetch Redshift clusters
    redshift_clusters = paginate_boto3_results(redshift_client, 'describe_clusters', 'Clusters')
    for cluster in redshift_clusters:
        tags = get_resource_tags(redshift_client, cluster['ClusterNamespaceArn'], 'redshift')
        resources.append({
            'ResourceType': 'Redshift Cluster',
            'ResourceArn': cluster['ClusterNamespaceArn'],
            'ResourceName': cluster['ClusterIdentifier'],
            'Region': region,
            'Tags': tags
        })

    # Fetch DMS replication instances
    dms_instances = paginate_boto3_results(dms_client, 'describe_replication_instances', 'ReplicationInstances')
    for instance in dms_instances:
        tags = get_resource_tags(dms_client, instance['ReplicationInstanceArn'], 'dms')
        resources.append({
            'ResourceType': 'DMS Replication Instance',
            'ResourceArn': instance['ReplicationInstanceArn'],
            'ResourceName': instance['ReplicationInstanceIdentifier'],
            'Region': region,
            'Tags': tags
        })

    # Fetch Secrets Manager secrets
    secrets = paginate_boto3_results(secretsmanager_client, 'list_secrets', 'SecretList')
    for secret in secrets:
        tags = get_resource_tags(secretsmanager_client, secret['ARN'], 'secretsmanager')
        resources.append({
            'ResourceType': 'Secrets Manager Secret',
            'ResourceArn': secret['ARN'],
            'ResourceName': secret['Name'],
            'Region': region,
            'Tags': tags
        })

    # Fetch ElastiCache clusters
    elasticache_clusters = paginate_boto3_results(elasticache_client, 'describe_cache_clusters', 'CacheClusters')
    for cluster in elasticache_clusters:
        tags = get_resource_tags(elasticache_client, cluster['CacheClusterId'], 'elasticache')
        resources.append({
            'ResourceType': 'ElastiCache Cluster',
            'ResourceArn': f"arn:aws:elasticache:{region}:{account_number}:cluster/{cluster['CacheClusterId']}",
            'ResourceName': cluster['CacheClusterId'],
            'Region': region,
            'Tags': tags
        })

    # Fetch OpenSearch domains
    es_domains = paginate_boto3_results(es_client, 'list_domain_names', 'DomainNames')
    for domain in es_domains:
        domain_name = domain['DomainName']
        tags = get_resource_tags(es_client, domain_name, 'opensearch')
        resources.append({
            'ResourceType': 'OpenSearch Domain',
            'ResourceArn': f"arn:aws:es:{region}:{account_number}:domain/{domain_name}",
            'ResourceName': domain_name,
            'Region': region,
            'Tags': tags
        })

    # Fetch Elastic Beanstalk environments
    eb_environments = paginate_boto3_results(elasticbeanstalk_client, 'describe_environments', 'Environments')
    for environment in eb_environments:
        tags = get_resource_tags(elasticbeanstalk_client, environment['EnvironmentName'], 'elasticbeanstalk')
        resources.append({
            'ResourceType': 'Elastic Beanstalk Environment',
            'ResourceArn': f"arn:aws:elasticbeanstalk:{region}:{account_number}:environment/{environment['ApplicationName']}/{environment['EnvironmentName']}",
            'ResourceName': environment['EnvironmentName'],
            'Region': region,
            'Tags': tags
        })

    # Fetch S3 buckets
    try:
        s3_buckets = s3_client.list_buckets().get('Buckets', [])
        processed_buckets = set()  # To avoid duplicates
        for bucket in s3_buckets:
            bucket_name = bucket['Name']
            if bucket_name not in processed_buckets:
                processed_buckets.add(bucket_name)
                bucket_region = get_s3_region(bucket_name, s3_client)
                tags = get_s3_tags(bucket_name, s3_client)
                resources.append({
                    'ResourceType': 'S3 Bucket',
                    'ResourceArn': f"arn:aws:s3:::{bucket_name}",
                    'ResourceName': bucket_name,
                    'Region': bucket_region,
                    'Tags': tags
                })
    except ClientError as e:
        print(f"Error fetching S3 buckets: {e}")

    # Fetch ECR repositories
    ecr_repositories = paginate_boto3_results(ecr_client, 'describe_repositories', 'repositories')
    for repo in ecr_repositories:
        repo_arn = repo['repositoryArn']
        tags = get_resource_tags(ecr_client, repo_arn, 'ecr')
        resources.append({
            'ResourceType': 'ECR Repository',
            'ResourceArn': repo_arn,
            'ResourceName': repo['repositoryName'],
            'Region': region,
            'Tags': tags
        })

    # Fetch Route 53 hosted zones
    route53_zones = paginate_boto3_results(route53_client, 'list_hosted_zones', 'HostedZones')
    processed_zones = set()  # To avoid duplicates
    for zone in route53_zones:
        zone_id = zone['Id'].split('/')[-1]
        if zone_id not in processed_zones:
            processed_zones.add(zone_id)
            tags = get_resource_tags(route53_client, zone_id, 'route53')
            resources.append({
                'ResourceType': 'Route 53 Hosted Zone',
                'ResourceArn': f"arn:aws:route53:::hostedzone/{zone_id}",
                'ResourceName': zone['Name'],
                'Region': region,
                'Tags': tags
            })

    return resources

# Collect all resources
all_resources = []
for region in regions:
    all_resources.extend(collect_resources_for_region(region))

# Define your desired tag keys
fiserv_tag_keys = ['Environment', 'Project']  # Update with your actual tag keys

# Write resources to CSV
csv_headers = ['Resource Type', 'Resource ARN', 'Region', 'Resource Name', 'Account Number'] + fiserv_tag_keys

with open('all_resources.csv', 'w', newline='') as csvfile:
    writer = csv.writer(csvfile)
    writer.writerow(csv_headers)

    for resource in all_resources:
        resource_type = resource['ResourceType']
        resource_arn = resource['ResourceArn']
        resource_name = resource['ResourceName']
        region = resource['Region']
        tags = resource['Tags']
        fiserv_tags = [tags.get(tag, '') for tag in fiserv_tag_keys]

        row_data = [resource_type, resource_arn, region, resource_name, account_number] + fiserv_tags
        writer.writerow(row_data)

























Traceback (most recent call last):
  File "H:\pychram\pulled\newtest\newscriptmulti.py", line 349, in <module>
    all_resources.extend(collect_resources_for_region(region))
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "H:\pychram\pulled\newtest\newscriptmulti.py", line 136, in collect_resources_for_region
    tags = get_resource_tags(lambda_client, function['FunctionArn'], 'lambda')
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "H:\pychram\pulled\newtest\newscriptmulti.py", line 68, in get_resource_tags
    response = client.list_tags_for_resource(ResourceName=resource_arn)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\F37YHCS\AppData\Roaming\Python\Python311\site-packages\botocore\client.py", line 918, in __getattr__
    raise AttributeError(
AttributeError: 'Lambda' object has no attribute 'list_tags_for_resource'
