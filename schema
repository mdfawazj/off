arn:aws:sns:eu-central-1:628913298676:config-topic-628913298676 
TAGS aws:cloudformation:stack-name=StackSet-org-enable-config-f9cc7ec8-c448-409a-a982-c0875dde564b 
TAGS environment=test
TAGS aws:cloudformation:stack-id=arn:aws:cloudformation:eu-central-1:628913298676:stack/StackSet-org-enable-config-f9cc7ec8-c448-409a-a982-c0875dde564b/0ce80900-264b-11ee-9558-0aec439e3386
TAGS aws:cloudformation:logical-id=ConfigTopic 
arn:aws:dynamodb:us-east-1:628913298676:table/applications-dev 
TAGS App= 
TAGS environment=200
arn:aws:dynamodb:us-east-1:628913298676:table/apple-vas-keypair-dev 
TAGS environment=dev 
TAGS product=apple-vas 
TAGS App=apple-vas-service 
TAGS branch=master

I want a script to read the file that have this data and give me a csv file where the first row will beâ€¨like 

In row 1 column heading will be like  column 1 Resource_type column 2 Resource_Name column 3 Resource_ARN column 4 environment column 5 product column 6 cd::App.
column 4 environment column 5 product column 6 cd::App will be for tags

Then start reading file, if the line starts with arn then, in new row start populating values for the columns headings in second row for the 1st column (Resource_type) value will be in between 2nd and 3rd : of arn line, value for second column (Resource_Name) will be after last :  , value for art will be line of arn 

If line starts with TAGS then remove "TAGS" and any space before 1st character after TAGS, compare what ever is in string before = if it is equal to environment then string after = will go in column 4 of previous arn row, similarly if string before = equals to product the string after = will go in column 5 of previous arn row, same thing for cd::App will go in column 6 of previous arn row, if the string before = does not match then do nothing

be for tags if it matchs to any of them then add string that is after = to that respective column in which it matched from row 1 





#!/bin/bash

input_file="input.txt"
output_file="output.csv"

# Initialize the output file with headers
echo "Resource_type,Resource_Name,Resource_ARN,environment,product,cd::App" > "$output_file"

# Variables to hold current resource values
current_resource_type=""
current_resource_name=""
current_resource_arn=""
current_environment=""
current_product=""
current_app=""

# Function to write the current resource values to the CSV
write_current_resource() {
    if [ -n "$current_resource_arn" ]; then
        echo "$current_resource_type,$current_resource_name,$current_resource_arn,$current_environment,$current_product,$current_app" >> "$output_file"
    fi
}

# Read the input file line by line
while IFS= read -r line; do
    if [[ $line == arn:* ]]; then
        # Write the previous resource data to the CSV
        write_current_resource

        # Reset variables for the new resource
        current_resource_type=""
        current_resource_name=""
        current_resource_arn="$line"
        current_environment=""
        current_product=""
        current_app=""

        # Extract resource type and name from the ARN
        IFS=':' read -r -a parts <<< "$line"

        # Debugging output
        echo "Processing ARN: $line"
        echo "Parts: ${parts[*]}"
        
        if [ ${#parts[@]} -ge 6 ]; then
            current_resource_type="${parts[2]}"
            # Use regex to extract the last part after the last ':'
            if [[ "$line" =~ .*:([^:]+)$ ]]; then
                current_resource_name="${BASH_REMATCH[1]}"
            fi
        else
            echo "Skipping malformed ARN: $line" >&2
        fi
    elif [[ $line == TAGS* ]]; then
        tag_line=${line#TAGS }
        IFS='=' read -r tag_key tag_value <<< "$tag_line"
        
        # Debugging output
        echo "Processing TAG: $tag_line"
        
        case "$tag_key" in
            environment)
                current_environment="$tag_value"
                ;;
            product)
                current_product="$tag_value"
                ;;
            App)
                current_app="$tag_value"
                ;;
        esac
    fi
done < "$input_file"

# Write the last resource data to the CSV
write_current_resource
