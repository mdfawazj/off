import boto3
import csv
from botocore.exceptions import ClientError

regions = ['us-east-1']  # List of regions
account_number = boto3.client('sts').get_caller_identity()['Account']

# Function to create clients for a given region
def create_clients(region):
    return {
        'ec2': boto3.client('ec2', region_name=region, verify=False),
        'rds': boto3.client('rds', region_name=region, verify=False),
        'lambda': boto3.client('lambda', region_name=region, verify=False),
        'elb': boto3.client('elb', region_name=region, verify=False),
        'elbv2': boto3.client('elbv2', region_name=region, verify=False),
        'ecs': boto3.client('ecs', region_name=region, verify=False),
        'dynamodb': boto3.client('dynamodb', region_name=region, verify=False),
        'sns': boto3.client('sns', region_name=region, verify=False),
        'sqs': boto3.client('sqs', region_name=region, verify=False),
        'redshift': boto3.client('redshift', region_name=region, verify=False),
        'dms': boto3.client('dms', region_name=region, verify=False),
        'secretsmanager': boto3.client('secretsmanager', region_name=region, verify=False),
        'elasticache': boto3.client('elasticache', region_name=region, verify=False),
        'es': boto3.client('es', region_name=region, verify=False),
        'elasticbeanstalk': boto3.client('elasticbeanstalk', region_name=region, verify=False),
        's3': boto3.client('s3', region_name=region, verify=False),
        'ecr': boto3.client('ecr', region_name=region, verify=False),
        'route53': boto3.client('route53', region_name=region, verify=False),
        'cognito-idp': boto3.client('cognito-idp', region_name=region, verify=False),
        'cognito-identity': boto3.client('cognito-identity', region_name=region, verify=False),
        'amplify': boto3.client('amplify', region_name=region, verify=False),
        'codecommit': boto3.client('codecommit', region_name=region, verify=False),
        'appsync': boto3.client('appsync', region_name=region, verify=False)
    }

def paginate_boto3_results(client, method, key):
    results = []
    paginator = client.get_paginator(method)
    page_iterator = paginator.paginate(PaginationConfig={'MaxItems': 1000})

    for page in paginator.paginate():
        results.extend(page.get(key, []))
    return results

def fetch_cognito_user_pools(client):
    results = []
    paginator = client.get_paginator('list_user_pools')
    for page in paginator.paginate(MaxResults=60):
        results.extend(page.get('UserPools', []))
    return results

def fetch_cognito_identity_pools(client):
    results = []
    paginator = client.get_paginator('list_identity_pools')
    for page in paginator.paginate(MaxResults=60):
        results.extend(page.get('IdentityPools', []))
    return results

def get_tags(client, resource_type, arn):
    try:
        if resource_type == 's3':
            response = client.get_bucket_tagging(Bucket=arn)
            return {tag['Key']: tag['Value'] for tag in response.get('TagSet', [])}
        elif resource_type == 'ec2':
            response = client.describe_tags(Filters=[{'Name': 'resource-id', 'Values': [arn]}])
            return {tag['Key']: tag['Value'] for tag in response.get('Tags', [])}
        elif resource_type == 'rds':
            response = client.list_tags_for_resource(ResourceName=arn)
            return {tag['Key']: tag['Value'] for tag in response.get('TagList', [])}
        elif resource_type == 'lambda':
            response = client.list_tags(Resource=arn)
            return response.get('Tags', {})
        elif resource_type == 'elb':
            response = client.describe_tags(LoadBalancerNames=[arn])
            tags = {}
            if response['TagDescriptions']:
                for tag in response['TagDescriptions'][0]['Tags']:
                    tags[tag['Key']] = tag['Value']
            return tags
        elif resource_type == 'elbv2':
            response = client.describe_tags(ResourceArns=[arn])
            tags = {}
            if response['TagDescriptions']:
                for tag in response['TagDescriptions'][0]['Tags']:
                    tags[tag['Key']] = tag['Value']
            return tags
        elif resource_type == 'dynamodb':
            response = client.list_tags_of_resource(ResourceArn=arn)
            return {tag['Key']: tag['Value'] for tag in response.get('Tags', [])}
        elif resource_type == 'sns':
            response = client.list_tags_for_resource(ResourceArn=arn)
            return {tag['Key']: tag['Value'] for tag in response.get('Tags', [])}
        elif resource_type == 'sqs':
            response = client.list_queue_tags(QueueUrl=arn)
            return response.get('Tags', {})
        elif resource_type == 'redshift':
            response = client.describe_tags(ResourceName=arn)
            return {tag['Key']: tag['Value'] for tag in response.get('TaggedResources', [])}
        elif resource_type == 'dms':
            response = client.list_tags_for_resource(ResourceArn=arn)
            return {tag['Key']: tag['Value'] for tag in response.get('TagList', [])}
        elif resource_type == 'secretsmanager':
            response = client.describe_secret(SecretId=arn)
            return {tag['Key']: tag['Value'] for tag in response.get('Tags', [])}
        elif resource_type == 'elasticache':
            response = client.list_tags_for_resource(ResourceName=arn)
            return {tag['Key']: tag['Value'] for tag in response.get('TagList', [])}
        elif resource_type == 'es':
            response = client.list_tags(ARN=arn)
            return {tag['Key']: tag['Value'] for tag in response.get('TagList', [])}
        elif resource_type == 'elasticbeanstalk':
            response = client.list_tags_for_resource(ResourceArn=arn)
            return {tag['Key']: tag['Value'] for tag in response.get('ResourceTags', [])}
        elif resource_type == 'ecr':
            response = client.list_tags_for_resource(resourceArn=arn)
            return {tag['Key']: tag['Value'] for tag in response.get('tags', [])}
        elif resource_type == 'route53':
            response = client.list_tags_for_resource(ResourceType='hostedzone', ResourceId=arn)
            return {tag['Key']: tag['Value'] for tag in response.get('Tags', [])}
        elif resource_type == 'cognito-idp':
            # Cognito User Pools do not support tag retrieval in this way
            return {}
        elif resource_type == 'cognito-identity':
            # Cognito Identity Pools do not support tag retrieval in this way
            return {}
        elif resource_type == 'amplify':
            response = client.list_tags_for_resource(resourceArn=arn)
            return {tag['Key']: tag['Value'] for tag in response.get('tags', [])}
        elif resource_type == 'codecommit':
            response = client.list_tags_for_resource(resourceArn=arn)
            return {tag['Key']: tag['Value'] for tag in response.get('tags', [])}
        elif resource_type == 'appsync':
            response = client.list_tags_for_resource(resourceArn=arn)
            return {tag['Key']: tag['Value'] for tag in response.get('tags', [])}
    except ClientError as e:
        print(f"Error fetching tags for {resource_type} {arn}: {e}")
        return {}

# Specify the 'fiserv' tag keys
fiserv_tag_keys = ['fiserv::apm', 'fiserv::app', 'fiserv::description', 'fiserv::owner', 'fiserv::group', 'fiserv::stage', 'fiserv::environment']

resources = []
processed_s3_buckets = set()

for region in regions:
    print(f"Processing region: {region}")
    clients = create_clients(region)

    # Fetch EC2 Instances
    try:
        instances = paginate_boto3_results(clients['ec2'], 'describe_instances', 'Reservations')
        for reservation in instances:
            for instance in reservation['Instances']:
                instance_id = instance['InstanceId']
                instance_arn = f"arn:aws:ec2:{region}:{account_number}:instance/{instance_id}"
                tags = get_tags(clients['ec2'], 'ec2', instance_id)
                resources.append({
                    'ResourceType': 'EC2 Instance',
                    'ResourceArn': instance_arn,
                    'ResourceName': instance_id,
                    'Region': region,
                    'Tags': tags
                })
    except ClientError as e:
        print(f"Error fetching EC2 Instances: {e}")

    # Fetch RDS Instances
    try:
        instances = paginate_boto3_results(clients['rds'], 'describe_db_instances', 'DBInstances')
        for instance in instances:
            instance_arn = instance['DBInstanceArn']
            tags = get_tags(clients['rds'], 'rds', instance_arn)
            resources.append({
                'ResourceType': 'RDS Instance',
                'ResourceArn': instance_arn,
                'ResourceName': instance['DBInstanceIdentifier'],
                'Region': region,
                'Tags': tags
            })
    except ClientError as e:
        print(f"Error fetching RDS Instances: {e}")

    # Fetch Lambda Functions
    try:
        functions = paginate_boto3_results(clients['lambda'], 'list_functions', 'Functions')
        for function in functions:
            function_arn = function['FunctionArn']
            tags = get_tags(clients['lambda'], 'lambda', function_arn)
            resources.append({
                'ResourceType': 'Lambda Function',
                'ResourceArn': function_arn,
                'ResourceName': function['FunctionName'],
                'Region': region,
                'Tags': tags
            })
    except ClientError as e:
        print(f"Error fetching Lambda Functions: {e}")

    # Fetch S3 Buckets
    try:
        buckets = clients['s3'].list_buckets().get('Buckets', [])
        for bucket in buckets:
            bucket_name = bucket['Name']
            if bucket_name not in processed_s3_buckets:
                tags = get_tags(clients['s3'], 's3', bucket_name)
                resources.append({
                    'ResourceType': 'S3 Bucket',
                    'ResourceArn': f"arn:aws:s3:::{bucket_name}",
                    'ResourceName': bucket_name,
                    'Region': 'us-east-1',  # S3 buckets do not have region-specific ARNs
                    'Tags': tags
                })
                processed_s3_buckets.add(bucket_name)
    except ClientError as e:
        print(f"Error fetching S3 Buckets: {e}")

    # Fetch Amplify Apps
    try:
        apps = paginate_boto3_results(clients['amplify'], 'list_apps', 'apps')
        for app in apps:
            app_arn = app['appArn']
            tags = get_tags(clients['amplify'], 'amplify', app_arn)
            resources.append({
                'ResourceType': 'Amplify App',
                'ResourceArn': app_arn,
                'ResourceName': app['name'],
                'Region': region,
                'Tags': tags
            })
    except ClientError as e:
        print(f"Error fetching Amplify Apps: {e}")

    # Fetch CodeCommit Repositories
    try:
        repositories = paginate_boto3_results(clients['codecommit'], 'list_repositories', 'repositories')
        for repository in repositories:
            repository_name = repository['repositoryName']
            repository_arn = f"arn:aws:codecommit:{region}:{account_number}:{repository_name}"
            tags = get_tags(clients['codecommit'], 'codecommit', repository_arn)
            resources.append({
                'ResourceType': 'CodeCommit Repository',
                'ResourceArn': repository_arn,
                'ResourceName': repository_name,
                'Region': region,
                'Tags': tags
            })
    except ClientError as e:
        print(f"Error fetching CodeCommit Repositories: {e}")

    # Fetch AppSync GraphQL APIs
    try:
        apis = paginate_boto3_results(clients['appsync'], 'list_graphql_apis', 'graphqlApis')
        for api in apis:
            api_arn = api['arn']
            tags = get_tags(clients['appsync'], 'appsync', api_arn)
            resources.append({
                'ResourceType': 'AppSync GraphQL API',
                'ResourceArn': api_arn,
                'ResourceName': api['name'],
                'Region': region,
                'Tags': tags
            })
    except ClientError as e:
        print(f"Error fetching AppSync GraphQL APIs: {e}")

# Write results to a CSV file
with open('aws_resources.csv', 'w', newline='') as csvfile:
    fieldnames = ['ResourceType', 'ResourceArn', 'ResourceName', 'Region'] + fiserv_tag_keys
    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)

    writer.writeheader()
    for resource in resources:
        tags = resource['Tags']
        fiserv_tags = {tag: tags.get(tag, '') for tag in fiserv_tag_keys}
        writer.writerow({
            'ResourceType': resource['ResourceType'],
            'ResourceArn': resource['ResourceArn'],
            'ResourceName': resource['ResourceName'],
            'Region': resource['Region'],
            **fiserv_tags
        })
