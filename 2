import boto3
import csv
from botocore.exceptions import ClientError

# Define the regions to process
regions = ['us-east-1', 'us-west-1']  # Add more regions as needed

# Initialize clients for each region
clients = {region: {
    'ec2': boto3.client('ec2', region_name=region, verify=False),
    'rds': boto3.client('rds', region_name=region, verify=False),
    'lambda': boto3.client('lambda', region_name=region, verify=False),
    'elb': boto3.client('elb', region_name=region, verify=False),
    'elbv2': boto3.client('elbv2', region_name=region, verify=False),
    'ecs': boto3.client('ecs', region_name=region, verify=False),
    'dynamodb': boto3.client('dynamodb', region_name=region, verify=False),
    'sns': boto3.client('sns', region_name=region, verify=False),
    'sqs': boto3.client('sqs', region_name=region, verify=False),
    'redshift': boto3.client('redshift', region_name=region, verify=False),
    'dms': boto3.client('dms', region_name=region, verify=False),
    'secretsmanager': boto3.client('secretsmanager', region_name=region, verify=False),
    'elasticache': boto3.client('elasticache', region_name=region, verify=False),
    'es': boto3.client('es', region_name=region, verify=False),
    'elasticbeanstalk': boto3.client('elasticbeanstalk', region_name=region, verify=False),
    's3': boto3.client('s3', region_name=region, verify=False),
    'ecr': boto3.client('ecr', region_name=region, verify=False),
    'route53': boto3.client('route53', region_name=region, verify=False)
} for region in regions}

sts_client = boto3.client('sts')
account_number = sts_client.get_caller_identity()['Account']

def paginate_boto3_results(client, method, key):
    results = []
    try:
        paginator = client.get_paginator(method)
        for page in paginator.paginate():
            results.extend(page.get(key, []))
    except Exception as e:
        print(f"Error paginating results for {method}: {e}")
    return results

def get_s3_region(bucket_name, s3_client):
    try:
        response = s3_client.get_bucket_location(Bucket=bucket_name)
        return response.get('LocationConstraint', 'us-east-1')  # Default to 'us-east-1' if not specified
    except ClientError as e:
        print(f"Error fetching region for S3 bucket {bucket_name}: {e}")
        return 'unknown'

def get_s3_tags(bucket_name, s3_client):
    try:
        response = s3_client.get_bucket_tagging(Bucket=bucket_name)
        return {tag['Key']: tag['Value'] for tag in response.get('TagSet', [])}
    except ClientError as e:
        if e.response['Error']['Code'] == 'NoSuchTagSet':
            return {}
        else:
            print(f"Error fetching tags for S3 bucket {bucket_name}: {e}")
            return {}

def get_resource_tags(client, resource_arn, resource_type):
    try:
        if resource_type == 'ec2':
            response = client.describe_tags(Filters=[{'Name': 'resource-id', 'Values': [resource_arn]}])
            return {tag['Key']: tag['Value'] for tag in response.get('Tags', [])}
        elif resource_type == 'lambda':
            response = client.list_tags(Resource=resource_arn)
            return response.get('Tags', {})
        elif resource_type == 'rds':
            response = client.list_tags_for_resource(ResourceName=resource_arn)
            return {tag['Key']: tag['Value'] for tag in response.get('TagList', [])}
        elif resource_type in ['elbv2', 'ecs', 'dynamodb', 'sns', 'sqs', 'redshift', 'dms', 'secretsmanager', 'elasticache', 'es', 'elasticbeanstalk', 'ecr']:
            response = client.list_tags_for_resource(ResourceArn=resource_arn)
            return {tag['Key']: tag['Value'] for tag in response.get('Tags', [])}
        elif resource_type == 'elb':
            response = client.describe_tags(LoadBalancerNames=[resource_arn])
            return {tag['Key']: tag['Value'] for tag in response['TagDescriptions'][0]['Tags']}
        elif resource_type == 'route53':
            response = client.list_tags_for_resource(ResourceType='hostedzone', ResourceId=resource_arn)
            return {tag['Key']: tag['Value'] for tag in response['ResourceTagSet']['Tags']}
        else:
            return {}
    except ClientError as e:
        print(f"Error fetching tags for resource {resource_arn}: {e}")
        return {}

def collect_resources_for_region(region):
    ec2_client = clients[region]['ec2']
    rds_client = clients[region]['rds']
    lambda_client = clients[region]['lambda']
    elb_client = clients[region]['elb']
    elbv2_client = clients[region]['elbv2']
    ecs_client = clients[region]['ecs']
    dynamodb_client = clients[region]['dynamodb']
    sns_client = clients[region]['sns']
    sqs_client = clients[region]['sqs']
    redshift_client = clients[region]['redshift']
    dms_client = clients[region]['dms']
    secretsmanager_client = clients[region]['secretsmanager']
    elasticache_client = clients[region]['elasticache']
    es_client = clients[region]['es']
    elasticbeanstalk_client = clients[region]['elasticbeanstalk']
    s3_client = clients[region]['s3']
    ecr_client = clients[region]['ecr']
    route53_client = clients[region]['route53']

    resources = []

    # Fetch EC2 instances
    ec2_instances = paginate_boto3_results(ec2_client, 'describe_instances', 'Reservations')
    for reservation in ec2_instances:
        for instance in reservation['Instances']:
            tags = get_resource_tags(ec2_client, instance['InstanceId'], 'ec2')
            resources.append({
                'ResourceType': 'EC2 Instance',
                'ResourceArn': f"arn:aws:ec2:{region}:{account_number}:instance/{instance['InstanceId']}",
                'ResourceName': tags.get('Name', 'N/A'),
                'Region': region,
                'Tags': tags
            })

    # Fetch RDS DB instances
    rds_instances = paginate_boto3_results(rds_client, 'describe_db_instances', 'DBInstances')
    for instance in rds_instances:
        tags = get_resource_tags(rds_client, instance['DBInstanceArn'], 'rds')
        resources.append({
            'ResourceType': 'RDS DB Instance',
            'ResourceArn': instance['DBInstanceArn'],
            'ResourceName': instance['DBInstanceIdentifier'],
            'Region': region,
            'Tags': tags
        })

    # Fetch RDS DB clusters
    rds_clusters = paginate_boto3_results(rds_client, 'describe_db_clusters', 'DBClusters')
    for cluster in rds_clusters:
        tags = get_resource_tags(rds_client, cluster['DBClusterArn'], 'rds')
        resources.append({
            'ResourceType': 'RDS DB Cluster',
            'ResourceArn': cluster['DBClusterArn'],
            'ResourceName': cluster['DBClusterIdentifier'],
            'Region': region,
            'Tags': tags
        })

    # Fetch Lambda functions
    lambda_functions = paginate_boto3_results(lambda_client, 'list_functions', 'Functions')
    for function in lambda_functions:
        tags = get_resource_tags(lambda_client, function['FunctionArn'], 'lambda')
        resources.append({
            'ResourceType': 'Lambda Function',
            'ResourceArn': function['FunctionArn'],
            'ResourceName': function['FunctionName'],
            'Region': region,
            'Tags': tags
        })

    # Fetch Classic Load Balancers
    elbs = paginate_boto3_results(elb_client, 'describe_load_balancers', 'LoadBalancerDescriptions')
    for elb in elbs:
        tags = get_resource_tags(elb_client, elb['LoadBalancerName'], 'elb')
        resources.append({
            'ResourceType': 'Classic Load Balancer',
            'ResourceArn': f"arn:aws:elasticloadbalancing:{region}:{account_number}:loadbalancer/{elb['LoadBalancerName']}",
            'ResourceName': elb['LoadBalancerName'],
            'Region': region,
            'Tags': tags
        })

    # Fetch Application Load Balancers
    albs = paginate_boto3_results(elbv2_client, 'describe_load_balancers', 'LoadBalancers')
    for alb in albs:
        try:
            response = elbv2_client.describe_tags(ResourceArns=[alb['LoadBalancerArn']])
            tags = {tag['Key']: tag['Value'] for tag in response['TagDescriptions'][0]['Tags']}
        except ClientError as e:
            print(f"Error fetching tags for ALB {alb['LoadBalancerArn']}: {e}")
            tags = {}
        resources.append({
            'ResourceType': 'Application Load Balancer',
            'ResourceArn': alb['LoadBalancerArn'],
            'ResourceName': alb['LoadBalancerName'],
            'Region': region,
            'Tags': tags
        })

    # Fetch ECS clusters
    ecs_clusters = paginate_boto3_results(ecs_client, 'list_clusters', 'clusterArns')
    for cluster_arn in ecs_clusters:
        cluster_name = cluster_arn.split('/')[-1]
        tags = get_resource_tags(ecs_client, cluster_arn, 'ecs')
        resources.append({
            'ResourceType': 'ECS Cluster',
            'ResourceArn': cluster_arn,
            'ResourceName': cluster_name,
            'Region': region,
            'Tags': tags
        })

    # Fetch ECS services
    for cluster_arn in ecs_clusters:
        ecs_services = paginate_boto3_results(ecs_client, 'list_services', 'serviceArns')
        for service_arn in ecs_services:
            service_name = service_arn.split('/')[-1]
            tags = get_resource_tags(ecs_client, service_arn, 'ecs')
            resources.append({
                'ResourceType': 'ECS Service',
                'ResourceArn': service_arn,
                'ResourceName': service_name,
                'Region': region,
                'Tags': tags
            })

    # Fetch ECS task definitions
    ecs_task_defs = paginate_boto3_results(ecs_client, 'list_task_definitions', 'taskDefinitionArns')
    for task_def_arn in ecs_task_defs:
        task_def_name = task_def_arn.split('/')[-1]
        tags = get_resource_tags(ecs_client, task_def_arn, 'ecs')
        resources.append({
            'ResourceType': 'ECS Task Definition',
            'ResourceArn': task_def_arn,
            'ResourceName': task_def_name,
            'Region': region,
            'Tags': tags
        })

    # Fetch DynamoDB tables
    dynamodb_tables = paginate_boto3_results(dynamodb_client, 'list_tables', 'TableNames')
    for table_name in dynamodb_tables:
        table_arn = f"arn:aws:dynamodb:{region}:{account_number}:table/{table_name}"
        tags = get_resource_tags(dynamodb_client, table_arn, 'dynamodb')
        resources.append({
            'ResourceType': 'DynamoDB Table',
            'ResourceArn': table_arn,
            'ResourceName': table_name,
            'Region': region,
            'Tags': tags
        })

    # Fetch SNS topics
    sns_topics = paginate_boto3_results(sns_client, 'list_topics', 'Topics')
    for topic in sns_topics:
        tags = get_resource_tags(sns_client, topic['TopicArn'], 'sns')
        resources.append({
            'ResourceType': 'SNS Topic',
            'ResourceArn': topic['TopicArn'],
            'ResourceName': topic['TopicArn'].split(':')[-1],
            'Region': region,
            'Tags': tags
        })

    # Fetch SQS queues
    sqs_queues = paginate_boto3_results(sqs_client, 'list_queues', 'QueueUrls')
    for queue_url in sqs_queues:
        queue_arn = f"arn:aws:sqs:{region}:{account_number}:{queue_url.split('/')[-1]}"
        tags = get_resource_tags(sqs_client, queue_arn, 'sqs')
        resources.append({
            'ResourceType': 'SQS Queue',
            'ResourceArn': queue_arn,
            'ResourceName': queue_url.split('/')[-1],
            'Region': region,
            'Tags': tags
        })

    # Fetch Redshift clusters
    redshift_clusters = paginate_boto3_results(redshift_client, 'describe_clusters', 'Clusters')
    for cluster in redshift_clusters:
        tags = get_resource_tags(redshift_client, cluster['ClusterNamespaceArn'], 'redshift')
        resources.append({
            'ResourceType': 'Redshift Cluster',
            'ResourceArn': cluster['ClusterNamespaceArn'],
            'ResourceName': cluster['ClusterIdentifier'],
            'Region': region,
            'Tags': tags
        })

    # Fetch DMS replication instances
    dms_instances = paginate_boto3_results(dms_client, 'describe_replication_instances', 'ReplicationInstances')
    for instance in dms_instances:
        tags = get_resource_tags(dms_client, instance['ReplicationInstanceArn'], 'dms')
        resources.append({
            'ResourceType': 'DMS Replication Instance',
            'ResourceArn': instance['ReplicationInstanceArn'],
            'ResourceName': instance['ReplicationInstanceIdentifier'],
            'Region': region,
            'Tags': tags
        })

    # Fetch Secrets Manager secrets
    secrets = paginate_boto3_results(secretsmanager_client, 'list_secrets', 'SecretList')
    for secret in secrets:
        tags = get_resource_tags(secretsmanager_client, secret['ARN'], 'secretsmanager')
        resources.append({
            'ResourceType': 'Secrets Manager Secret',
            'ResourceArn': secret['ARN'],
            'ResourceName': secret['Name'],
            'Region': region,
            'Tags': tags
        })

    # Fetch ElastiCache clusters
    elasticache_clusters = paginate_boto3_results(elasticache_client, 'describe_cache_clusters', 'CacheClusters')
    for cluster in elasticache_clusters:
        tags = get_resource_tags(elasticache_client, cluster['CacheClusterArn'], 'elasticache')
        resources.append({
            'ResourceType': 'ElastiCache Cluster',
            'ResourceArn': cluster['CacheClusterArn'],
            'ResourceName': cluster['CacheClusterId'],
            'Region': region,
            'Tags': tags
        })

    # Fetch Elasticsearch domains
    es_domains = paginate_boto3_results(es_client, 'list_domain_names', 'DomainNames')
    for domain in es_domains:
        domain_arn = f"arn:aws:es:{region}:{account_number}:domain/{domain['DomainName']}"
        tags = get_resource_tags(es_client, domain_arn, 'es')
        resources.append({
            'ResourceType': 'Elasticsearch Domain',
            'ResourceArn': domain_arn,
            'ResourceName': domain['DomainName'],
            'Region': region,
            'Tags': tags
        })

    # Fetch Elastic Beanstalk applications
    elasticbeanstalk_apps = paginate_boto3_results(elasticbeanstalk_client, 'describe_applications', 'Applications')
    for app in elasticbeanstalk_apps:
        app_arn = f"arn:aws:elasticbeanstalk:{region}:{account_number}:application/{app['ApplicationName']}"
        tags = get_resource_tags(elasticbeanstalk_client, app_arn, 'elasticbeanstalk')
        resources.append({
            'ResourceType': 'Elastic Beanstalk Application',
            'ResourceArn': app_arn,
            'ResourceName': app['ApplicationName'],
            'Region': region,
            'Tags': tags
        })

    # Fetch S3 buckets
    s3_buckets = paginate_boto3_results(s3_client, 'list_buckets', 'Buckets')
    for bucket in s3_buckets:
        bucket_region = get_s3_region(bucket['Name'], s3_client)
        bucket_arn = f"arn:aws:s3:::{bucket['Name']}"
        tags = get_s3_tags(bucket['Name'], s3_client)
        resources.append({
            'ResourceType': 'S3 Bucket',
            'ResourceArn': bucket_arn,
            'ResourceName': bucket['Name'],
            'Region': bucket_region,
            'Tags': tags
        })

    # Fetch ECR repositories
    ecr_repos = paginate_boto3_results(ecr_client, 'describe_repositories', 'repositories')
    for repo in ecr_repos:
        tags = get_resource_tags(ecr_client, repo['repositoryArn'], 'ecr')
        resources.append({
            'ResourceType': 'ECR Repository',
            'ResourceArn': repo['repositoryArn'],
            'ResourceName': repo['repositoryName'],
            'Region': region,
            'Tags': tags
        })

    # Fetch Route 53 hosted zones
    route53_zones = paginate_boto3_results(route53_client, 'list_hosted_zones', 'HostedZones')
    for zone in route53_zones:
        zone_arn = f"arn:aws:route53::{account_number}:hostedzone/{zone['Id'].split('/')[-1]}"
        tags = get_resource_tags(route53_client, zone['Id'].split('/')[-1], 'route53')
        resources.append({
            'ResourceType': 'Route 53 Hosted Zone',
            'ResourceArn': zone_arn,
            'ResourceName': zone['Name'],
            'Region': 'global',
            'Tags': tags
        })

    return resources

# Collect resources for all specified regions
all_resources = []
for region in regions:
    all_resources.extend(collect_resources_for_region(region))

# Write collected resources to CSV file
csv_columns = ['ResourceType', 'ResourceArn', 'ResourceName', 'Region', 'Tags']
csv_file = "aws_resources.csv"

try:
    with open(csv_file, 'w') as csvfile:
        writer = csv.DictWriter(csvfile, fieldnames=csv_columns)
        writer.writeheader()
        for resource in all_resources:
            tags_str = ';'.join([f"{key}={value}" for key, value in resource['Tags'].items()])
            resource['Tags'] = tags_str
            writer.writerow(resource)
except IOError as e:
    print(f"I/O error({e.errno}): {e.strerror}")

print(f"Resources have been written to {csv_file}")
