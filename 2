import boto3
import csv
from botocore.config import Config

# Create a custom configuration to disable SSL certificate verification
config = Config(
    retries={
        'max_attempts': 10,
        'mode': 'standard'
    },
    signature_version='v4',
    ssl=False  # Disable SSL certificate verification
)

# Initialize boto3 clients for different AWS services with the custom config
clients = {
    'lambda': boto3.client('lambda', config=config),
    'ec2': boto3.client('ec2', config=config),
    'rds': boto3.client('rds', config=config),
    'elb': boto3.client('elb', config=config),
    'elbv2': boto3.client('elbv2', config=config),
    'ecs': boto3.client('ecs', config=config),
    'dynamodb': boto3.client('dynamodb', config=config),
    'sns': boto3.client('sns', config=config),
    'sqs': boto3.client('sqs', config=config),
    'redshift': boto3.client('redshift', config=config),
    'dms': boto3.client('dms', config=config),
    'secretsmanager': boto3.client('secretsmanager', config=config),
    'elasticache': boto3.client('elasticache', config=config),
    'es': boto3.client('es', config=config),
    'elasticbeanstalk': boto3.client('elasticbeanstalk', config=config),
    's3': boto3.client('s3', config=config),
    'ecr': boto3.client('ecr', config=config),
    'route53': boto3.client('route53', config=config)
}

# Placeholder for AWS account number, update this with your AWS account number
account_number = '123456789012'

# Placeholder for Fiserv-specific tag keys
fiserv_tag_keys = ['Project', 'CostCenter', 'Owner', 'Environment']

# Utility function to get tags for a given resource
def get_tags(client, resource_type, arn):
    try:
        if resource_type == 'ec2':
            tags_response = client.describe_tags(Filters=[{'Name': 'resource-id', 'Values': [arn]}])
            return {tag['Key']: tag['Value'] for tag in tags_response.get('Tags', [])}
        else:
            tags_response = client.list_tags_for_resource(ResourceName=arn)
            return {tag['Key']: tag['Value'] for tag in tags_response.get('Tags', [])}
    except Exception as e:
        print(f"Error getting tags for {arn}: {e}")
        return {}

# Function to fetch results from paginated boto3 calls
def paginate_boto3_results(client, method, key):
    results = []
    paginator = client.get_paginator(method)
    for page in paginator.paginate():
        results.extend(page.get(key, []))
    return results

# List to hold resource information
resources = []

# Fetching resources from various AWS services
for region in ['us-east-1', 'us-west-2']:  # Add other regions as necessary
    clients['ec2'] = boto3.client('ec2', region_name=region, config=config)
    clients['rds'] = boto3.client('rds', region_name=region, config=config)
    clients['elb'] = boto3.client('elb', region_name=region, config=config)
    clients['elbv2'] = boto3.client('elbv2', region_name=region, config=config)
    clients['ecs'] = boto3.client('ecs', region_name=region, config=config)
    clients['dynamodb'] = boto3.client('dynamodb', region_name=region, config=config)
    clients['sns'] = boto3.client('sns', region_name=region, config=config)
    clients['sqs'] = boto3.client('sqs', region_name=region, config=config)
    clients['redshift'] = boto3.client('redshift', region_name=region, config=config)
    clients['dms'] = boto3.client('dms', region_name=region, config=config)
    clients['secretsmanager'] = boto3.client('secretsmanager', region_name=region, config=config)
    clients['elasticache'] = boto3.client('elasticache', region_name=region, config=config)
    clients['es'] = boto3.client('es', region_name=region, config=config)
    clients['elasticbeanstalk'] = boto3.client('elasticbeanstalk', region_name=region, config=config)
    clients['s3'] = boto3.client('s3', region_name=region, config=config)
    clients['ecr'] = boto3.client('ecr', region_name=region, config=config)
    clients['route53'] = boto3.client('route53', region_name=region, config=config)

    # Example for fetching EC2 instances
    ec2_instances = paginate_boto3_results(clients['ec2'], 'describe_instances', 'Reservations')
    for reservation in ec2_instances:
        for instance in reservation['Instances']:
            tags = get_tags(clients['ec2'], 'ec2', instance['InstanceId'])
            resources.append({
                'ResourceType': 'EC2 Instance',
                'ResourceArn': instance['InstanceId'],
                'ResourceName': instance['InstanceId'],
                'Region': region,
                'Tags': tags
            })

    # Example for fetching RDS instances
    rds_instances = paginate_boto3_results(clients['rds'], 'describe_db_instances', 'DBInstances')
    for instance in rds_instances:
        arn = instance['DBInstanceArn']
        tags = get_tags(clients['rds'], 'rds', arn)
        resources.append({
            'ResourceType': 'RDS Instance',
            'ResourceArn': arn,
            'ResourceName': instance['DBInstanceIdentifier'],
            'Region': region,
            'Tags': tags
        })

    # Example for fetching ELB instances
    elb_load_balancers = paginate_boto3_results(clients['elb'], 'describe_load_balancers', 'LoadBalancerDescriptions')
    for lb in elb_load_balancers:
        arn = lb['LoadBalancerArn']
        tags = get_tags(clients['elb'], 'elb', arn)
        resources.append({
            'ResourceType': 'ELB Load Balancer',
            'ResourceArn': arn,
            'ResourceName': lb['LoadBalancerName'],
            'Region': region,
            'Tags': tags
        })

    # Example for fetching ELBv2 instances
    elbv2_load_balancers = paginate_boto3_results(clients['elbv2'], 'describe_load_balancers', 'LoadBalancers')
    for lb in elbv2_load_balancers:
        arn = lb['LoadBalancerArn']
        tags = get_tags(clients['elbv2'], 'elbv2', arn)
        resources.append({
            'ResourceType': 'ELBv2 Load Balancer',
            'ResourceArn': arn,
            'ResourceName': lb['LoadBalancerName'],
            'Region': region,
            'Tags': tags
        })

    # Example for fetching ECS services
    ecs_services = paginate_boto3_results(clients['ecs'], 'list_services', 'serviceArns')
    for service in ecs_services:
        arn = service
        tags = get_tags(clients['ecs'], 'ecs', arn)
        resources.append({
            'ResourceType': 'ECS Service',
            'ResourceArn': arn,
            'ResourceName': arn.split('/')[-1],  # Extract service name from ARN
            'Region': region,
            'Tags': tags
        })

    # Example for fetching DynamoDB tables
    dynamodb_tables = paginate_boto3_results(clients['dynamodb'], 'list_tables', 'TableNames')
    for table in dynamodb_tables:
        arn = f"arn:aws:dynamodb:{region}:{account_number}:table/{table}"
        tags = get_tags(clients['dynamodb'], 'dynamodb', arn)
        resources.append({
            'ResourceType': 'DynamoDB Table',
            'ResourceArn': arn,
            'ResourceName': table,
            'Region': region,
            'Tags': tags
        })

    # Example for fetching SNS topics
    sns_topics = paginate_boto3_results(clients['sns'], 'list_topics', 'Topics')
    for topic in sns_topics:
        arn = topic['TopicArn']
        tags = get_tags(clients['sns'], 'sns', arn)
        resources.append({
            'ResourceType': 'SNS Topic',
            'ResourceArn': arn,
            'ResourceName': arn.split(':')[-1],  # Extract topic name from ARN
            'Region': region,
            'Tags': tags
        })

    # Example for fetching SQS queues
    sqs_queues = paginate_boto3_results(clients['sqs'], 'list_queues', 'QueueUrls')
    for queue in sqs_queues:
        arn = queue
        tags = get_tags(clients['sqs'], 'sqs', arn)
        resources.append({
            'ResourceType': 'SQS Queue',
            'ResourceArn': arn,
            'ResourceName': arn.split('/')[-1],  # Extract queue name from URL
            'Region': region,
            'Tags': tags
        })

    # Example for fetching Redshift clusters
    redshift_clusters = paginate_boto3_results(clients['redshift'], 'describe_clusters', 'Clusters')
    for cluster in redshift_clusters:
        arn = cluster['ClusterArn']
        tags = get_tags(clients['redshift'], 'redshift', arn)
        resources.append({
            'ResourceType': 'Redshift Cluster',
            'ResourceArn': arn,
            'ResourceName': cluster['ClusterIdentifier'],
            'Region': region,
            'Tags': tags
        })

    # Example for fetching DMS replication instances
    dms_replication_instances = paginate_boto3_results(clients['dms'], 'describe_replication_instances', 'ReplicationInstances')
    for rep in dms_replication_instances:
        arn = rep['ReplicationInstanceArn']
        tags = get_tags(clients['dms'], 'dms', arn)
        resources.append({
            'ResourceType': 'DMS Replication Instance',
            'ResourceArn': arn,
            'ResourceName': rep['ReplicationInstanceIdentifier'],
            'Region': region,
            'Tags': tags
        })

    # Example for fetching Secrets Manager secrets
    secrets = paginate_boto3_results(clients['secretsmanager'], 'list_secrets', 'SecretList')
    for secret in secrets:
        arn = secret['ARN']
        tags = get_tags(clients['secretsmanager'], 'secretsmanager', arn)
        resources.append({
            'ResourceType': 'Secrets Manager Secret',
            'ResourceArn': arn,
            'ResourceName': secret['Name'],
            'Region': region,
            'Tags': tags
        })

    # Example for fetching ElastiCache clusters
    elasticache_clusters = paginate_boto3_results(clients['elasticache'], 'list_clusters', 'CacheClusters')
    for cluster in elasticache_clusters:
        arn = cluster['ARN']
        tags = get_tags(clients['elasticache'], 'elasticache', arn)
        resources.append({
            'ResourceType': 'ElastiCache Cluster',
            'ResourceArn': arn,
            'ResourceName': cluster['CacheClusterId'],
            'Region': region,
            'Tags': tags
        })

    # Example for fetching Elasticsearch domains
    es_domains = clients['es'].list_domain_names().get('DomainNames', [])
    for domain in es_domains:
        domain_arn = f"arn:aws:es:{region}:{account_number}:domain/{domain['DomainName']}"
        tags = get_tags(clients['es'], 'es', domain_arn)
        resources.append({
            'ResourceType': 'Elasticsearch Domain',
            'ResourceArn': domain_arn,
            'ResourceName': domain['DomainName'],
            'Region': region,
            'Tags': tags
        })

    # Example for fetching Elastic Beanstalk applications
    eb_apps = paginate_boto3_results(clients['elasticbeanstalk'], 'describe_applications', 'Applications')
    for app in eb_apps:
        arn = f"arn:aws:elasticbeanstalk:{region}:{account_number}:application/{app['ApplicationName']}"
        tags = get_tags(clients['elasticbeanstalk'], 'elasticbeanstalk', arn)
        resources.append({
            'ResourceType': 'Elastic Beanstalk Application',
            'ResourceArn': arn,
            'ResourceName': app['ApplicationName'],
            'Region': region,
            'Tags': tags
        })

    # Example for fetching S3 buckets
    s3_buckets = paginate_boto3_results(clients['s3'], 'list_buckets', 'Buckets')
    for bucket in s3_buckets:
        bucket_name = bucket['Name']
        arn = f"arn:aws:s3:::{bucket_name}"
        tags = get_tags(clients['s3'], 's3', arn)
        resources.append({
            'ResourceType': 'S3 Bucket',
            'ResourceArn': arn,
            'ResourceName': bucket_name,
            'Region': region,
            'Tags': tags
        })

    # Example for fetching ECR repositories
    ecr_repositories = paginate_boto3_results(clients['ecr'], 'describe_repositories', 'repositories')
    for repo in ecr_repositories:
        arn = repo['repositoryArn']
        tags = get_tags(clients['ecr'], 'ecr', arn)
        resources.append({
            'ResourceType': 'ECR Repository',
            'ResourceArn': arn,
            'ResourceName': repo['repositoryName'],
            'Region': region,
            'Tags': tags
        })

    # Example for fetching Route 53 hosted zones
    route53_zones = paginate_boto3_results(clients['route53'], 'list_hosted_zones', 'HostedZones')
    for zone in route53_zones:
        arn = f"arn:aws:route53:::hostedzone/{zone['Id'].split('/')[-1]}"
        tags = get_tags(clients['route53'], 'route53', arn)
        resources.append({
            'ResourceType': 'Route 53 Hosted Zone',
            'ResourceArn': arn,
            'ResourceName': zone['Name'],
            'Region': region,
            'Tags': tags
        })

# Write to CSV
with open('aws_resources.csv', mode='w', newline='') as file:
    writer = csv.writer(file)
    writer.writerow(['ResourceType', 'ResourceArn', 'ResourceName', 'Region'] + fiserv_tag_keys)
    
    for resource in resources:
        row = [
            resource['ResourceType'], 
            resource['ResourceArn'], 
            resource['ResourceName'], 
            resource['Region']
        ]
        row.extend([resource['Tags'].get(key, '') for key in fiserv_tag_keys])
        writer.writerow(row)

print(f"{len(resources)} resources written to aws_resources.csv")
